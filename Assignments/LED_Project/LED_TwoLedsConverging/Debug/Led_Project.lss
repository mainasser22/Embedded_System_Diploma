
Led_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027d4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000027d4  00002848  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001bcc  00000000  00000000  00002868  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b24  00000000  00000000  00004434  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00004f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005208  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00006e51  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00007d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008aec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00008c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00008ed9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000096a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ed       	ldi	r30, 0xD4	; 212
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 40 0a 	call	0x1480	; 0x1480 <main>
      7a:	0c 94 e8 13 	jmp	0x27d0	; 0x27d0 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 cd 13 	jmp	0x279a	; 0x279a <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 bd 13 	jmp	0x277a	; 0x277a <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 d9 13 	jmp	0x27b2	; 0x27b2 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 bd 13 	jmp	0x277a	; 0x277a <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 d9 13 	jmp	0x27b2	; 0x27b2 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 cd 13 	jmp	0x279a	; 0x279a <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 bd 13 	jmp	0x277a	; 0x277a <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 d9 13 	jmp	0x27b2	; 0x27b2 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 bd 13 	jmp	0x277a	; 0x277a <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 d9 13 	jmp	0x27b2	; 0x27b2 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 bd 13 	jmp	0x277a	; 0x277a <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 d9 13 	jmp	0x27b2	; 0x27b2 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 c1 13 	jmp	0x2782	; 0x2782 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 dd 13 	jmp	0x27ba	; 0x27ba <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__pack_f+0x178>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__pack_f+0x172>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__pack_f+0x17c>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__pack_f+0x114>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__pack_f+0x76>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__pack_f+0xca>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__pack_f+0x86>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__pack_f+0x7e>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__pack_f+0x9c>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__pack_f+0x94>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__pack_f+0xbe>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__pack_f+0xee>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__pack_f+0xf6>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__pack_f+0xf6>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__pack_f+0x10e>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__pack_f+0x162>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__pack_f+0x172>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__pack_f+0x144>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__pack_f+0x154>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__pack_f+0x14c>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__pack_f+0x162>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__pack_f+0x164>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__pack_f+0x17c>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <LED_voidInit>:

#include "../DIO/DIO_interface.h"
#include "LED_interface.h"

void LED_voidInit(LED_Type LED_Config)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <LED_voidInit+0x6>
     b3c:	0f 92       	push	r0
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
     b42:	69 83       	std	Y+1, r22	; 0x01
     b44:	7a 83       	std	Y+2, r23	; 0x02
     b46:	8b 83       	std	Y+3, r24	; 0x03

	DIO_VoidSetPinDirection( LED_Config.Port , LED_Config.Pin , DIO_PIN_OUTPUT);
     b48:	89 81       	ldd	r24, Y+1	; 0x01
     b4a:	9a 81       	ldd	r25, Y+2	; 0x02
     b4c:	69 2f       	mov	r22, r25
     b4e:	41 e0       	ldi	r20, 0x01	; 1
     b50:	0e 94 08 06 	call	0xc10	; 0xc10 <DIO_VoidSetPinDirection>

}
     b54:	0f 90       	pop	r0
     b56:	0f 90       	pop	r0
     b58:	0f 90       	pop	r0
     b5a:	cf 91       	pop	r28
     b5c:	df 91       	pop	r29
     b5e:	08 95       	ret

00000b60 <LED_voidOn>:

void LED_voidOn(LED_Type LED_Config)
{
     b60:	df 93       	push	r29
     b62:	cf 93       	push	r28
     b64:	00 d0       	rcall	.+0      	; 0xb66 <LED_voidOn+0x6>
     b66:	0f 92       	push	r0
     b68:	cd b7       	in	r28, 0x3d	; 61
     b6a:	de b7       	in	r29, 0x3e	; 62
     b6c:	69 83       	std	Y+1, r22	; 0x01
     b6e:	7a 83       	std	Y+2, r23	; 0x02
     b70:	8b 83       	std	Y+3, r24	; 0x03

	if(LED_Config.Active_State == ACTIVE_HIGH ){
     b72:	8b 81       	ldd	r24, Y+3	; 0x03
     b74:	81 30       	cpi	r24, 0x01	; 1
     b76:	39 f4       	brne	.+14     	; 0xb86 <LED_voidOn+0x26>

		DIO_VoidSetPinValue(LED_Config.Port ,LED_Config.Pin ,DIO_PIN_HIGH);
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	9a 81       	ldd	r25, Y+2	; 0x02
     b7c:	69 2f       	mov	r22, r25
     b7e:	41 e0       	ldi	r20, 0x01	; 1
     b80:	0e 94 08 07 	call	0xe10	; 0xe10 <DIO_VoidSetPinValue>
     b84:	09 c0       	rjmp	.+18     	; 0xb98 <LED_voidOn+0x38>

	}else if(LED_Config.Active_State == ACTIVE_LOW ){
     b86:	8b 81       	ldd	r24, Y+3	; 0x03
     b88:	88 23       	and	r24, r24
     b8a:	31 f4       	brne	.+12     	; 0xb98 <LED_voidOn+0x38>

		DIO_VoidSetPinValue(LED_Config.Port ,LED_Config.Pin ,DIO_PIN_LOW);
     b8c:	89 81       	ldd	r24, Y+1	; 0x01
     b8e:	9a 81       	ldd	r25, Y+2	; 0x02
     b90:	69 2f       	mov	r22, r25
     b92:	40 e0       	ldi	r20, 0x00	; 0
     b94:	0e 94 08 07 	call	0xe10	; 0xe10 <DIO_VoidSetPinValue>

	}

}
     b98:	0f 90       	pop	r0
     b9a:	0f 90       	pop	r0
     b9c:	0f 90       	pop	r0
     b9e:	cf 91       	pop	r28
     ba0:	df 91       	pop	r29
     ba2:	08 95       	ret

00000ba4 <LED_voidOff>:

void LED_voidOff(LED_Type LED_Config)
{
     ba4:	df 93       	push	r29
     ba6:	cf 93       	push	r28
     ba8:	00 d0       	rcall	.+0      	; 0xbaa <LED_voidOff+0x6>
     baa:	0f 92       	push	r0
     bac:	cd b7       	in	r28, 0x3d	; 61
     bae:	de b7       	in	r29, 0x3e	; 62
     bb0:	69 83       	std	Y+1, r22	; 0x01
     bb2:	7a 83       	std	Y+2, r23	; 0x02
     bb4:	8b 83       	std	Y+3, r24	; 0x03

	if(LED_Config.Active_State == ACTIVE_HIGH ){
     bb6:	8b 81       	ldd	r24, Y+3	; 0x03
     bb8:	81 30       	cpi	r24, 0x01	; 1
     bba:	39 f4       	brne	.+14     	; 0xbca <LED_voidOff+0x26>

		DIO_VoidSetPinValue(LED_Config.Port ,LED_Config.Pin ,DIO_PIN_LOW);
     bbc:	89 81       	ldd	r24, Y+1	; 0x01
     bbe:	9a 81       	ldd	r25, Y+2	; 0x02
     bc0:	69 2f       	mov	r22, r25
     bc2:	40 e0       	ldi	r20, 0x00	; 0
     bc4:	0e 94 08 07 	call	0xe10	; 0xe10 <DIO_VoidSetPinValue>
     bc8:	09 c0       	rjmp	.+18     	; 0xbdc <LED_voidOff+0x38>

	}else if(LED_Config.Active_State == ACTIVE_LOW ){
     bca:	8b 81       	ldd	r24, Y+3	; 0x03
     bcc:	88 23       	and	r24, r24
     bce:	31 f4       	brne	.+12     	; 0xbdc <LED_voidOff+0x38>

		DIO_VoidSetPinValue(LED_Config.Port ,LED_Config.Pin ,DIO_PIN_HIGH);
     bd0:	89 81       	ldd	r24, Y+1	; 0x01
     bd2:	9a 81       	ldd	r25, Y+2	; 0x02
     bd4:	69 2f       	mov	r22, r25
     bd6:	41 e0       	ldi	r20, 0x01	; 1
     bd8:	0e 94 08 07 	call	0xe10	; 0xe10 <DIO_VoidSetPinValue>

	}

}
     bdc:	0f 90       	pop	r0
     bde:	0f 90       	pop	r0
     be0:	0f 90       	pop	r0
     be2:	cf 91       	pop	r28
     be4:	df 91       	pop	r29
     be6:	08 95       	ret

00000be8 <LED_voidToggle>:

void LED_voidToggle( LED_Type LED_Config)
{
     be8:	df 93       	push	r29
     bea:	cf 93       	push	r28
     bec:	00 d0       	rcall	.+0      	; 0xbee <LED_voidToggle+0x6>
     bee:	0f 92       	push	r0
     bf0:	cd b7       	in	r28, 0x3d	; 61
     bf2:	de b7       	in	r29, 0x3e	; 62
     bf4:	69 83       	std	Y+1, r22	; 0x01
     bf6:	7a 83       	std	Y+2, r23	; 0x02
     bf8:	8b 83       	std	Y+3, r24	; 0x03
	DIO_VoidTogglePinValue( LED_Config.Port , LED_Config.Pin );
     bfa:	89 81       	ldd	r24, Y+1	; 0x01
     bfc:	9a 81       	ldd	r25, Y+2	; 0x02
     bfe:	69 2f       	mov	r22, r25
     c00:	0e 94 08 08 	call	0x1010	; 0x1010 <DIO_VoidTogglePinValue>
}
     c04:	0f 90       	pop	r0
     c06:	0f 90       	pop	r0
     c08:	0f 90       	pop	r0
     c0a:	cf 91       	pop	r28
     c0c:	df 91       	pop	r29
     c0e:	08 95       	ret

00000c10 <DIO_VoidSetPinDirection>:
#include "DIO_config.h"
#include "DIO_interface.h"
#include "DIO_private.h"

void DIO_VoidSetPinDirection(u8 Copy_u8PORT,u8 Copy_u8PIN,u8 Copy_u8Direction)
{
     c10:	df 93       	push	r29
     c12:	cf 93       	push	r28
     c14:	cd b7       	in	r28, 0x3d	; 61
     c16:	de b7       	in	r29, 0x3e	; 62
     c18:	27 97       	sbiw	r28, 0x07	; 7
     c1a:	0f b6       	in	r0, 0x3f	; 63
     c1c:	f8 94       	cli
     c1e:	de bf       	out	0x3e, r29	; 62
     c20:	0f be       	out	0x3f, r0	; 63
     c22:	cd bf       	out	0x3d, r28	; 61
     c24:	89 83       	std	Y+1, r24	; 0x01
     c26:	6a 83       	std	Y+2, r22	; 0x02
     c28:	4b 83       	std	Y+3, r20	; 0x03
  if(Copy_u8Direction== DIO_PIN_OUTPUT )
     c2a:	8b 81       	ldd	r24, Y+3	; 0x03
     c2c:	81 30       	cpi	r24, 0x01	; 1
     c2e:	09 f0       	breq	.+2      	; 0xc32 <DIO_VoidSetPinDirection+0x22>
     c30:	6f c0       	rjmp	.+222    	; 0xd10 <DIO_VoidSetPinDirection+0x100>
  {
	  switch (Copy_u8PORT)
     c32:	89 81       	ldd	r24, Y+1	; 0x01
     c34:	28 2f       	mov	r18, r24
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	3f 83       	std	Y+7, r19	; 0x07
     c3a:	2e 83       	std	Y+6, r18	; 0x06
     c3c:	8e 81       	ldd	r24, Y+6	; 0x06
     c3e:	9f 81       	ldd	r25, Y+7	; 0x07
     c40:	81 30       	cpi	r24, 0x01	; 1
     c42:	91 05       	cpc	r25, r1
     c44:	a9 f0       	breq	.+42     	; 0xc70 <DIO_VoidSetPinDirection+0x60>
     c46:	2e 81       	ldd	r18, Y+6	; 0x06
     c48:	3f 81       	ldd	r19, Y+7	; 0x07
     c4a:	22 30       	cpi	r18, 0x02	; 2
     c4c:	31 05       	cpc	r19, r1
     c4e:	2c f4       	brge	.+10     	; 0xc5a <DIO_VoidSetPinDirection+0x4a>
     c50:	8e 81       	ldd	r24, Y+6	; 0x06
     c52:	9f 81       	ldd	r25, Y+7	; 0x07
     c54:	00 97       	sbiw	r24, 0x00	; 0
     c56:	01 f1       	breq	.+64     	; 0xc98 <DIO_VoidSetPinDirection+0x88>
     c58:	d2 c0       	rjmp	.+420    	; 0xdfe <DIO_VoidSetPinDirection+0x1ee>
     c5a:	2e 81       	ldd	r18, Y+6	; 0x06
     c5c:	3f 81       	ldd	r19, Y+7	; 0x07
     c5e:	22 30       	cpi	r18, 0x02	; 2
     c60:	31 05       	cpc	r19, r1
     c62:	71 f1       	breq	.+92     	; 0xcc0 <DIO_VoidSetPinDirection+0xb0>
     c64:	8e 81       	ldd	r24, Y+6	; 0x06
     c66:	9f 81       	ldd	r25, Y+7	; 0x07
     c68:	83 30       	cpi	r24, 0x03	; 3
     c6a:	91 05       	cpc	r25, r1
     c6c:	e9 f1       	breq	.+122    	; 0xce8 <DIO_VoidSetPinDirection+0xd8>
     c6e:	c7 c0       	rjmp	.+398    	; 0xdfe <DIO_VoidSetPinDirection+0x1ee>
	  {
	  case DIO_PORTB: SET_BIT(DDRB,Copy_u8PIN); break;
     c70:	a7 e3       	ldi	r26, 0x37	; 55
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	e7 e3       	ldi	r30, 0x37	; 55
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	48 2f       	mov	r20, r24
     c7c:	8a 81       	ldd	r24, Y+2	; 0x02
     c7e:	28 2f       	mov	r18, r24
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	02 2e       	mov	r0, r18
     c88:	02 c0       	rjmp	.+4      	; 0xc8e <DIO_VoidSetPinDirection+0x7e>
     c8a:	88 0f       	add	r24, r24
     c8c:	99 1f       	adc	r25, r25
     c8e:	0a 94       	dec	r0
     c90:	e2 f7       	brpl	.-8      	; 0xc8a <DIO_VoidSetPinDirection+0x7a>
     c92:	84 2b       	or	r24, r20
     c94:	8c 93       	st	X, r24
     c96:	b3 c0       	rjmp	.+358    	; 0xdfe <DIO_VoidSetPinDirection+0x1ee>
	  case DIO_PORTA: SET_BIT(DDRA,Copy_u8PIN); break;
     c98:	aa e3       	ldi	r26, 0x3A	; 58
     c9a:	b0 e0       	ldi	r27, 0x00	; 0
     c9c:	ea e3       	ldi	r30, 0x3A	; 58
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	80 81       	ld	r24, Z
     ca2:	48 2f       	mov	r20, r24
     ca4:	8a 81       	ldd	r24, Y+2	; 0x02
     ca6:	28 2f       	mov	r18, r24
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	02 2e       	mov	r0, r18
     cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <DIO_VoidSetPinDirection+0xa6>
     cb2:	88 0f       	add	r24, r24
     cb4:	99 1f       	adc	r25, r25
     cb6:	0a 94       	dec	r0
     cb8:	e2 f7       	brpl	.-8      	; 0xcb2 <DIO_VoidSetPinDirection+0xa2>
     cba:	84 2b       	or	r24, r20
     cbc:	8c 93       	st	X, r24
     cbe:	9f c0       	rjmp	.+318    	; 0xdfe <DIO_VoidSetPinDirection+0x1ee>
	  case DIO_PORTC: SET_BIT(DDRC,Copy_u8PIN); break;
     cc0:	a4 e3       	ldi	r26, 0x34	; 52
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	e4 e3       	ldi	r30, 0x34	; 52
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	48 2f       	mov	r20, r24
     ccc:	8a 81       	ldd	r24, Y+2	; 0x02
     cce:	28 2f       	mov	r18, r24
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	02 2e       	mov	r0, r18
     cd8:	02 c0       	rjmp	.+4      	; 0xcde <DIO_VoidSetPinDirection+0xce>
     cda:	88 0f       	add	r24, r24
     cdc:	99 1f       	adc	r25, r25
     cde:	0a 94       	dec	r0
     ce0:	e2 f7       	brpl	.-8      	; 0xcda <DIO_VoidSetPinDirection+0xca>
     ce2:	84 2b       	or	r24, r20
     ce4:	8c 93       	st	X, r24
     ce6:	8b c0       	rjmp	.+278    	; 0xdfe <DIO_VoidSetPinDirection+0x1ee>
	  case DIO_PORTD: SET_BIT(DDRD,Copy_u8PIN); break;
     ce8:	a1 e3       	ldi	r26, 0x31	; 49
     cea:	b0 e0       	ldi	r27, 0x00	; 0
     cec:	e1 e3       	ldi	r30, 0x31	; 49
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	80 81       	ld	r24, Z
     cf2:	48 2f       	mov	r20, r24
     cf4:	8a 81       	ldd	r24, Y+2	; 0x02
     cf6:	28 2f       	mov	r18, r24
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	02 2e       	mov	r0, r18
     d00:	02 c0       	rjmp	.+4      	; 0xd06 <DIO_VoidSetPinDirection+0xf6>
     d02:	88 0f       	add	r24, r24
     d04:	99 1f       	adc	r25, r25
     d06:	0a 94       	dec	r0
     d08:	e2 f7       	brpl	.-8      	; 0xd02 <DIO_VoidSetPinDirection+0xf2>
     d0a:	84 2b       	or	r24, r20
     d0c:	8c 93       	st	X, r24
     d0e:	77 c0       	rjmp	.+238    	; 0xdfe <DIO_VoidSetPinDirection+0x1ee>
	  }
  }
  else if(Copy_u8Direction== DIO_PIN_INPUT)
     d10:	8b 81       	ldd	r24, Y+3	; 0x03
     d12:	88 23       	and	r24, r24
     d14:	09 f0       	breq	.+2      	; 0xd18 <DIO_VoidSetPinDirection+0x108>
     d16:	73 c0       	rjmp	.+230    	; 0xdfe <DIO_VoidSetPinDirection+0x1ee>
  {
	  switch (Copy_u8PORT)
     d18:	89 81       	ldd	r24, Y+1	; 0x01
     d1a:	28 2f       	mov	r18, r24
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	3d 83       	std	Y+5, r19	; 0x05
     d20:	2c 83       	std	Y+4, r18	; 0x04
     d22:	8c 81       	ldd	r24, Y+4	; 0x04
     d24:	9d 81       	ldd	r25, Y+5	; 0x05
     d26:	81 30       	cpi	r24, 0x01	; 1
     d28:	91 05       	cpc	r25, r1
     d2a:	b1 f0       	breq	.+44     	; 0xd58 <DIO_VoidSetPinDirection+0x148>
     d2c:	2c 81       	ldd	r18, Y+4	; 0x04
     d2e:	3d 81       	ldd	r19, Y+5	; 0x05
     d30:	22 30       	cpi	r18, 0x02	; 2
     d32:	31 05       	cpc	r19, r1
     d34:	2c f4       	brge	.+10     	; 0xd40 <DIO_VoidSetPinDirection+0x130>
     d36:	8c 81       	ldd	r24, Y+4	; 0x04
     d38:	9d 81       	ldd	r25, Y+5	; 0x05
     d3a:	00 97       	sbiw	r24, 0x00	; 0
     d3c:	11 f1       	breq	.+68     	; 0xd82 <DIO_VoidSetPinDirection+0x172>
     d3e:	5f c0       	rjmp	.+190    	; 0xdfe <DIO_VoidSetPinDirection+0x1ee>
     d40:	2c 81       	ldd	r18, Y+4	; 0x04
     d42:	3d 81       	ldd	r19, Y+5	; 0x05
     d44:	22 30       	cpi	r18, 0x02	; 2
     d46:	31 05       	cpc	r19, r1
     d48:	89 f1       	breq	.+98     	; 0xdac <DIO_VoidSetPinDirection+0x19c>
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	83 30       	cpi	r24, 0x03	; 3
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <DIO_VoidSetPinDirection+0x146>
     d54:	40 c0       	rjmp	.+128    	; 0xdd6 <DIO_VoidSetPinDirection+0x1c6>
     d56:	53 c0       	rjmp	.+166    	; 0xdfe <DIO_VoidSetPinDirection+0x1ee>
	  {
	  	case DIO_PORTB: CLR_BIT(DDRB,Copy_u8PIN); break;
     d58:	a7 e3       	ldi	r26, 0x37	; 55
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	e7 e3       	ldi	r30, 0x37	; 55
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	48 2f       	mov	r20, r24
     d64:	8a 81       	ldd	r24, Y+2	; 0x02
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	02 2e       	mov	r0, r18
     d70:	02 c0       	rjmp	.+4      	; 0xd76 <DIO_VoidSetPinDirection+0x166>
     d72:	88 0f       	add	r24, r24
     d74:	99 1f       	adc	r25, r25
     d76:	0a 94       	dec	r0
     d78:	e2 f7       	brpl	.-8      	; 0xd72 <DIO_VoidSetPinDirection+0x162>
     d7a:	80 95       	com	r24
     d7c:	84 23       	and	r24, r20
     d7e:	8c 93       	st	X, r24
     d80:	3e c0       	rjmp	.+124    	; 0xdfe <DIO_VoidSetPinDirection+0x1ee>
	    case DIO_PORTA: CLR_BIT(DDRA,Copy_u8PIN); break;
     d82:	aa e3       	ldi	r26, 0x3A	; 58
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	ea e3       	ldi	r30, 0x3A	; 58
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	48 2f       	mov	r20, r24
     d8e:	8a 81       	ldd	r24, Y+2	; 0x02
     d90:	28 2f       	mov	r18, r24
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	02 2e       	mov	r0, r18
     d9a:	02 c0       	rjmp	.+4      	; 0xda0 <DIO_VoidSetPinDirection+0x190>
     d9c:	88 0f       	add	r24, r24
     d9e:	99 1f       	adc	r25, r25
     da0:	0a 94       	dec	r0
     da2:	e2 f7       	brpl	.-8      	; 0xd9c <DIO_VoidSetPinDirection+0x18c>
     da4:	80 95       	com	r24
     da6:	84 23       	and	r24, r20
     da8:	8c 93       	st	X, r24
     daa:	29 c0       	rjmp	.+82     	; 0xdfe <DIO_VoidSetPinDirection+0x1ee>
	  	case DIO_PORTC: CLR_BIT(DDRC,Copy_u8PIN); break;
     dac:	a4 e3       	ldi	r26, 0x34	; 52
     dae:	b0 e0       	ldi	r27, 0x00	; 0
     db0:	e4 e3       	ldi	r30, 0x34	; 52
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	48 2f       	mov	r20, r24
     db8:	8a 81       	ldd	r24, Y+2	; 0x02
     dba:	28 2f       	mov	r18, r24
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	02 2e       	mov	r0, r18
     dc4:	02 c0       	rjmp	.+4      	; 0xdca <DIO_VoidSetPinDirection+0x1ba>
     dc6:	88 0f       	add	r24, r24
     dc8:	99 1f       	adc	r25, r25
     dca:	0a 94       	dec	r0
     dcc:	e2 f7       	brpl	.-8      	; 0xdc6 <DIO_VoidSetPinDirection+0x1b6>
     dce:	80 95       	com	r24
     dd0:	84 23       	and	r24, r20
     dd2:	8c 93       	st	X, r24
     dd4:	14 c0       	rjmp	.+40     	; 0xdfe <DIO_VoidSetPinDirection+0x1ee>
	  	case DIO_PORTD: CLR_BIT(DDRD,Copy_u8PIN); break;
     dd6:	a1 e3       	ldi	r26, 0x31	; 49
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e1 e3       	ldi	r30, 0x31	; 49
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	48 2f       	mov	r20, r24
     de2:	8a 81       	ldd	r24, Y+2	; 0x02
     de4:	28 2f       	mov	r18, r24
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	02 2e       	mov	r0, r18
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <DIO_VoidSetPinDirection+0x1e4>
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	0a 94       	dec	r0
     df6:	e2 f7       	brpl	.-8      	; 0xdf0 <DIO_VoidSetPinDirection+0x1e0>
     df8:	80 95       	com	r24
     dfa:	84 23       	and	r24, r20
     dfc:	8c 93       	st	X, r24
	  }
  }
}
     dfe:	27 96       	adiw	r28, 0x07	; 7
     e00:	0f b6       	in	r0, 0x3f	; 63
     e02:	f8 94       	cli
     e04:	de bf       	out	0x3e, r29	; 62
     e06:	0f be       	out	0x3f, r0	; 63
     e08:	cd bf       	out	0x3d, r28	; 61
     e0a:	cf 91       	pop	r28
     e0c:	df 91       	pop	r29
     e0e:	08 95       	ret

00000e10 <DIO_VoidSetPinValue>:
void DIO_VoidSetPinValue(u8 Copy_u8PORT,u8 Copy_u8PIN,u8 Copy_u8Value)
{
     e10:	df 93       	push	r29
     e12:	cf 93       	push	r28
     e14:	cd b7       	in	r28, 0x3d	; 61
     e16:	de b7       	in	r29, 0x3e	; 62
     e18:	27 97       	sbiw	r28, 0x07	; 7
     e1a:	0f b6       	in	r0, 0x3f	; 63
     e1c:	f8 94       	cli
     e1e:	de bf       	out	0x3e, r29	; 62
     e20:	0f be       	out	0x3f, r0	; 63
     e22:	cd bf       	out	0x3d, r28	; 61
     e24:	89 83       	std	Y+1, r24	; 0x01
     e26:	6a 83       	std	Y+2, r22	; 0x02
     e28:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Value== DIO_PIN_HIGH )
     e2a:	8b 81       	ldd	r24, Y+3	; 0x03
     e2c:	81 30       	cpi	r24, 0x01	; 1
     e2e:	09 f0       	breq	.+2      	; 0xe32 <DIO_VoidSetPinValue+0x22>
     e30:	6f c0       	rjmp	.+222    	; 0xf10 <DIO_VoidSetPinValue+0x100>
	  {
		  switch (Copy_u8PORT)
     e32:	89 81       	ldd	r24, Y+1	; 0x01
     e34:	28 2f       	mov	r18, r24
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	3f 83       	std	Y+7, r19	; 0x07
     e3a:	2e 83       	std	Y+6, r18	; 0x06
     e3c:	8e 81       	ldd	r24, Y+6	; 0x06
     e3e:	9f 81       	ldd	r25, Y+7	; 0x07
     e40:	81 30       	cpi	r24, 0x01	; 1
     e42:	91 05       	cpc	r25, r1
     e44:	a9 f0       	breq	.+42     	; 0xe70 <DIO_VoidSetPinValue+0x60>
     e46:	2e 81       	ldd	r18, Y+6	; 0x06
     e48:	3f 81       	ldd	r19, Y+7	; 0x07
     e4a:	22 30       	cpi	r18, 0x02	; 2
     e4c:	31 05       	cpc	r19, r1
     e4e:	2c f4       	brge	.+10     	; 0xe5a <DIO_VoidSetPinValue+0x4a>
     e50:	8e 81       	ldd	r24, Y+6	; 0x06
     e52:	9f 81       	ldd	r25, Y+7	; 0x07
     e54:	00 97       	sbiw	r24, 0x00	; 0
     e56:	01 f1       	breq	.+64     	; 0xe98 <DIO_VoidSetPinValue+0x88>
     e58:	d2 c0       	rjmp	.+420    	; 0xffe <DIO_VoidSetPinValue+0x1ee>
     e5a:	2e 81       	ldd	r18, Y+6	; 0x06
     e5c:	3f 81       	ldd	r19, Y+7	; 0x07
     e5e:	22 30       	cpi	r18, 0x02	; 2
     e60:	31 05       	cpc	r19, r1
     e62:	71 f1       	breq	.+92     	; 0xec0 <DIO_VoidSetPinValue+0xb0>
     e64:	8e 81       	ldd	r24, Y+6	; 0x06
     e66:	9f 81       	ldd	r25, Y+7	; 0x07
     e68:	83 30       	cpi	r24, 0x03	; 3
     e6a:	91 05       	cpc	r25, r1
     e6c:	e9 f1       	breq	.+122    	; 0xee8 <DIO_VoidSetPinValue+0xd8>
     e6e:	c7 c0       	rjmp	.+398    	; 0xffe <DIO_VoidSetPinValue+0x1ee>
		  {
		  	case DIO_PORTB: SET_BIT(PORTB,Copy_u8PIN); break;
     e70:	a8 e3       	ldi	r26, 0x38	; 56
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	e8 e3       	ldi	r30, 0x38	; 56
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	48 2f       	mov	r20, r24
     e7c:	8a 81       	ldd	r24, Y+2	; 0x02
     e7e:	28 2f       	mov	r18, r24
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	02 2e       	mov	r0, r18
     e88:	02 c0       	rjmp	.+4      	; 0xe8e <DIO_VoidSetPinValue+0x7e>
     e8a:	88 0f       	add	r24, r24
     e8c:	99 1f       	adc	r25, r25
     e8e:	0a 94       	dec	r0
     e90:	e2 f7       	brpl	.-8      	; 0xe8a <DIO_VoidSetPinValue+0x7a>
     e92:	84 2b       	or	r24, r20
     e94:	8c 93       	st	X, r24
     e96:	b3 c0       	rjmp	.+358    	; 0xffe <DIO_VoidSetPinValue+0x1ee>
		  	case DIO_PORTA: SET_BIT(PORTA,Copy_u8PIN); break;
     e98:	ab e3       	ldi	r26, 0x3B	; 59
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	eb e3       	ldi	r30, 0x3B	; 59
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	48 2f       	mov	r20, r24
     ea4:	8a 81       	ldd	r24, Y+2	; 0x02
     ea6:	28 2f       	mov	r18, r24
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	02 2e       	mov	r0, r18
     eb0:	02 c0       	rjmp	.+4      	; 0xeb6 <DIO_VoidSetPinValue+0xa6>
     eb2:	88 0f       	add	r24, r24
     eb4:	99 1f       	adc	r25, r25
     eb6:	0a 94       	dec	r0
     eb8:	e2 f7       	brpl	.-8      	; 0xeb2 <DIO_VoidSetPinValue+0xa2>
     eba:	84 2b       	or	r24, r20
     ebc:	8c 93       	st	X, r24
     ebe:	9f c0       	rjmp	.+318    	; 0xffe <DIO_VoidSetPinValue+0x1ee>
		    case DIO_PORTC: SET_BIT(PORTC,Copy_u8PIN); break;
     ec0:	a5 e3       	ldi	r26, 0x35	; 53
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	e5 e3       	ldi	r30, 0x35	; 53
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	48 2f       	mov	r20, r24
     ecc:	8a 81       	ldd	r24, Y+2	; 0x02
     ece:	28 2f       	mov	r18, r24
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	02 2e       	mov	r0, r18
     ed8:	02 c0       	rjmp	.+4      	; 0xede <DIO_VoidSetPinValue+0xce>
     eda:	88 0f       	add	r24, r24
     edc:	99 1f       	adc	r25, r25
     ede:	0a 94       	dec	r0
     ee0:	e2 f7       	brpl	.-8      	; 0xeda <DIO_VoidSetPinValue+0xca>
     ee2:	84 2b       	or	r24, r20
     ee4:	8c 93       	st	X, r24
     ee6:	8b c0       	rjmp	.+278    	; 0xffe <DIO_VoidSetPinValue+0x1ee>
		  	case DIO_PORTD: SET_BIT(PORTD,Copy_u8PIN); break;
     ee8:	a2 e3       	ldi	r26, 0x32	; 50
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	e2 e3       	ldi	r30, 0x32	; 50
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	48 2f       	mov	r20, r24
     ef4:	8a 81       	ldd	r24, Y+2	; 0x02
     ef6:	28 2f       	mov	r18, r24
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	02 2e       	mov	r0, r18
     f00:	02 c0       	rjmp	.+4      	; 0xf06 <DIO_VoidSetPinValue+0xf6>
     f02:	88 0f       	add	r24, r24
     f04:	99 1f       	adc	r25, r25
     f06:	0a 94       	dec	r0
     f08:	e2 f7       	brpl	.-8      	; 0xf02 <DIO_VoidSetPinValue+0xf2>
     f0a:	84 2b       	or	r24, r20
     f0c:	8c 93       	st	X, r24
     f0e:	77 c0       	rjmp	.+238    	; 0xffe <DIO_VoidSetPinValue+0x1ee>
		  }
	  }
	  else if(Copy_u8Value== DIO_PIN_LOW)
     f10:	8b 81       	ldd	r24, Y+3	; 0x03
     f12:	88 23       	and	r24, r24
     f14:	09 f0       	breq	.+2      	; 0xf18 <DIO_VoidSetPinValue+0x108>
     f16:	73 c0       	rjmp	.+230    	; 0xffe <DIO_VoidSetPinValue+0x1ee>
	  {
		  switch (Copy_u8PORT)
     f18:	89 81       	ldd	r24, Y+1	; 0x01
     f1a:	28 2f       	mov	r18, r24
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	3d 83       	std	Y+5, r19	; 0x05
     f20:	2c 83       	std	Y+4, r18	; 0x04
     f22:	8c 81       	ldd	r24, Y+4	; 0x04
     f24:	9d 81       	ldd	r25, Y+5	; 0x05
     f26:	81 30       	cpi	r24, 0x01	; 1
     f28:	91 05       	cpc	r25, r1
     f2a:	b1 f0       	breq	.+44     	; 0xf58 <DIO_VoidSetPinValue+0x148>
     f2c:	2c 81       	ldd	r18, Y+4	; 0x04
     f2e:	3d 81       	ldd	r19, Y+5	; 0x05
     f30:	22 30       	cpi	r18, 0x02	; 2
     f32:	31 05       	cpc	r19, r1
     f34:	2c f4       	brge	.+10     	; 0xf40 <DIO_VoidSetPinValue+0x130>
     f36:	8c 81       	ldd	r24, Y+4	; 0x04
     f38:	9d 81       	ldd	r25, Y+5	; 0x05
     f3a:	00 97       	sbiw	r24, 0x00	; 0
     f3c:	11 f1       	breq	.+68     	; 0xf82 <DIO_VoidSetPinValue+0x172>
     f3e:	5f c0       	rjmp	.+190    	; 0xffe <DIO_VoidSetPinValue+0x1ee>
     f40:	2c 81       	ldd	r18, Y+4	; 0x04
     f42:	3d 81       	ldd	r19, Y+5	; 0x05
     f44:	22 30       	cpi	r18, 0x02	; 2
     f46:	31 05       	cpc	r19, r1
     f48:	89 f1       	breq	.+98     	; 0xfac <DIO_VoidSetPinValue+0x19c>
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	83 30       	cpi	r24, 0x03	; 3
     f50:	91 05       	cpc	r25, r1
     f52:	09 f4       	brne	.+2      	; 0xf56 <DIO_VoidSetPinValue+0x146>
     f54:	40 c0       	rjmp	.+128    	; 0xfd6 <DIO_VoidSetPinValue+0x1c6>
     f56:	53 c0       	rjmp	.+166    	; 0xffe <DIO_VoidSetPinValue+0x1ee>
		  {
		  	 case DIO_PORTB: CLR_BIT(PORTB,Copy_u8PIN); break;
     f58:	a8 e3       	ldi	r26, 0x38	; 56
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	e8 e3       	ldi	r30, 0x38	; 56
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	48 2f       	mov	r20, r24
     f64:	8a 81       	ldd	r24, Y+2	; 0x02
     f66:	28 2f       	mov	r18, r24
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	02 2e       	mov	r0, r18
     f70:	02 c0       	rjmp	.+4      	; 0xf76 <DIO_VoidSetPinValue+0x166>
     f72:	88 0f       	add	r24, r24
     f74:	99 1f       	adc	r25, r25
     f76:	0a 94       	dec	r0
     f78:	e2 f7       	brpl	.-8      	; 0xf72 <DIO_VoidSetPinValue+0x162>
     f7a:	80 95       	com	r24
     f7c:	84 23       	and	r24, r20
     f7e:	8c 93       	st	X, r24
     f80:	3e c0       	rjmp	.+124    	; 0xffe <DIO_VoidSetPinValue+0x1ee>
		  	 case DIO_PORTA: CLR_BIT(PORTA,Copy_u8PIN); break;
     f82:	ab e3       	ldi	r26, 0x3B	; 59
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	eb e3       	ldi	r30, 0x3B	; 59
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	48 2f       	mov	r20, r24
     f8e:	8a 81       	ldd	r24, Y+2	; 0x02
     f90:	28 2f       	mov	r18, r24
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	02 2e       	mov	r0, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <DIO_VoidSetPinValue+0x190>
     f9c:	88 0f       	add	r24, r24
     f9e:	99 1f       	adc	r25, r25
     fa0:	0a 94       	dec	r0
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <DIO_VoidSetPinValue+0x18c>
     fa4:	80 95       	com	r24
     fa6:	84 23       	and	r24, r20
     fa8:	8c 93       	st	X, r24
     faa:	29 c0       	rjmp	.+82     	; 0xffe <DIO_VoidSetPinValue+0x1ee>
		  	 case DIO_PORTC: CLR_BIT(PORTC,Copy_u8PIN); break;
     fac:	a5 e3       	ldi	r26, 0x35	; 53
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	e5 e3       	ldi	r30, 0x35	; 53
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	48 2f       	mov	r20, r24
     fb8:	8a 81       	ldd	r24, Y+2	; 0x02
     fba:	28 2f       	mov	r18, r24
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	02 2e       	mov	r0, r18
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <DIO_VoidSetPinValue+0x1ba>
     fc6:	88 0f       	add	r24, r24
     fc8:	99 1f       	adc	r25, r25
     fca:	0a 94       	dec	r0
     fcc:	e2 f7       	brpl	.-8      	; 0xfc6 <DIO_VoidSetPinValue+0x1b6>
     fce:	80 95       	com	r24
     fd0:	84 23       	and	r24, r20
     fd2:	8c 93       	st	X, r24
     fd4:	14 c0       	rjmp	.+40     	; 0xffe <DIO_VoidSetPinValue+0x1ee>
		  	 case DIO_PORTD: CLR_BIT(PORTD,Copy_u8PIN); break;
     fd6:	a2 e3       	ldi	r26, 0x32	; 50
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	e2 e3       	ldi	r30, 0x32	; 50
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	48 2f       	mov	r20, r24
     fe2:	8a 81       	ldd	r24, Y+2	; 0x02
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	02 2e       	mov	r0, r18
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <DIO_VoidSetPinValue+0x1e4>
     ff0:	88 0f       	add	r24, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	0a 94       	dec	r0
     ff6:	e2 f7       	brpl	.-8      	; 0xff0 <DIO_VoidSetPinValue+0x1e0>
     ff8:	80 95       	com	r24
     ffa:	84 23       	and	r24, r20
     ffc:	8c 93       	st	X, r24
		  }
	  }

}
     ffe:	27 96       	adiw	r28, 0x07	; 7
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	f8 94       	cli
    1004:	de bf       	out	0x3e, r29	; 62
    1006:	0f be       	out	0x3f, r0	; 63
    1008:	cd bf       	out	0x3d, r28	; 61
    100a:	cf 91       	pop	r28
    100c:	df 91       	pop	r29
    100e:	08 95       	ret

00001010 <DIO_VoidTogglePinValue>:

void DIO_VoidTogglePinValue(u8 Copy_u8PORT,u8 Copy_u8PIN)
{
    1010:	df 93       	push	r29
    1012:	cf 93       	push	r28
    1014:	00 d0       	rcall	.+0      	; 0x1016 <DIO_VoidTogglePinValue+0x6>
    1016:	00 d0       	rcall	.+0      	; 0x1018 <DIO_VoidTogglePinValue+0x8>
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
    101c:	89 83       	std	Y+1, r24	; 0x01
    101e:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PORT)
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	3c 83       	std	Y+4, r19	; 0x04
    1028:	2b 83       	std	Y+3, r18	; 0x03
    102a:	8b 81       	ldd	r24, Y+3	; 0x03
    102c:	9c 81       	ldd	r25, Y+4	; 0x04
    102e:	81 30       	cpi	r24, 0x01	; 1
    1030:	91 05       	cpc	r25, r1
    1032:	a9 f0       	breq	.+42     	; 0x105e <DIO_VoidTogglePinValue+0x4e>
    1034:	2b 81       	ldd	r18, Y+3	; 0x03
    1036:	3c 81       	ldd	r19, Y+4	; 0x04
    1038:	22 30       	cpi	r18, 0x02	; 2
    103a:	31 05       	cpc	r19, r1
    103c:	2c f4       	brge	.+10     	; 0x1048 <DIO_VoidTogglePinValue+0x38>
    103e:	8b 81       	ldd	r24, Y+3	; 0x03
    1040:	9c 81       	ldd	r25, Y+4	; 0x04
    1042:	00 97       	sbiw	r24, 0x00	; 0
    1044:	01 f1       	breq	.+64     	; 0x1086 <DIO_VoidTogglePinValue+0x76>
    1046:	5a c0       	rjmp	.+180    	; 0x10fc <DIO_VoidTogglePinValue+0xec>
    1048:	2b 81       	ldd	r18, Y+3	; 0x03
    104a:	3c 81       	ldd	r19, Y+4	; 0x04
    104c:	22 30       	cpi	r18, 0x02	; 2
    104e:	31 05       	cpc	r19, r1
    1050:	71 f1       	breq	.+92     	; 0x10ae <DIO_VoidTogglePinValue+0x9e>
    1052:	8b 81       	ldd	r24, Y+3	; 0x03
    1054:	9c 81       	ldd	r25, Y+4	; 0x04
    1056:	83 30       	cpi	r24, 0x03	; 3
    1058:	91 05       	cpc	r25, r1
    105a:	e9 f1       	breq	.+122    	; 0x10d6 <DIO_VoidTogglePinValue+0xc6>
    105c:	4f c0       	rjmp	.+158    	; 0x10fc <DIO_VoidTogglePinValue+0xec>
    {
     case DIO_PORTB: TOG_BIT(PORTB,Copy_u8PIN); break;
    105e:	a8 e3       	ldi	r26, 0x38	; 56
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	e8 e3       	ldi	r30, 0x38	; 56
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	48 2f       	mov	r20, r24
    106a:	8a 81       	ldd	r24, Y+2	; 0x02
    106c:	28 2f       	mov	r18, r24
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	02 2e       	mov	r0, r18
    1076:	02 c0       	rjmp	.+4      	; 0x107c <DIO_VoidTogglePinValue+0x6c>
    1078:	88 0f       	add	r24, r24
    107a:	99 1f       	adc	r25, r25
    107c:	0a 94       	dec	r0
    107e:	e2 f7       	brpl	.-8      	; 0x1078 <DIO_VoidTogglePinValue+0x68>
    1080:	84 27       	eor	r24, r20
    1082:	8c 93       	st	X, r24
    1084:	3b c0       	rjmp	.+118    	; 0x10fc <DIO_VoidTogglePinValue+0xec>
	 case DIO_PORTA: TOG_BIT(PORTA,Copy_u8PIN); break;
    1086:	ab e3       	ldi	r26, 0x3B	; 59
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	eb e3       	ldi	r30, 0x3B	; 59
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	48 2f       	mov	r20, r24
    1092:	8a 81       	ldd	r24, Y+2	; 0x02
    1094:	28 2f       	mov	r18, r24
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	02 2e       	mov	r0, r18
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <DIO_VoidTogglePinValue+0x94>
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	0a 94       	dec	r0
    10a6:	e2 f7       	brpl	.-8      	; 0x10a0 <DIO_VoidTogglePinValue+0x90>
    10a8:	84 27       	eor	r24, r20
    10aa:	8c 93       	st	X, r24
    10ac:	27 c0       	rjmp	.+78     	; 0x10fc <DIO_VoidTogglePinValue+0xec>
	 case DIO_PORTC: TOG_BIT(PORTC,Copy_u8PIN); break;
    10ae:	a5 e3       	ldi	r26, 0x35	; 53
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e5 e3       	ldi	r30, 0x35	; 53
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	48 2f       	mov	r20, r24
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	28 2f       	mov	r18, r24
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	02 2e       	mov	r0, r18
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <DIO_VoidTogglePinValue+0xbc>
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	0a 94       	dec	r0
    10ce:	e2 f7       	brpl	.-8      	; 0x10c8 <DIO_VoidTogglePinValue+0xb8>
    10d0:	84 27       	eor	r24, r20
    10d2:	8c 93       	st	X, r24
    10d4:	13 c0       	rjmp	.+38     	; 0x10fc <DIO_VoidTogglePinValue+0xec>
	 case DIO_PORTD: TOG_BIT(PORTD,Copy_u8PIN); break;
    10d6:	a2 e3       	ldi	r26, 0x32	; 50
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	e2 e3       	ldi	r30, 0x32	; 50
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	48 2f       	mov	r20, r24
    10e2:	8a 81       	ldd	r24, Y+2	; 0x02
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	02 2e       	mov	r0, r18
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <DIO_VoidTogglePinValue+0xe4>
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	0a 94       	dec	r0
    10f6:	e2 f7       	brpl	.-8      	; 0x10f0 <DIO_VoidTogglePinValue+0xe0>
    10f8:	84 27       	eor	r24, r20
    10fa:	8c 93       	st	X, r24
	}
}
    10fc:	0f 90       	pop	r0
    10fe:	0f 90       	pop	r0
    1100:	0f 90       	pop	r0
    1102:	0f 90       	pop	r0
    1104:	cf 91       	pop	r28
    1106:	df 91       	pop	r29
    1108:	08 95       	ret

0000110a <DIO_VoidGetPinValue>:

u8 DIO_VoidGetPinValue(u8 Copy_u8PORT,u8 Copy_u8PIN)
{
    110a:	df 93       	push	r29
    110c:	cf 93       	push	r28
    110e:	00 d0       	rcall	.+0      	; 0x1110 <DIO_VoidGetPinValue+0x6>
    1110:	00 d0       	rcall	.+0      	; 0x1112 <DIO_VoidGetPinValue+0x8>
    1112:	0f 92       	push	r0
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
    1118:	8a 83       	std	Y+2, r24	; 0x02
    111a:	6b 83       	std	Y+3, r22	; 0x03
	u8 PIN_u8Value=0;
    111c:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8PORT)
    111e:	8a 81       	ldd	r24, Y+2	; 0x02
    1120:	28 2f       	mov	r18, r24
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	3d 83       	std	Y+5, r19	; 0x05
    1126:	2c 83       	std	Y+4, r18	; 0x04
    1128:	4c 81       	ldd	r20, Y+4	; 0x04
    112a:	5d 81       	ldd	r21, Y+5	; 0x05
    112c:	41 30       	cpi	r20, 0x01	; 1
    112e:	51 05       	cpc	r21, r1
    1130:	c1 f0       	breq	.+48     	; 0x1162 <DIO_VoidGetPinValue+0x58>
    1132:	8c 81       	ldd	r24, Y+4	; 0x04
    1134:	9d 81       	ldd	r25, Y+5	; 0x05
    1136:	82 30       	cpi	r24, 0x02	; 2
    1138:	91 05       	cpc	r25, r1
    113a:	34 f4       	brge	.+12     	; 0x1148 <DIO_VoidGetPinValue+0x3e>
    113c:	2c 81       	ldd	r18, Y+4	; 0x04
    113e:	3d 81       	ldd	r19, Y+5	; 0x05
    1140:	21 15       	cp	r18, r1
    1142:	31 05       	cpc	r19, r1
    1144:	61 f1       	breq	.+88     	; 0x119e <DIO_VoidGetPinValue+0x94>
    1146:	84 c0       	rjmp	.+264    	; 0x1250 <DIO_VoidGetPinValue+0x146>
    1148:	4c 81       	ldd	r20, Y+4	; 0x04
    114a:	5d 81       	ldd	r21, Y+5	; 0x05
    114c:	42 30       	cpi	r20, 0x02	; 2
    114e:	51 05       	cpc	r21, r1
    1150:	09 f4       	brne	.+2      	; 0x1154 <DIO_VoidGetPinValue+0x4a>
    1152:	43 c0       	rjmp	.+134    	; 0x11da <DIO_VoidGetPinValue+0xd0>
    1154:	8c 81       	ldd	r24, Y+4	; 0x04
    1156:	9d 81       	ldd	r25, Y+5	; 0x05
    1158:	83 30       	cpi	r24, 0x03	; 3
    115a:	91 05       	cpc	r25, r1
    115c:	09 f4       	brne	.+2      	; 0x1160 <DIO_VoidGetPinValue+0x56>
    115e:	5b c0       	rjmp	.+182    	; 0x1216 <DIO_VoidGetPinValue+0x10c>
    1160:	77 c0       	rjmp	.+238    	; 0x1250 <DIO_VoidGetPinValue+0x146>
	{
	   case DIO_PORTB: PIN_u8Value=GET_BIT(PINB,Copy_u8PIN); break;
    1162:	e6 e3       	ldi	r30, 0x36	; 54
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	48 2f       	mov	r20, r24
    116a:	50 e0       	ldi	r21, 0x00	; 0
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	02 c0       	rjmp	.+4      	; 0x117c <DIO_VoidGetPinValue+0x72>
    1178:	88 0f       	add	r24, r24
    117a:	99 1f       	adc	r25, r25
    117c:	2a 95       	dec	r18
    117e:	e2 f7       	brpl	.-8      	; 0x1178 <DIO_VoidGetPinValue+0x6e>
    1180:	9a 01       	movw	r18, r20
    1182:	28 23       	and	r18, r24
    1184:	39 23       	and	r19, r25
    1186:	8b 81       	ldd	r24, Y+3	; 0x03
    1188:	88 2f       	mov	r24, r24
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	a9 01       	movw	r20, r18
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <DIO_VoidGetPinValue+0x8a>
    1190:	55 95       	asr	r21
    1192:	47 95       	ror	r20
    1194:	8a 95       	dec	r24
    1196:	e2 f7       	brpl	.-8      	; 0x1190 <DIO_VoidGetPinValue+0x86>
    1198:	ca 01       	movw	r24, r20
    119a:	89 83       	std	Y+1, r24	; 0x01
    119c:	59 c0       	rjmp	.+178    	; 0x1250 <DIO_VoidGetPinValue+0x146>
	   case DIO_PORTA: PIN_u8Value=GET_BIT(PINA,Copy_u8PIN); break;
    119e:	e9 e3       	ldi	r30, 0x39	; 57
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	48 2f       	mov	r20, r24
    11a6:	50 e0       	ldi	r21, 0x00	; 0
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <DIO_VoidGetPinValue+0xae>
    11b4:	88 0f       	add	r24, r24
    11b6:	99 1f       	adc	r25, r25
    11b8:	2a 95       	dec	r18
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <DIO_VoidGetPinValue+0xaa>
    11bc:	9a 01       	movw	r18, r20
    11be:	28 23       	and	r18, r24
    11c0:	39 23       	and	r19, r25
    11c2:	8b 81       	ldd	r24, Y+3	; 0x03
    11c4:	88 2f       	mov	r24, r24
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	a9 01       	movw	r20, r18
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <DIO_VoidGetPinValue+0xc6>
    11cc:	55 95       	asr	r21
    11ce:	47 95       	ror	r20
    11d0:	8a 95       	dec	r24
    11d2:	e2 f7       	brpl	.-8      	; 0x11cc <DIO_VoidGetPinValue+0xc2>
    11d4:	ca 01       	movw	r24, r20
    11d6:	89 83       	std	Y+1, r24	; 0x01
    11d8:	3b c0       	rjmp	.+118    	; 0x1250 <DIO_VoidGetPinValue+0x146>
	   case DIO_PORTC: PIN_u8Value=GET_BIT(PINC,Copy_u8PIN); break;
    11da:	e3 e3       	ldi	r30, 0x33	; 51
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	48 2f       	mov	r20, r24
    11e2:	50 e0       	ldi	r21, 0x00	; 0
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <DIO_VoidGetPinValue+0xea>
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	2a 95       	dec	r18
    11f6:	e2 f7       	brpl	.-8      	; 0x11f0 <DIO_VoidGetPinValue+0xe6>
    11f8:	9a 01       	movw	r18, r20
    11fa:	28 23       	and	r18, r24
    11fc:	39 23       	and	r19, r25
    11fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1200:	88 2f       	mov	r24, r24
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	a9 01       	movw	r20, r18
    1206:	02 c0       	rjmp	.+4      	; 0x120c <DIO_VoidGetPinValue+0x102>
    1208:	55 95       	asr	r21
    120a:	47 95       	ror	r20
    120c:	8a 95       	dec	r24
    120e:	e2 f7       	brpl	.-8      	; 0x1208 <DIO_VoidGetPinValue+0xfe>
    1210:	ca 01       	movw	r24, r20
    1212:	89 83       	std	Y+1, r24	; 0x01
    1214:	1d c0       	rjmp	.+58     	; 0x1250 <DIO_VoidGetPinValue+0x146>
	   case DIO_PORTD: PIN_u8Value=GET_BIT(PIND,Copy_u8PIN); break;
    1216:	e0 e3       	ldi	r30, 0x30	; 48
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	48 2f       	mov	r20, r24
    121e:	50 e0       	ldi	r21, 0x00	; 0
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	28 2f       	mov	r18, r24
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <DIO_VoidGetPinValue+0x126>
    122c:	88 0f       	add	r24, r24
    122e:	99 1f       	adc	r25, r25
    1230:	2a 95       	dec	r18
    1232:	e2 f7       	brpl	.-8      	; 0x122c <DIO_VoidGetPinValue+0x122>
    1234:	9a 01       	movw	r18, r20
    1236:	28 23       	and	r18, r24
    1238:	39 23       	and	r19, r25
    123a:	8b 81       	ldd	r24, Y+3	; 0x03
    123c:	88 2f       	mov	r24, r24
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	a9 01       	movw	r20, r18
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <DIO_VoidGetPinValue+0x13e>
    1244:	55 95       	asr	r21
    1246:	47 95       	ror	r20
    1248:	8a 95       	dec	r24
    124a:	e2 f7       	brpl	.-8      	; 0x1244 <DIO_VoidGetPinValue+0x13a>
    124c:	ca 01       	movw	r24, r20
    124e:	89 83       	std	Y+1, r24	; 0x01
    }
	return PIN_u8Value;
    1250:	89 81       	ldd	r24, Y+1	; 0x01
}
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	cf 91       	pop	r28
    125e:	df 91       	pop	r29
    1260:	08 95       	ret

00001262 <DIO_VoidSetPortDirection>:

void DIO_VoidSetPortDirection(u8 Copy_u8PORT,u8 Copy_u8Direction)
{
    1262:	df 93       	push	r29
    1264:	cf 93       	push	r28
    1266:	00 d0       	rcall	.+0      	; 0x1268 <DIO_VoidSetPortDirection+0x6>
    1268:	00 d0       	rcall	.+0      	; 0x126a <DIO_VoidSetPortDirection+0x8>
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
    126e:	89 83       	std	Y+1, r24	; 0x01
    1270:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PORT)
    1272:	89 81       	ldd	r24, Y+1	; 0x01
    1274:	28 2f       	mov	r18, r24
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	3c 83       	std	Y+4, r19	; 0x04
    127a:	2b 83       	std	Y+3, r18	; 0x03
    127c:	8b 81       	ldd	r24, Y+3	; 0x03
    127e:	9c 81       	ldd	r25, Y+4	; 0x04
    1280:	81 30       	cpi	r24, 0x01	; 1
    1282:	91 05       	cpc	r25, r1
    1284:	a9 f0       	breq	.+42     	; 0x12b0 <DIO_VoidSetPortDirection+0x4e>
    1286:	2b 81       	ldd	r18, Y+3	; 0x03
    1288:	3c 81       	ldd	r19, Y+4	; 0x04
    128a:	22 30       	cpi	r18, 0x02	; 2
    128c:	31 05       	cpc	r19, r1
    128e:	2c f4       	brge	.+10     	; 0x129a <DIO_VoidSetPortDirection+0x38>
    1290:	8b 81       	ldd	r24, Y+3	; 0x03
    1292:	9c 81       	ldd	r25, Y+4	; 0x04
    1294:	00 97       	sbiw	r24, 0x00	; 0
    1296:	89 f0       	breq	.+34     	; 0x12ba <DIO_VoidSetPortDirection+0x58>
    1298:	1e c0       	rjmp	.+60     	; 0x12d6 <DIO_VoidSetPortDirection+0x74>
    129a:	2b 81       	ldd	r18, Y+3	; 0x03
    129c:	3c 81       	ldd	r19, Y+4	; 0x04
    129e:	22 30       	cpi	r18, 0x02	; 2
    12a0:	31 05       	cpc	r19, r1
    12a2:	81 f0       	breq	.+32     	; 0x12c4 <DIO_VoidSetPortDirection+0x62>
    12a4:	8b 81       	ldd	r24, Y+3	; 0x03
    12a6:	9c 81       	ldd	r25, Y+4	; 0x04
    12a8:	83 30       	cpi	r24, 0x03	; 3
    12aa:	91 05       	cpc	r25, r1
    12ac:	81 f0       	breq	.+32     	; 0x12ce <DIO_VoidSetPortDirection+0x6c>
    12ae:	13 c0       	rjmp	.+38     	; 0x12d6 <DIO_VoidSetPortDirection+0x74>
		{
		   case DIO_PORTB: DDRB=Copy_u8Direction; break;
    12b0:	e7 e3       	ldi	r30, 0x37	; 55
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	80 83       	st	Z, r24
    12b8:	0e c0       	rjmp	.+28     	; 0x12d6 <DIO_VoidSetPortDirection+0x74>
		   case DIO_PORTA: DDRA=Copy_u8Direction; break;
    12ba:	ea e3       	ldi	r30, 0x3A	; 58
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	80 83       	st	Z, r24
    12c2:	09 c0       	rjmp	.+18     	; 0x12d6 <DIO_VoidSetPortDirection+0x74>
		   case DIO_PORTC: DDRC=Copy_u8Direction; break;
    12c4:	e4 e3       	ldi	r30, 0x34	; 52
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ca:	80 83       	st	Z, r24
    12cc:	04 c0       	rjmp	.+8      	; 0x12d6 <DIO_VoidSetPortDirection+0x74>
		   case DIO_PORTD: DDRD=Copy_u8Direction; break;
    12ce:	e1 e3       	ldi	r30, 0x31	; 49
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	80 83       	st	Z, r24
	    }

}
    12d6:	0f 90       	pop	r0
    12d8:	0f 90       	pop	r0
    12da:	0f 90       	pop	r0
    12dc:	0f 90       	pop	r0
    12de:	cf 91       	pop	r28
    12e0:	df 91       	pop	r29
    12e2:	08 95       	ret

000012e4 <DIO_VoidSetPortValue>:
void DIO_VoidSetPortValue(u8 Copy_u8PORT,u8 Copy_u8Value)
{
    12e4:	df 93       	push	r29
    12e6:	cf 93       	push	r28
    12e8:	00 d0       	rcall	.+0      	; 0x12ea <DIO_VoidSetPortValue+0x6>
    12ea:	00 d0       	rcall	.+0      	; 0x12ec <DIO_VoidSetPortValue+0x8>
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
    12f0:	89 83       	std	Y+1, r24	; 0x01
    12f2:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PORT)
    12f4:	89 81       	ldd	r24, Y+1	; 0x01
    12f6:	28 2f       	mov	r18, r24
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	3c 83       	std	Y+4, r19	; 0x04
    12fc:	2b 83       	std	Y+3, r18	; 0x03
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	9c 81       	ldd	r25, Y+4	; 0x04
    1302:	81 30       	cpi	r24, 0x01	; 1
    1304:	91 05       	cpc	r25, r1
    1306:	a9 f0       	breq	.+42     	; 0x1332 <DIO_VoidSetPortValue+0x4e>
    1308:	2b 81       	ldd	r18, Y+3	; 0x03
    130a:	3c 81       	ldd	r19, Y+4	; 0x04
    130c:	22 30       	cpi	r18, 0x02	; 2
    130e:	31 05       	cpc	r19, r1
    1310:	2c f4       	brge	.+10     	; 0x131c <DIO_VoidSetPortValue+0x38>
    1312:	8b 81       	ldd	r24, Y+3	; 0x03
    1314:	9c 81       	ldd	r25, Y+4	; 0x04
    1316:	00 97       	sbiw	r24, 0x00	; 0
    1318:	89 f0       	breq	.+34     	; 0x133c <DIO_VoidSetPortValue+0x58>
    131a:	1e c0       	rjmp	.+60     	; 0x1358 <DIO_VoidSetPortValue+0x74>
    131c:	2b 81       	ldd	r18, Y+3	; 0x03
    131e:	3c 81       	ldd	r19, Y+4	; 0x04
    1320:	22 30       	cpi	r18, 0x02	; 2
    1322:	31 05       	cpc	r19, r1
    1324:	81 f0       	breq	.+32     	; 0x1346 <DIO_VoidSetPortValue+0x62>
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	9c 81       	ldd	r25, Y+4	; 0x04
    132a:	83 30       	cpi	r24, 0x03	; 3
    132c:	91 05       	cpc	r25, r1
    132e:	81 f0       	breq	.+32     	; 0x1350 <DIO_VoidSetPortValue+0x6c>
    1330:	13 c0       	rjmp	.+38     	; 0x1358 <DIO_VoidSetPortValue+0x74>
		{
			   case DIO_PORTB: PORTB=Copy_u8Value; break;
    1332:	e8 e3       	ldi	r30, 0x38	; 56
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	8a 81       	ldd	r24, Y+2	; 0x02
    1338:	80 83       	st	Z, r24
    133a:	0e c0       	rjmp	.+28     	; 0x1358 <DIO_VoidSetPortValue+0x74>
			   case DIO_PORTA: PORTA=Copy_u8Value; break;
    133c:	eb e3       	ldi	r30, 0x3B	; 59
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	8a 81       	ldd	r24, Y+2	; 0x02
    1342:	80 83       	st	Z, r24
    1344:	09 c0       	rjmp	.+18     	; 0x1358 <DIO_VoidSetPortValue+0x74>
			   case DIO_PORTC: PORTC=Copy_u8Value; break;
    1346:	e5 e3       	ldi	r30, 0x35	; 53
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	8a 81       	ldd	r24, Y+2	; 0x02
    134c:	80 83       	st	Z, r24
    134e:	04 c0       	rjmp	.+8      	; 0x1358 <DIO_VoidSetPortValue+0x74>
			   case DIO_PORTD: PORTD=Copy_u8Value; break;
    1350:	e2 e3       	ldi	r30, 0x32	; 50
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	8a 81       	ldd	r24, Y+2	; 0x02
    1356:	80 83       	st	Z, r24
	    }
}
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	0f 90       	pop	r0
    1360:	cf 91       	pop	r28
    1362:	df 91       	pop	r29
    1364:	08 95       	ret

00001366 <DIO_VoidTogglePortValue>:
void DIO_VoidTogglePortValue(u8 Copy_u8PORT)
{
    1366:	df 93       	push	r29
    1368:	cf 93       	push	r28
    136a:	00 d0       	rcall	.+0      	; 0x136c <DIO_VoidTogglePortValue+0x6>
    136c:	0f 92       	push	r0
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
    1372:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8PORT)
    1374:	89 81       	ldd	r24, Y+1	; 0x01
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	3b 83       	std	Y+3, r19	; 0x03
    137c:	2a 83       	std	Y+2, r18	; 0x02
    137e:	8a 81       	ldd	r24, Y+2	; 0x02
    1380:	9b 81       	ldd	r25, Y+3	; 0x03
    1382:	81 30       	cpi	r24, 0x01	; 1
    1384:	91 05       	cpc	r25, r1
    1386:	a9 f0       	breq	.+42     	; 0x13b2 <DIO_VoidTogglePortValue+0x4c>
    1388:	2a 81       	ldd	r18, Y+2	; 0x02
    138a:	3b 81       	ldd	r19, Y+3	; 0x03
    138c:	22 30       	cpi	r18, 0x02	; 2
    138e:	31 05       	cpc	r19, r1
    1390:	2c f4       	brge	.+10     	; 0x139c <DIO_VoidTogglePortValue+0x36>
    1392:	8a 81       	ldd	r24, Y+2	; 0x02
    1394:	9b 81       	ldd	r25, Y+3	; 0x03
    1396:	00 97       	sbiw	r24, 0x00	; 0
    1398:	a1 f0       	breq	.+40     	; 0x13c2 <DIO_VoidTogglePortValue+0x5c>
    139a:	2a c0       	rjmp	.+84     	; 0x13f0 <DIO_VoidTogglePortValue+0x8a>
    139c:	2a 81       	ldd	r18, Y+2	; 0x02
    139e:	3b 81       	ldd	r19, Y+3	; 0x03
    13a0:	22 30       	cpi	r18, 0x02	; 2
    13a2:	31 05       	cpc	r19, r1
    13a4:	b1 f0       	breq	.+44     	; 0x13d2 <DIO_VoidTogglePortValue+0x6c>
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	9b 81       	ldd	r25, Y+3	; 0x03
    13aa:	83 30       	cpi	r24, 0x03	; 3
    13ac:	91 05       	cpc	r25, r1
    13ae:	c9 f0       	breq	.+50     	; 0x13e2 <DIO_VoidTogglePortValue+0x7c>
    13b0:	1f c0       	rjmp	.+62     	; 0x13f0 <DIO_VoidTogglePortValue+0x8a>
			{
				   case DIO_PORTB: PORTB=~PORTB; break;
    13b2:	a8 e3       	ldi	r26, 0x38	; 56
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	e8 e3       	ldi	r30, 0x38	; 56
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	80 95       	com	r24
    13be:	8c 93       	st	X, r24
    13c0:	17 c0       	rjmp	.+46     	; 0x13f0 <DIO_VoidTogglePortValue+0x8a>
				   case DIO_PORTA: PORTA=~PORTA; break;
    13c2:	ab e3       	ldi	r26, 0x3B	; 59
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	eb e3       	ldi	r30, 0x3B	; 59
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	80 95       	com	r24
    13ce:	8c 93       	st	X, r24
    13d0:	0f c0       	rjmp	.+30     	; 0x13f0 <DIO_VoidTogglePortValue+0x8a>
				   case DIO_PORTC: PORTC=~PORTC; break;
    13d2:	a5 e3       	ldi	r26, 0x35	; 53
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	e5 e3       	ldi	r30, 0x35	; 53
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	80 95       	com	r24
    13de:	8c 93       	st	X, r24
    13e0:	07 c0       	rjmp	.+14     	; 0x13f0 <DIO_VoidTogglePortValue+0x8a>
				   case DIO_PORTD: PORTD=~PORTD; break;
    13e2:	a2 e3       	ldi	r26, 0x32	; 50
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	e2 e3       	ldi	r30, 0x32	; 50
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	80 95       	com	r24
    13ee:	8c 93       	st	X, r24
		    }
}
    13f0:	0f 90       	pop	r0
    13f2:	0f 90       	pop	r0
    13f4:	0f 90       	pop	r0
    13f6:	cf 91       	pop	r28
    13f8:	df 91       	pop	r29
    13fa:	08 95       	ret

000013fc <DIO_VoidGetPortValue>:
u8   DIO_VoidGetPortValue(u8 Copy_u8PORT)
{
    13fc:	df 93       	push	r29
    13fe:	cf 93       	push	r28
    1400:	00 d0       	rcall	.+0      	; 0x1402 <DIO_VoidGetPortValue+0x6>
    1402:	00 d0       	rcall	.+0      	; 0x1404 <DIO_VoidGetPortValue+0x8>
    1404:	cd b7       	in	r28, 0x3d	; 61
    1406:	de b7       	in	r29, 0x3e	; 62
    1408:	8a 83       	std	Y+2, r24	; 0x02
	u8 PIN_u8Value=0;
    140a:	19 82       	std	Y+1, r1	; 0x01
		switch (Copy_u8PORT)
    140c:	8a 81       	ldd	r24, Y+2	; 0x02
    140e:	28 2f       	mov	r18, r24
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	3c 83       	std	Y+4, r19	; 0x04
    1414:	2b 83       	std	Y+3, r18	; 0x03
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	9c 81       	ldd	r25, Y+4	; 0x04
    141a:	81 30       	cpi	r24, 0x01	; 1
    141c:	91 05       	cpc	r25, r1
    141e:	a9 f0       	breq	.+42     	; 0x144a <DIO_VoidGetPortValue+0x4e>
    1420:	2b 81       	ldd	r18, Y+3	; 0x03
    1422:	3c 81       	ldd	r19, Y+4	; 0x04
    1424:	22 30       	cpi	r18, 0x02	; 2
    1426:	31 05       	cpc	r19, r1
    1428:	2c f4       	brge	.+10     	; 0x1434 <DIO_VoidGetPortValue+0x38>
    142a:	8b 81       	ldd	r24, Y+3	; 0x03
    142c:	9c 81       	ldd	r25, Y+4	; 0x04
    142e:	00 97       	sbiw	r24, 0x00	; 0
    1430:	89 f0       	breq	.+34     	; 0x1454 <DIO_VoidGetPortValue+0x58>
    1432:	1e c0       	rjmp	.+60     	; 0x1470 <DIO_VoidGetPortValue+0x74>
    1434:	2b 81       	ldd	r18, Y+3	; 0x03
    1436:	3c 81       	ldd	r19, Y+4	; 0x04
    1438:	22 30       	cpi	r18, 0x02	; 2
    143a:	31 05       	cpc	r19, r1
    143c:	81 f0       	breq	.+32     	; 0x145e <DIO_VoidGetPortValue+0x62>
    143e:	8b 81       	ldd	r24, Y+3	; 0x03
    1440:	9c 81       	ldd	r25, Y+4	; 0x04
    1442:	83 30       	cpi	r24, 0x03	; 3
    1444:	91 05       	cpc	r25, r1
    1446:	81 f0       	breq	.+32     	; 0x1468 <DIO_VoidGetPortValue+0x6c>
    1448:	13 c0       	rjmp	.+38     	; 0x1470 <DIO_VoidGetPortValue+0x74>
		{
		   case DIO_PORTB: PIN_u8Value=PINB; break;
    144a:	e6 e3       	ldi	r30, 0x36	; 54
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	89 83       	std	Y+1, r24	; 0x01
    1452:	0e c0       	rjmp	.+28     	; 0x1470 <DIO_VoidGetPortValue+0x74>
		   case DIO_PORTA: PIN_u8Value=PINA; break;
    1454:	e9 e3       	ldi	r30, 0x39	; 57
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	89 83       	std	Y+1, r24	; 0x01
    145c:	09 c0       	rjmp	.+18     	; 0x1470 <DIO_VoidGetPortValue+0x74>
		   case DIO_PORTC: PIN_u8Value=PINC; break;
    145e:	e3 e3       	ldi	r30, 0x33	; 51
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	89 83       	std	Y+1, r24	; 0x01
    1466:	04 c0       	rjmp	.+8      	; 0x1470 <DIO_VoidGetPortValue+0x74>
		   case DIO_PORTD: PIN_u8Value=PIND; break;
    1468:	e0 e3       	ldi	r30, 0x30	; 48
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	89 83       	std	Y+1, r24	; 0x01
	    }
		return PIN_u8Value;
    1470:	89 81       	ldd	r24, Y+1	; 0x01
}
    1472:	0f 90       	pop	r0
    1474:	0f 90       	pop	r0
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	cf 91       	pop	r28
    147c:	df 91       	pop	r29
    147e:	08 95       	ret

00001480 <main>:
void TwoLedsDivergingEvery250ms();
void PingPongEffectEvery250ms();
void Incrementing_SnakeEffect_Every250();
void TwoLedsConvergeDivergeEvery250ms ();

int main(void){
    1480:	df 93       	push	r29
    1482:	cf 93       	push	r28
    1484:	0f 92       	push	r0
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62

	for(u8 i=0;i<8;i++)
    148a:	19 82       	std	Y+1, r1	; 0x01
    148c:	13 c0       	rjmp	.+38     	; 0x14b4 <main+0x34>
	{
		LED_voidInit(Leds[i]);
    148e:	89 81       	ldd	r24, Y+1	; 0x01
    1490:	28 2f       	mov	r18, r24
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	c9 01       	movw	r24, r18
    1496:	88 0f       	add	r24, r24
    1498:	99 1f       	adc	r25, r25
    149a:	82 0f       	add	r24, r18
    149c:	93 1f       	adc	r25, r19
    149e:	fc 01       	movw	r30, r24
    14a0:	e8 59       	subi	r30, 0x98	; 152
    14a2:	ff 4f       	sbci	r31, 0xFF	; 255
    14a4:	60 81       	ld	r22, Z
    14a6:	71 81       	ldd	r23, Z+1	; 0x01
    14a8:	82 81       	ldd	r24, Z+2	; 0x02
    14aa:	0e 94 9b 05 	call	0xb36	; 0xb36 <LED_voidInit>
void Incrementing_SnakeEffect_Every250();
void TwoLedsConvergeDivergeEvery250ms ();

int main(void){

	for(u8 i=0;i<8;i++)
    14ae:	89 81       	ldd	r24, Y+1	; 0x01
    14b0:	8f 5f       	subi	r24, 0xFF	; 255
    14b2:	89 83       	std	Y+1, r24	; 0x01
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	88 30       	cpi	r24, 0x08	; 8
    14b8:	50 f3       	brcs	.-44     	; 0x148e <main+0xe>
		LED_voidInit(Leds[i]);
	}

	while(1)
	{
		TwoLedsConvergeDivergeEvery250ms ();
    14ba:	0e 94 98 11 	call	0x2330	; 0x2330 <TwoLedsConvergeDivergeEvery250ms>
    14be:	fd cf       	rjmp	.-6      	; 0x14ba <main+0x3a>

000014c0 <FlashingEvery1sec>:
	}

}
void FlashingEvery1sec(){
    14c0:	df 93       	push	r29
    14c2:	cf 93       	push	r28
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
    14c8:	6e 97       	sbiw	r28, 0x1e	; 30
    14ca:	0f b6       	in	r0, 0x3f	; 63
    14cc:	f8 94       	cli
    14ce:	de bf       	out	0x3e, r29	; 62
    14d0:	0f be       	out	0x3f, r0	; 63
    14d2:	cd bf       	out	0x3d, r28	; 61

	for(u8 i=0;i<8;i++)
    14d4:	1e 8e       	std	Y+30, r1	; 0x1e
    14d6:	13 c0       	rjmp	.+38     	; 0x14fe <FlashingEvery1sec+0x3e>
	{
		LED_voidOn(Leds[i]);
    14d8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    14da:	28 2f       	mov	r18, r24
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	c9 01       	movw	r24, r18
    14e0:	88 0f       	add	r24, r24
    14e2:	99 1f       	adc	r25, r25
    14e4:	82 0f       	add	r24, r18
    14e6:	93 1f       	adc	r25, r19
    14e8:	fc 01       	movw	r30, r24
    14ea:	e8 59       	subi	r30, 0x98	; 152
    14ec:	ff 4f       	sbci	r31, 0xFF	; 255
    14ee:	60 81       	ld	r22, Z
    14f0:	71 81       	ldd	r23, Z+1	; 0x01
    14f2:	82 81       	ldd	r24, Z+2	; 0x02
    14f4:	0e 94 b0 05 	call	0xb60	; 0xb60 <LED_voidOn>
	}

}
void FlashingEvery1sec(){

	for(u8 i=0;i<8;i++)
    14f8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    14fa:	8f 5f       	subi	r24, 0xFF	; 255
    14fc:	8e 8f       	std	Y+30, r24	; 0x1e
    14fe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1500:	88 30       	cpi	r24, 0x08	; 8
    1502:	50 f3       	brcs	.-44     	; 0x14d8 <FlashingEvery1sec+0x18>
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	aa e7       	ldi	r26, 0x7A	; 122
    150a:	b4 e4       	ldi	r27, 0x44	; 68
    150c:	89 8f       	std	Y+25, r24	; 0x19
    150e:	9a 8f       	std	Y+26, r25	; 0x1a
    1510:	ab 8f       	std	Y+27, r26	; 0x1b
    1512:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1514:	69 8d       	ldd	r22, Y+25	; 0x19
    1516:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1518:	8b 8d       	ldd	r24, Y+27	; 0x1b
    151a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    151c:	20 e0       	ldi	r18, 0x00	; 0
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	4a e7       	ldi	r20, 0x7A	; 122
    1522:	53 e4       	ldi	r21, 0x43	; 67
    1524:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1528:	dc 01       	movw	r26, r24
    152a:	cb 01       	movw	r24, r22
    152c:	8d 8b       	std	Y+21, r24	; 0x15
    152e:	9e 8b       	std	Y+22, r25	; 0x16
    1530:	af 8b       	std	Y+23, r26	; 0x17
    1532:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1534:	6d 89       	ldd	r22, Y+21	; 0x15
    1536:	7e 89       	ldd	r23, Y+22	; 0x16
    1538:	8f 89       	ldd	r24, Y+23	; 0x17
    153a:	98 8d       	ldd	r25, Y+24	; 0x18
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	40 e8       	ldi	r20, 0x80	; 128
    1542:	5f e3       	ldi	r21, 0x3F	; 63
    1544:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1548:	88 23       	and	r24, r24
    154a:	2c f4       	brge	.+10     	; 0x1556 <FlashingEvery1sec+0x96>
		__ticks = 1;
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	9c 8b       	std	Y+20, r25	; 0x14
    1552:	8b 8b       	std	Y+19, r24	; 0x13
    1554:	3f c0       	rjmp	.+126    	; 0x15d4 <FlashingEvery1sec+0x114>
	else if (__tmp > 65535)
    1556:	6d 89       	ldd	r22, Y+21	; 0x15
    1558:	7e 89       	ldd	r23, Y+22	; 0x16
    155a:	8f 89       	ldd	r24, Y+23	; 0x17
    155c:	98 8d       	ldd	r25, Y+24	; 0x18
    155e:	20 e0       	ldi	r18, 0x00	; 0
    1560:	3f ef       	ldi	r19, 0xFF	; 255
    1562:	4f e7       	ldi	r20, 0x7F	; 127
    1564:	57 e4       	ldi	r21, 0x47	; 71
    1566:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    156a:	18 16       	cp	r1, r24
    156c:	4c f5       	brge	.+82     	; 0x15c0 <FlashingEvery1sec+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    156e:	69 8d       	ldd	r22, Y+25	; 0x19
    1570:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1572:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1574:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	40 e2       	ldi	r20, 0x20	; 32
    157c:	51 e4       	ldi	r21, 0x41	; 65
    157e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1582:	dc 01       	movw	r26, r24
    1584:	cb 01       	movw	r24, r22
    1586:	bc 01       	movw	r22, r24
    1588:	cd 01       	movw	r24, r26
    158a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    158e:	dc 01       	movw	r26, r24
    1590:	cb 01       	movw	r24, r22
    1592:	9c 8b       	std	Y+20, r25	; 0x14
    1594:	8b 8b       	std	Y+19, r24	; 0x13
    1596:	0f c0       	rjmp	.+30     	; 0x15b6 <FlashingEvery1sec+0xf6>
    1598:	89 e1       	ldi	r24, 0x19	; 25
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	9a 8b       	std	Y+18, r25	; 0x12
    159e:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15a0:	89 89       	ldd	r24, Y+17	; 0x11
    15a2:	9a 89       	ldd	r25, Y+18	; 0x12
    15a4:	01 97       	sbiw	r24, 0x01	; 1
    15a6:	f1 f7       	brne	.-4      	; 0x15a4 <FlashingEvery1sec+0xe4>
    15a8:	9a 8b       	std	Y+18, r25	; 0x12
    15aa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ac:	8b 89       	ldd	r24, Y+19	; 0x13
    15ae:	9c 89       	ldd	r25, Y+20	; 0x14
    15b0:	01 97       	sbiw	r24, 0x01	; 1
    15b2:	9c 8b       	std	Y+20, r25	; 0x14
    15b4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15b6:	8b 89       	ldd	r24, Y+19	; 0x13
    15b8:	9c 89       	ldd	r25, Y+20	; 0x14
    15ba:	00 97       	sbiw	r24, 0x00	; 0
    15bc:	69 f7       	brne	.-38     	; 0x1598 <FlashingEvery1sec+0xd8>
    15be:	14 c0       	rjmp	.+40     	; 0x15e8 <FlashingEvery1sec+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15c0:	6d 89       	ldd	r22, Y+21	; 0x15
    15c2:	7e 89       	ldd	r23, Y+22	; 0x16
    15c4:	8f 89       	ldd	r24, Y+23	; 0x17
    15c6:	98 8d       	ldd	r25, Y+24	; 0x18
    15c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15cc:	dc 01       	movw	r26, r24
    15ce:	cb 01       	movw	r24, r22
    15d0:	9c 8b       	std	Y+20, r25	; 0x14
    15d2:	8b 8b       	std	Y+19, r24	; 0x13
    15d4:	8b 89       	ldd	r24, Y+19	; 0x13
    15d6:	9c 89       	ldd	r25, Y+20	; 0x14
    15d8:	98 8b       	std	Y+16, r25	; 0x10
    15da:	8f 87       	std	Y+15, r24	; 0x0f
    15dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    15de:	98 89       	ldd	r25, Y+16	; 0x10
    15e0:	01 97       	sbiw	r24, 0x01	; 1
    15e2:	f1 f7       	brne	.-4      	; 0x15e0 <FlashingEvery1sec+0x120>
    15e4:	98 8b       	std	Y+16, r25	; 0x10
    15e6:	8f 87       	std	Y+15, r24	; 0x0f
	{
		LED_voidOn(Leds[i]);
	}
	_delay_ms(1000);
	for(u8 i=0;i<8;i++)
    15e8:	1d 8e       	std	Y+29, r1	; 0x1d
    15ea:	13 c0       	rjmp	.+38     	; 0x1612 <FlashingEvery1sec+0x152>
	{
		LED_voidOff(Leds[i]);
    15ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15ee:	28 2f       	mov	r18, r24
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	c9 01       	movw	r24, r18
    15f4:	88 0f       	add	r24, r24
    15f6:	99 1f       	adc	r25, r25
    15f8:	82 0f       	add	r24, r18
    15fa:	93 1f       	adc	r25, r19
    15fc:	fc 01       	movw	r30, r24
    15fe:	e8 59       	subi	r30, 0x98	; 152
    1600:	ff 4f       	sbci	r31, 0xFF	; 255
    1602:	60 81       	ld	r22, Z
    1604:	71 81       	ldd	r23, Z+1	; 0x01
    1606:	82 81       	ldd	r24, Z+2	; 0x02
    1608:	0e 94 d2 05 	call	0xba4	; 0xba4 <LED_voidOff>
	for(u8 i=0;i<8;i++)
	{
		LED_voidOn(Leds[i]);
	}
	_delay_ms(1000);
	for(u8 i=0;i<8;i++)
    160c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    160e:	8f 5f       	subi	r24, 0xFF	; 255
    1610:	8d 8f       	std	Y+29, r24	; 0x1d
    1612:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1614:	88 30       	cpi	r24, 0x08	; 8
    1616:	50 f3       	brcs	.-44     	; 0x15ec <FlashingEvery1sec+0x12c>
    1618:	80 e0       	ldi	r24, 0x00	; 0
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	aa e7       	ldi	r26, 0x7A	; 122
    161e:	b4 e4       	ldi	r27, 0x44	; 68
    1620:	8b 87       	std	Y+11, r24	; 0x0b
    1622:	9c 87       	std	Y+12, r25	; 0x0c
    1624:	ad 87       	std	Y+13, r26	; 0x0d
    1626:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1628:	6b 85       	ldd	r22, Y+11	; 0x0b
    162a:	7c 85       	ldd	r23, Y+12	; 0x0c
    162c:	8d 85       	ldd	r24, Y+13	; 0x0d
    162e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	4a e7       	ldi	r20, 0x7A	; 122
    1636:	53 e4       	ldi	r21, 0x43	; 67
    1638:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    163c:	dc 01       	movw	r26, r24
    163e:	cb 01       	movw	r24, r22
    1640:	8f 83       	std	Y+7, r24	; 0x07
    1642:	98 87       	std	Y+8, r25	; 0x08
    1644:	a9 87       	std	Y+9, r26	; 0x09
    1646:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1648:	6f 81       	ldd	r22, Y+7	; 0x07
    164a:	78 85       	ldd	r23, Y+8	; 0x08
    164c:	89 85       	ldd	r24, Y+9	; 0x09
    164e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1650:	20 e0       	ldi	r18, 0x00	; 0
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	40 e8       	ldi	r20, 0x80	; 128
    1656:	5f e3       	ldi	r21, 0x3F	; 63
    1658:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    165c:	88 23       	and	r24, r24
    165e:	2c f4       	brge	.+10     	; 0x166a <FlashingEvery1sec+0x1aa>
		__ticks = 1;
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	9e 83       	std	Y+6, r25	; 0x06
    1666:	8d 83       	std	Y+5, r24	; 0x05
    1668:	3f c0       	rjmp	.+126    	; 0x16e8 <FlashingEvery1sec+0x228>
	else if (__tmp > 65535)
    166a:	6f 81       	ldd	r22, Y+7	; 0x07
    166c:	78 85       	ldd	r23, Y+8	; 0x08
    166e:	89 85       	ldd	r24, Y+9	; 0x09
    1670:	9a 85       	ldd	r25, Y+10	; 0x0a
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	3f ef       	ldi	r19, 0xFF	; 255
    1676:	4f e7       	ldi	r20, 0x7F	; 127
    1678:	57 e4       	ldi	r21, 0x47	; 71
    167a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    167e:	18 16       	cp	r1, r24
    1680:	4c f5       	brge	.+82     	; 0x16d4 <FlashingEvery1sec+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1682:	6b 85       	ldd	r22, Y+11	; 0x0b
    1684:	7c 85       	ldd	r23, Y+12	; 0x0c
    1686:	8d 85       	ldd	r24, Y+13	; 0x0d
    1688:	9e 85       	ldd	r25, Y+14	; 0x0e
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	40 e2       	ldi	r20, 0x20	; 32
    1690:	51 e4       	ldi	r21, 0x41	; 65
    1692:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1696:	dc 01       	movw	r26, r24
    1698:	cb 01       	movw	r24, r22
    169a:	bc 01       	movw	r22, r24
    169c:	cd 01       	movw	r24, r26
    169e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16a2:	dc 01       	movw	r26, r24
    16a4:	cb 01       	movw	r24, r22
    16a6:	9e 83       	std	Y+6, r25	; 0x06
    16a8:	8d 83       	std	Y+5, r24	; 0x05
    16aa:	0f c0       	rjmp	.+30     	; 0x16ca <FlashingEvery1sec+0x20a>
    16ac:	89 e1       	ldi	r24, 0x19	; 25
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	9c 83       	std	Y+4, r25	; 0x04
    16b2:	8b 83       	std	Y+3, r24	; 0x03
    16b4:	8b 81       	ldd	r24, Y+3	; 0x03
    16b6:	9c 81       	ldd	r25, Y+4	; 0x04
    16b8:	01 97       	sbiw	r24, 0x01	; 1
    16ba:	f1 f7       	brne	.-4      	; 0x16b8 <FlashingEvery1sec+0x1f8>
    16bc:	9c 83       	std	Y+4, r25	; 0x04
    16be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16c0:	8d 81       	ldd	r24, Y+5	; 0x05
    16c2:	9e 81       	ldd	r25, Y+6	; 0x06
    16c4:	01 97       	sbiw	r24, 0x01	; 1
    16c6:	9e 83       	std	Y+6, r25	; 0x06
    16c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ca:	8d 81       	ldd	r24, Y+5	; 0x05
    16cc:	9e 81       	ldd	r25, Y+6	; 0x06
    16ce:	00 97       	sbiw	r24, 0x00	; 0
    16d0:	69 f7       	brne	.-38     	; 0x16ac <FlashingEvery1sec+0x1ec>
    16d2:	14 c0       	rjmp	.+40     	; 0x16fc <FlashingEvery1sec+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16d4:	6f 81       	ldd	r22, Y+7	; 0x07
    16d6:	78 85       	ldd	r23, Y+8	; 0x08
    16d8:	89 85       	ldd	r24, Y+9	; 0x09
    16da:	9a 85       	ldd	r25, Y+10	; 0x0a
    16dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16e0:	dc 01       	movw	r26, r24
    16e2:	cb 01       	movw	r24, r22
    16e4:	9e 83       	std	Y+6, r25	; 0x06
    16e6:	8d 83       	std	Y+5, r24	; 0x05
    16e8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ea:	9e 81       	ldd	r25, Y+6	; 0x06
    16ec:	9a 83       	std	Y+2, r25	; 0x02
    16ee:	89 83       	std	Y+1, r24	; 0x01
    16f0:	89 81       	ldd	r24, Y+1	; 0x01
    16f2:	9a 81       	ldd	r25, Y+2	; 0x02
    16f4:	01 97       	sbiw	r24, 0x01	; 1
    16f6:	f1 f7       	brne	.-4      	; 0x16f4 <FlashingEvery1sec+0x234>
    16f8:	9a 83       	std	Y+2, r25	; 0x02
    16fa:	89 83       	std	Y+1, r24	; 0x01
	{
		LED_voidOff(Leds[i]);
	}
	_delay_ms(1000);
}
    16fc:	6e 96       	adiw	r28, 0x1e	; 30
    16fe:	0f b6       	in	r0, 0x3f	; 63
    1700:	f8 94       	cli
    1702:	de bf       	out	0x3e, r29	; 62
    1704:	0f be       	out	0x3f, r0	; 63
    1706:	cd bf       	out	0x3d, r28	; 61
    1708:	cf 91       	pop	r28
    170a:	df 91       	pop	r29
    170c:	08 95       	ret

0000170e <ShiftingLeftEvery250ms>:
void ShiftingLeftEvery250ms(){
    170e:	df 93       	push	r29
    1710:	cf 93       	push	r28
    1712:	cd b7       	in	r28, 0x3d	; 61
    1714:	de b7       	in	r29, 0x3e	; 62
    1716:	2f 97       	sbiw	r28, 0x0f	; 15
    1718:	0f b6       	in	r0, 0x3f	; 63
    171a:	f8 94       	cli
    171c:	de bf       	out	0x3e, r29	; 62
    171e:	0f be       	out	0x3f, r0	; 63
    1720:	cd bf       	out	0x3d, r28	; 61
	for(u8 i=0;i<8;i++)
    1722:	1f 86       	std	Y+15, r1	; 0x0f
    1724:	95 c0       	rjmp	.+298    	; 0x1850 <ShiftingLeftEvery250ms+0x142>
	{
		LED_voidOn(Leds[i]);
    1726:	8f 85       	ldd	r24, Y+15	; 0x0f
    1728:	28 2f       	mov	r18, r24
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	c9 01       	movw	r24, r18
    172e:	88 0f       	add	r24, r24
    1730:	99 1f       	adc	r25, r25
    1732:	82 0f       	add	r24, r18
    1734:	93 1f       	adc	r25, r19
    1736:	fc 01       	movw	r30, r24
    1738:	e8 59       	subi	r30, 0x98	; 152
    173a:	ff 4f       	sbci	r31, 0xFF	; 255
    173c:	60 81       	ld	r22, Z
    173e:	71 81       	ldd	r23, Z+1	; 0x01
    1740:	82 81       	ldd	r24, Z+2	; 0x02
    1742:	0e 94 b0 05 	call	0xb60	; 0xb60 <LED_voidOn>
    1746:	80 e0       	ldi	r24, 0x00	; 0
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	aa e7       	ldi	r26, 0x7A	; 122
    174c:	b3 e4       	ldi	r27, 0x43	; 67
    174e:	8b 87       	std	Y+11, r24	; 0x0b
    1750:	9c 87       	std	Y+12, r25	; 0x0c
    1752:	ad 87       	std	Y+13, r26	; 0x0d
    1754:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1756:	6b 85       	ldd	r22, Y+11	; 0x0b
    1758:	7c 85       	ldd	r23, Y+12	; 0x0c
    175a:	8d 85       	ldd	r24, Y+13	; 0x0d
    175c:	9e 85       	ldd	r25, Y+14	; 0x0e
    175e:	20 e0       	ldi	r18, 0x00	; 0
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	4a e7       	ldi	r20, 0x7A	; 122
    1764:	53 e4       	ldi	r21, 0x43	; 67
    1766:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    176a:	dc 01       	movw	r26, r24
    176c:	cb 01       	movw	r24, r22
    176e:	8f 83       	std	Y+7, r24	; 0x07
    1770:	98 87       	std	Y+8, r25	; 0x08
    1772:	a9 87       	std	Y+9, r26	; 0x09
    1774:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1776:	6f 81       	ldd	r22, Y+7	; 0x07
    1778:	78 85       	ldd	r23, Y+8	; 0x08
    177a:	89 85       	ldd	r24, Y+9	; 0x09
    177c:	9a 85       	ldd	r25, Y+10	; 0x0a
    177e:	20 e0       	ldi	r18, 0x00	; 0
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	40 e8       	ldi	r20, 0x80	; 128
    1784:	5f e3       	ldi	r21, 0x3F	; 63
    1786:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    178a:	88 23       	and	r24, r24
    178c:	2c f4       	brge	.+10     	; 0x1798 <ShiftingLeftEvery250ms+0x8a>
		__ticks = 1;
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	9e 83       	std	Y+6, r25	; 0x06
    1794:	8d 83       	std	Y+5, r24	; 0x05
    1796:	3f c0       	rjmp	.+126    	; 0x1816 <ShiftingLeftEvery250ms+0x108>
	else if (__tmp > 65535)
    1798:	6f 81       	ldd	r22, Y+7	; 0x07
    179a:	78 85       	ldd	r23, Y+8	; 0x08
    179c:	89 85       	ldd	r24, Y+9	; 0x09
    179e:	9a 85       	ldd	r25, Y+10	; 0x0a
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	3f ef       	ldi	r19, 0xFF	; 255
    17a4:	4f e7       	ldi	r20, 0x7F	; 127
    17a6:	57 e4       	ldi	r21, 0x47	; 71
    17a8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    17ac:	18 16       	cp	r1, r24
    17ae:	4c f5       	brge	.+82     	; 0x1802 <ShiftingLeftEvery250ms+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    17b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    17b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    17b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	40 e2       	ldi	r20, 0x20	; 32
    17be:	51 e4       	ldi	r21, 0x41	; 65
    17c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17c4:	dc 01       	movw	r26, r24
    17c6:	cb 01       	movw	r24, r22
    17c8:	bc 01       	movw	r22, r24
    17ca:	cd 01       	movw	r24, r26
    17cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17d0:	dc 01       	movw	r26, r24
    17d2:	cb 01       	movw	r24, r22
    17d4:	9e 83       	std	Y+6, r25	; 0x06
    17d6:	8d 83       	std	Y+5, r24	; 0x05
    17d8:	0f c0       	rjmp	.+30     	; 0x17f8 <ShiftingLeftEvery250ms+0xea>
    17da:	89 e1       	ldi	r24, 0x19	; 25
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	9c 83       	std	Y+4, r25	; 0x04
    17e0:	8b 83       	std	Y+3, r24	; 0x03
    17e2:	8b 81       	ldd	r24, Y+3	; 0x03
    17e4:	9c 81       	ldd	r25, Y+4	; 0x04
    17e6:	01 97       	sbiw	r24, 0x01	; 1
    17e8:	f1 f7       	brne	.-4      	; 0x17e6 <ShiftingLeftEvery250ms+0xd8>
    17ea:	9c 83       	std	Y+4, r25	; 0x04
    17ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ee:	8d 81       	ldd	r24, Y+5	; 0x05
    17f0:	9e 81       	ldd	r25, Y+6	; 0x06
    17f2:	01 97       	sbiw	r24, 0x01	; 1
    17f4:	9e 83       	std	Y+6, r25	; 0x06
    17f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17f8:	8d 81       	ldd	r24, Y+5	; 0x05
    17fa:	9e 81       	ldd	r25, Y+6	; 0x06
    17fc:	00 97       	sbiw	r24, 0x00	; 0
    17fe:	69 f7       	brne	.-38     	; 0x17da <ShiftingLeftEvery250ms+0xcc>
    1800:	14 c0       	rjmp	.+40     	; 0x182a <ShiftingLeftEvery250ms+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1802:	6f 81       	ldd	r22, Y+7	; 0x07
    1804:	78 85       	ldd	r23, Y+8	; 0x08
    1806:	89 85       	ldd	r24, Y+9	; 0x09
    1808:	9a 85       	ldd	r25, Y+10	; 0x0a
    180a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    180e:	dc 01       	movw	r26, r24
    1810:	cb 01       	movw	r24, r22
    1812:	9e 83       	std	Y+6, r25	; 0x06
    1814:	8d 83       	std	Y+5, r24	; 0x05
    1816:	8d 81       	ldd	r24, Y+5	; 0x05
    1818:	9e 81       	ldd	r25, Y+6	; 0x06
    181a:	9a 83       	std	Y+2, r25	; 0x02
    181c:	89 83       	std	Y+1, r24	; 0x01
    181e:	89 81       	ldd	r24, Y+1	; 0x01
    1820:	9a 81       	ldd	r25, Y+2	; 0x02
    1822:	01 97       	sbiw	r24, 0x01	; 1
    1824:	f1 f7       	brne	.-4      	; 0x1822 <ShiftingLeftEvery250ms+0x114>
    1826:	9a 83       	std	Y+2, r25	; 0x02
    1828:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);
		LED_voidOff(Leds[i]);
    182a:	8f 85       	ldd	r24, Y+15	; 0x0f
    182c:	28 2f       	mov	r18, r24
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	c9 01       	movw	r24, r18
    1832:	88 0f       	add	r24, r24
    1834:	99 1f       	adc	r25, r25
    1836:	82 0f       	add	r24, r18
    1838:	93 1f       	adc	r25, r19
    183a:	fc 01       	movw	r30, r24
    183c:	e8 59       	subi	r30, 0x98	; 152
    183e:	ff 4f       	sbci	r31, 0xFF	; 255
    1840:	60 81       	ld	r22, Z
    1842:	71 81       	ldd	r23, Z+1	; 0x01
    1844:	82 81       	ldd	r24, Z+2	; 0x02
    1846:	0e 94 d2 05 	call	0xba4	; 0xba4 <LED_voidOff>
		LED_voidOff(Leds[i]);
	}
	_delay_ms(1000);
}
void ShiftingLeftEvery250ms(){
	for(u8 i=0;i<8;i++)
    184a:	8f 85       	ldd	r24, Y+15	; 0x0f
    184c:	8f 5f       	subi	r24, 0xFF	; 255
    184e:	8f 87       	std	Y+15, r24	; 0x0f
    1850:	8f 85       	ldd	r24, Y+15	; 0x0f
    1852:	88 30       	cpi	r24, 0x08	; 8
    1854:	08 f4       	brcc	.+2      	; 0x1858 <ShiftingLeftEvery250ms+0x14a>
    1856:	67 cf       	rjmp	.-306    	; 0x1726 <ShiftingLeftEvery250ms+0x18>
	{
		LED_voidOn(Leds[i]);
		_delay_ms(250);
		LED_voidOff(Leds[i]);
	}
}
    1858:	2f 96       	adiw	r28, 0x0f	; 15
    185a:	0f b6       	in	r0, 0x3f	; 63
    185c:	f8 94       	cli
    185e:	de bf       	out	0x3e, r29	; 62
    1860:	0f be       	out	0x3f, r0	; 63
    1862:	cd bf       	out	0x3d, r28	; 61
    1864:	cf 91       	pop	r28
    1866:	df 91       	pop	r29
    1868:	08 95       	ret

0000186a <ShiftingRightEvery250ms>:

void ShiftingRightEvery250ms(){
    186a:	df 93       	push	r29
    186c:	cf 93       	push	r28
    186e:	cd b7       	in	r28, 0x3d	; 61
    1870:	de b7       	in	r29, 0x3e	; 62
    1872:	2f 97       	sbiw	r28, 0x0f	; 15
    1874:	0f b6       	in	r0, 0x3f	; 63
    1876:	f8 94       	cli
    1878:	de bf       	out	0x3e, r29	; 62
    187a:	0f be       	out	0x3f, r0	; 63
    187c:	cd bf       	out	0x3d, r28	; 61
	for(u8 i=0;i<8;i++)
    187e:	1f 86       	std	Y+15, r1	; 0x0f
    1880:	a1 c0       	rjmp	.+322    	; 0x19c4 <ShiftingRightEvery250ms+0x15a>
	{
		LED_voidOn     (Leds[7 - i]);
    1882:	8f 85       	ldd	r24, Y+15	; 0x0f
    1884:	28 2f       	mov	r18, r24
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	87 e0       	ldi	r24, 0x07	; 7
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	ac 01       	movw	r20, r24
    188e:	42 1b       	sub	r20, r18
    1890:	53 0b       	sbc	r21, r19
    1892:	9a 01       	movw	r18, r20
    1894:	c9 01       	movw	r24, r18
    1896:	88 0f       	add	r24, r24
    1898:	99 1f       	adc	r25, r25
    189a:	82 0f       	add	r24, r18
    189c:	93 1f       	adc	r25, r19
    189e:	fc 01       	movw	r30, r24
    18a0:	e8 59       	subi	r30, 0x98	; 152
    18a2:	ff 4f       	sbci	r31, 0xFF	; 255
    18a4:	60 81       	ld	r22, Z
    18a6:	71 81       	ldd	r23, Z+1	; 0x01
    18a8:	82 81       	ldd	r24, Z+2	; 0x02
    18aa:	0e 94 b0 05 	call	0xb60	; 0xb60 <LED_voidOn>
    18ae:	80 e0       	ldi	r24, 0x00	; 0
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	aa e7       	ldi	r26, 0x7A	; 122
    18b4:	b3 e4       	ldi	r27, 0x43	; 67
    18b6:	8b 87       	std	Y+11, r24	; 0x0b
    18b8:	9c 87       	std	Y+12, r25	; 0x0c
    18ba:	ad 87       	std	Y+13, r26	; 0x0d
    18bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18be:	6b 85       	ldd	r22, Y+11	; 0x0b
    18c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    18c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    18c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	4a e7       	ldi	r20, 0x7A	; 122
    18cc:	53 e4       	ldi	r21, 0x43	; 67
    18ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18d2:	dc 01       	movw	r26, r24
    18d4:	cb 01       	movw	r24, r22
    18d6:	8f 83       	std	Y+7, r24	; 0x07
    18d8:	98 87       	std	Y+8, r25	; 0x08
    18da:	a9 87       	std	Y+9, r26	; 0x09
    18dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18de:	6f 81       	ldd	r22, Y+7	; 0x07
    18e0:	78 85       	ldd	r23, Y+8	; 0x08
    18e2:	89 85       	ldd	r24, Y+9	; 0x09
    18e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	40 e8       	ldi	r20, 0x80	; 128
    18ec:	5f e3       	ldi	r21, 0x3F	; 63
    18ee:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18f2:	88 23       	and	r24, r24
    18f4:	2c f4       	brge	.+10     	; 0x1900 <ShiftingRightEvery250ms+0x96>
		__ticks = 1;
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	9e 83       	std	Y+6, r25	; 0x06
    18fc:	8d 83       	std	Y+5, r24	; 0x05
    18fe:	3f c0       	rjmp	.+126    	; 0x197e <ShiftingRightEvery250ms+0x114>
	else if (__tmp > 65535)
    1900:	6f 81       	ldd	r22, Y+7	; 0x07
    1902:	78 85       	ldd	r23, Y+8	; 0x08
    1904:	89 85       	ldd	r24, Y+9	; 0x09
    1906:	9a 85       	ldd	r25, Y+10	; 0x0a
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	3f ef       	ldi	r19, 0xFF	; 255
    190c:	4f e7       	ldi	r20, 0x7F	; 127
    190e:	57 e4       	ldi	r21, 0x47	; 71
    1910:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1914:	18 16       	cp	r1, r24
    1916:	4c f5       	brge	.+82     	; 0x196a <ShiftingRightEvery250ms+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1918:	6b 85       	ldd	r22, Y+11	; 0x0b
    191a:	7c 85       	ldd	r23, Y+12	; 0x0c
    191c:	8d 85       	ldd	r24, Y+13	; 0x0d
    191e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	40 e2       	ldi	r20, 0x20	; 32
    1926:	51 e4       	ldi	r21, 0x41	; 65
    1928:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    192c:	dc 01       	movw	r26, r24
    192e:	cb 01       	movw	r24, r22
    1930:	bc 01       	movw	r22, r24
    1932:	cd 01       	movw	r24, r26
    1934:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1938:	dc 01       	movw	r26, r24
    193a:	cb 01       	movw	r24, r22
    193c:	9e 83       	std	Y+6, r25	; 0x06
    193e:	8d 83       	std	Y+5, r24	; 0x05
    1940:	0f c0       	rjmp	.+30     	; 0x1960 <ShiftingRightEvery250ms+0xf6>
    1942:	89 e1       	ldi	r24, 0x19	; 25
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	9c 83       	std	Y+4, r25	; 0x04
    1948:	8b 83       	std	Y+3, r24	; 0x03
    194a:	8b 81       	ldd	r24, Y+3	; 0x03
    194c:	9c 81       	ldd	r25, Y+4	; 0x04
    194e:	01 97       	sbiw	r24, 0x01	; 1
    1950:	f1 f7       	brne	.-4      	; 0x194e <ShiftingRightEvery250ms+0xe4>
    1952:	9c 83       	std	Y+4, r25	; 0x04
    1954:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1956:	8d 81       	ldd	r24, Y+5	; 0x05
    1958:	9e 81       	ldd	r25, Y+6	; 0x06
    195a:	01 97       	sbiw	r24, 0x01	; 1
    195c:	9e 83       	std	Y+6, r25	; 0x06
    195e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1960:	8d 81       	ldd	r24, Y+5	; 0x05
    1962:	9e 81       	ldd	r25, Y+6	; 0x06
    1964:	00 97       	sbiw	r24, 0x00	; 0
    1966:	69 f7       	brne	.-38     	; 0x1942 <ShiftingRightEvery250ms+0xd8>
    1968:	14 c0       	rjmp	.+40     	; 0x1992 <ShiftingRightEvery250ms+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    196a:	6f 81       	ldd	r22, Y+7	; 0x07
    196c:	78 85       	ldd	r23, Y+8	; 0x08
    196e:	89 85       	ldd	r24, Y+9	; 0x09
    1970:	9a 85       	ldd	r25, Y+10	; 0x0a
    1972:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1976:	dc 01       	movw	r26, r24
    1978:	cb 01       	movw	r24, r22
    197a:	9e 83       	std	Y+6, r25	; 0x06
    197c:	8d 83       	std	Y+5, r24	; 0x05
    197e:	8d 81       	ldd	r24, Y+5	; 0x05
    1980:	9e 81       	ldd	r25, Y+6	; 0x06
    1982:	9a 83       	std	Y+2, r25	; 0x02
    1984:	89 83       	std	Y+1, r24	; 0x01
    1986:	89 81       	ldd	r24, Y+1	; 0x01
    1988:	9a 81       	ldd	r25, Y+2	; 0x02
    198a:	01 97       	sbiw	r24, 0x01	; 1
    198c:	f1 f7       	brne	.-4      	; 0x198a <ShiftingRightEvery250ms+0x120>
    198e:	9a 83       	std	Y+2, r25	; 0x02
    1990:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);
		LED_voidOff     (Leds[7 - i]);
    1992:	8f 85       	ldd	r24, Y+15	; 0x0f
    1994:	28 2f       	mov	r18, r24
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	87 e0       	ldi	r24, 0x07	; 7
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	ac 01       	movw	r20, r24
    199e:	42 1b       	sub	r20, r18
    19a0:	53 0b       	sbc	r21, r19
    19a2:	9a 01       	movw	r18, r20
    19a4:	c9 01       	movw	r24, r18
    19a6:	88 0f       	add	r24, r24
    19a8:	99 1f       	adc	r25, r25
    19aa:	82 0f       	add	r24, r18
    19ac:	93 1f       	adc	r25, r19
    19ae:	fc 01       	movw	r30, r24
    19b0:	e8 59       	subi	r30, 0x98	; 152
    19b2:	ff 4f       	sbci	r31, 0xFF	; 255
    19b4:	60 81       	ld	r22, Z
    19b6:	71 81       	ldd	r23, Z+1	; 0x01
    19b8:	82 81       	ldd	r24, Z+2	; 0x02
    19ba:	0e 94 d2 05 	call	0xba4	; 0xba4 <LED_voidOff>
		LED_voidOff(Leds[i]);
	}
}

void ShiftingRightEvery250ms(){
	for(u8 i=0;i<8;i++)
    19be:	8f 85       	ldd	r24, Y+15	; 0x0f
    19c0:	8f 5f       	subi	r24, 0xFF	; 255
    19c2:	8f 87       	std	Y+15, r24	; 0x0f
    19c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    19c6:	88 30       	cpi	r24, 0x08	; 8
    19c8:	08 f4       	brcc	.+2      	; 0x19cc <ShiftingRightEvery250ms+0x162>
    19ca:	5b cf       	rjmp	.-330    	; 0x1882 <ShiftingRightEvery250ms+0x18>
	{
		LED_voidOn     (Leds[7 - i]);
		_delay_ms(250);
		LED_voidOff     (Leds[7 - i]);
	}
}
    19cc:	2f 96       	adiw	r28, 0x0f	; 15
    19ce:	0f b6       	in	r0, 0x3f	; 63
    19d0:	f8 94       	cli
    19d2:	de bf       	out	0x3e, r29	; 62
    19d4:	0f be       	out	0x3f, r0	; 63
    19d6:	cd bf       	out	0x3d, r28	; 61
    19d8:	cf 91       	pop	r28
    19da:	df 91       	pop	r29
    19dc:	08 95       	ret

000019de <TwoLedsConvergingEvery250ms>:

void TwoLedsConvergingEvery250ms(){
    19de:	df 93       	push	r29
    19e0:	cf 93       	push	r28
    19e2:	cd b7       	in	r28, 0x3d	; 61
    19e4:	de b7       	in	r29, 0x3e	; 62
    19e6:	2f 97       	sbiw	r28, 0x0f	; 15
    19e8:	0f b6       	in	r0, 0x3f	; 63
    19ea:	f8 94       	cli
    19ec:	de bf       	out	0x3e, r29	; 62
    19ee:	0f be       	out	0x3f, r0	; 63
    19f0:	cd bf       	out	0x3d, r28	; 61
	for(u8 i=0;i<4;i++)
    19f2:	1f 86       	std	Y+15, r1	; 0x0f
    19f4:	c1 c0       	rjmp	.+386    	; 0x1b78 <TwoLedsConvergingEvery250ms+0x19a>
	{
		LED_voidOn(Leds[i]);
    19f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    19f8:	28 2f       	mov	r18, r24
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	c9 01       	movw	r24, r18
    19fe:	88 0f       	add	r24, r24
    1a00:	99 1f       	adc	r25, r25
    1a02:	82 0f       	add	r24, r18
    1a04:	93 1f       	adc	r25, r19
    1a06:	fc 01       	movw	r30, r24
    1a08:	e8 59       	subi	r30, 0x98	; 152
    1a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0c:	60 81       	ld	r22, Z
    1a0e:	71 81       	ldd	r23, Z+1	; 0x01
    1a10:	82 81       	ldd	r24, Z+2	; 0x02
    1a12:	0e 94 b0 05 	call	0xb60	; 0xb60 <LED_voidOn>
		LED_voidOn(Leds[7-i]);
    1a16:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a18:	28 2f       	mov	r18, r24
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	87 e0       	ldi	r24, 0x07	; 7
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	ac 01       	movw	r20, r24
    1a22:	42 1b       	sub	r20, r18
    1a24:	53 0b       	sbc	r21, r19
    1a26:	9a 01       	movw	r18, r20
    1a28:	c9 01       	movw	r24, r18
    1a2a:	88 0f       	add	r24, r24
    1a2c:	99 1f       	adc	r25, r25
    1a2e:	82 0f       	add	r24, r18
    1a30:	93 1f       	adc	r25, r19
    1a32:	fc 01       	movw	r30, r24
    1a34:	e8 59       	subi	r30, 0x98	; 152
    1a36:	ff 4f       	sbci	r31, 0xFF	; 255
    1a38:	60 81       	ld	r22, Z
    1a3a:	71 81       	ldd	r23, Z+1	; 0x01
    1a3c:	82 81       	ldd	r24, Z+2	; 0x02
    1a3e:	0e 94 b0 05 	call	0xb60	; 0xb60 <LED_voidOn>
    1a42:	80 e0       	ldi	r24, 0x00	; 0
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	aa e7       	ldi	r26, 0x7A	; 122
    1a48:	b3 e4       	ldi	r27, 0x43	; 67
    1a4a:	8b 87       	std	Y+11, r24	; 0x0b
    1a4c:	9c 87       	std	Y+12, r25	; 0x0c
    1a4e:	ad 87       	std	Y+13, r26	; 0x0d
    1a50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a52:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a54:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a56:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a58:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a5a:	20 e0       	ldi	r18, 0x00	; 0
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	4a e7       	ldi	r20, 0x7A	; 122
    1a60:	53 e4       	ldi	r21, 0x43	; 67
    1a62:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	8f 83       	std	Y+7, r24	; 0x07
    1a6c:	98 87       	std	Y+8, r25	; 0x08
    1a6e:	a9 87       	std	Y+9, r26	; 0x09
    1a70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a72:	6f 81       	ldd	r22, Y+7	; 0x07
    1a74:	78 85       	ldd	r23, Y+8	; 0x08
    1a76:	89 85       	ldd	r24, Y+9	; 0x09
    1a78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	40 e8       	ldi	r20, 0x80	; 128
    1a80:	5f e3       	ldi	r21, 0x3F	; 63
    1a82:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a86:	88 23       	and	r24, r24
    1a88:	2c f4       	brge	.+10     	; 0x1a94 <TwoLedsConvergingEvery250ms+0xb6>
		__ticks = 1;
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	9e 83       	std	Y+6, r25	; 0x06
    1a90:	8d 83       	std	Y+5, r24	; 0x05
    1a92:	3f c0       	rjmp	.+126    	; 0x1b12 <TwoLedsConvergingEvery250ms+0x134>
	else if (__tmp > 65535)
    1a94:	6f 81       	ldd	r22, Y+7	; 0x07
    1a96:	78 85       	ldd	r23, Y+8	; 0x08
    1a98:	89 85       	ldd	r24, Y+9	; 0x09
    1a9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
    1a9e:	3f ef       	ldi	r19, 0xFF	; 255
    1aa0:	4f e7       	ldi	r20, 0x7F	; 127
    1aa2:	57 e4       	ldi	r21, 0x47	; 71
    1aa4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1aa8:	18 16       	cp	r1, r24
    1aaa:	4c f5       	brge	.+82     	; 0x1afe <TwoLedsConvergingEvery250ms+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aac:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aae:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ab0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ab4:	20 e0       	ldi	r18, 0x00	; 0
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	40 e2       	ldi	r20, 0x20	; 32
    1aba:	51 e4       	ldi	r21, 0x41	; 65
    1abc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	cb 01       	movw	r24, r22
    1ac4:	bc 01       	movw	r22, r24
    1ac6:	cd 01       	movw	r24, r26
    1ac8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1acc:	dc 01       	movw	r26, r24
    1ace:	cb 01       	movw	r24, r22
    1ad0:	9e 83       	std	Y+6, r25	; 0x06
    1ad2:	8d 83       	std	Y+5, r24	; 0x05
    1ad4:	0f c0       	rjmp	.+30     	; 0x1af4 <TwoLedsConvergingEvery250ms+0x116>
    1ad6:	89 e1       	ldi	r24, 0x19	; 25
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	9c 83       	std	Y+4, r25	; 0x04
    1adc:	8b 83       	std	Y+3, r24	; 0x03
    1ade:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae2:	01 97       	sbiw	r24, 0x01	; 1
    1ae4:	f1 f7       	brne	.-4      	; 0x1ae2 <TwoLedsConvergingEvery250ms+0x104>
    1ae6:	9c 83       	std	Y+4, r25	; 0x04
    1ae8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aea:	8d 81       	ldd	r24, Y+5	; 0x05
    1aec:	9e 81       	ldd	r25, Y+6	; 0x06
    1aee:	01 97       	sbiw	r24, 0x01	; 1
    1af0:	9e 83       	std	Y+6, r25	; 0x06
    1af2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1af4:	8d 81       	ldd	r24, Y+5	; 0x05
    1af6:	9e 81       	ldd	r25, Y+6	; 0x06
    1af8:	00 97       	sbiw	r24, 0x00	; 0
    1afa:	69 f7       	brne	.-38     	; 0x1ad6 <TwoLedsConvergingEvery250ms+0xf8>
    1afc:	14 c0       	rjmp	.+40     	; 0x1b26 <TwoLedsConvergingEvery250ms+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1afe:	6f 81       	ldd	r22, Y+7	; 0x07
    1b00:	78 85       	ldd	r23, Y+8	; 0x08
    1b02:	89 85       	ldd	r24, Y+9	; 0x09
    1b04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b06:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b0a:	dc 01       	movw	r26, r24
    1b0c:	cb 01       	movw	r24, r22
    1b0e:	9e 83       	std	Y+6, r25	; 0x06
    1b10:	8d 83       	std	Y+5, r24	; 0x05
    1b12:	8d 81       	ldd	r24, Y+5	; 0x05
    1b14:	9e 81       	ldd	r25, Y+6	; 0x06
    1b16:	9a 83       	std	Y+2, r25	; 0x02
    1b18:	89 83       	std	Y+1, r24	; 0x01
    1b1a:	89 81       	ldd	r24, Y+1	; 0x01
    1b1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b1e:	01 97       	sbiw	r24, 0x01	; 1
    1b20:	f1 f7       	brne	.-4      	; 0x1b1e <TwoLedsConvergingEvery250ms+0x140>
    1b22:	9a 83       	std	Y+2, r25	; 0x02
    1b24:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);
		LED_voidOff(Leds[i]);
    1b26:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b28:	28 2f       	mov	r18, r24
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	c9 01       	movw	r24, r18
    1b2e:	88 0f       	add	r24, r24
    1b30:	99 1f       	adc	r25, r25
    1b32:	82 0f       	add	r24, r18
    1b34:	93 1f       	adc	r25, r19
    1b36:	fc 01       	movw	r30, r24
    1b38:	e8 59       	subi	r30, 0x98	; 152
    1b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3c:	60 81       	ld	r22, Z
    1b3e:	71 81       	ldd	r23, Z+1	; 0x01
    1b40:	82 81       	ldd	r24, Z+2	; 0x02
    1b42:	0e 94 d2 05 	call	0xba4	; 0xba4 <LED_voidOff>
		LED_voidOff(Leds[7-i]);
    1b46:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b48:	28 2f       	mov	r18, r24
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	87 e0       	ldi	r24, 0x07	; 7
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	ac 01       	movw	r20, r24
    1b52:	42 1b       	sub	r20, r18
    1b54:	53 0b       	sbc	r21, r19
    1b56:	9a 01       	movw	r18, r20
    1b58:	c9 01       	movw	r24, r18
    1b5a:	88 0f       	add	r24, r24
    1b5c:	99 1f       	adc	r25, r25
    1b5e:	82 0f       	add	r24, r18
    1b60:	93 1f       	adc	r25, r19
    1b62:	fc 01       	movw	r30, r24
    1b64:	e8 59       	subi	r30, 0x98	; 152
    1b66:	ff 4f       	sbci	r31, 0xFF	; 255
    1b68:	60 81       	ld	r22, Z
    1b6a:	71 81       	ldd	r23, Z+1	; 0x01
    1b6c:	82 81       	ldd	r24, Z+2	; 0x02
    1b6e:	0e 94 d2 05 	call	0xba4	; 0xba4 <LED_voidOff>
		LED_voidOff     (Leds[7 - i]);
	}
}

void TwoLedsConvergingEvery250ms(){
	for(u8 i=0;i<4;i++)
    1b72:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b74:	8f 5f       	subi	r24, 0xFF	; 255
    1b76:	8f 87       	std	Y+15, r24	; 0x0f
    1b78:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b7a:	84 30       	cpi	r24, 0x04	; 4
    1b7c:	08 f4       	brcc	.+2      	; 0x1b80 <TwoLedsConvergingEvery250ms+0x1a2>
    1b7e:	3b cf       	rjmp	.-394    	; 0x19f6 <TwoLedsConvergingEvery250ms+0x18>
		LED_voidOn(Leds[7-i]);
		_delay_ms(250);
		LED_voidOff(Leds[i]);
		LED_voidOff(Leds[7-i]);
	}
}
    1b80:	2f 96       	adiw	r28, 0x0f	; 15
    1b82:	0f b6       	in	r0, 0x3f	; 63
    1b84:	f8 94       	cli
    1b86:	de bf       	out	0x3e, r29	; 62
    1b88:	0f be       	out	0x3f, r0	; 63
    1b8a:	cd bf       	out	0x3d, r28	; 61
    1b8c:	cf 91       	pop	r28
    1b8e:	df 91       	pop	r29
    1b90:	08 95       	ret

00001b92 <TwoLedsDivergingEvery250ms>:

void TwoLedsDivergingEvery250ms(){
    1b92:	df 93       	push	r29
    1b94:	cf 93       	push	r28
    1b96:	cd b7       	in	r28, 0x3d	; 61
    1b98:	de b7       	in	r29, 0x3e	; 62
    1b9a:	2f 97       	sbiw	r28, 0x0f	; 15
    1b9c:	0f b6       	in	r0, 0x3f	; 63
    1b9e:	f8 94       	cli
    1ba0:	de bf       	out	0x3e, r29	; 62
    1ba2:	0f be       	out	0x3f, r0	; 63
    1ba4:	cd bf       	out	0x3d, r28	; 61
	for(u8 i=0;i<4;i++)
    1ba6:	1f 86       	std	Y+15, r1	; 0x0f
    1ba8:	c7 c0       	rjmp	.+398    	; 0x1d38 <TwoLedsDivergingEvery250ms+0x1a6>
	{
		LED_voidOn(Leds[3-i]);
    1baa:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bac:	28 2f       	mov	r18, r24
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	83 e0       	ldi	r24, 0x03	; 3
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	ac 01       	movw	r20, r24
    1bb6:	42 1b       	sub	r20, r18
    1bb8:	53 0b       	sbc	r21, r19
    1bba:	9a 01       	movw	r18, r20
    1bbc:	c9 01       	movw	r24, r18
    1bbe:	88 0f       	add	r24, r24
    1bc0:	99 1f       	adc	r25, r25
    1bc2:	82 0f       	add	r24, r18
    1bc4:	93 1f       	adc	r25, r19
    1bc6:	fc 01       	movw	r30, r24
    1bc8:	e8 59       	subi	r30, 0x98	; 152
    1bca:	ff 4f       	sbci	r31, 0xFF	; 255
    1bcc:	60 81       	ld	r22, Z
    1bce:	71 81       	ldd	r23, Z+1	; 0x01
    1bd0:	82 81       	ldd	r24, Z+2	; 0x02
    1bd2:	0e 94 b0 05 	call	0xb60	; 0xb60 <LED_voidOn>
		LED_voidOn(Leds[4+i]);
    1bd6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bd8:	88 2f       	mov	r24, r24
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	9c 01       	movw	r18, r24
    1bde:	2c 5f       	subi	r18, 0xFC	; 252
    1be0:	3f 4f       	sbci	r19, 0xFF	; 255
    1be2:	c9 01       	movw	r24, r18
    1be4:	88 0f       	add	r24, r24
    1be6:	99 1f       	adc	r25, r25
    1be8:	82 0f       	add	r24, r18
    1bea:	93 1f       	adc	r25, r19
    1bec:	fc 01       	movw	r30, r24
    1bee:	e8 59       	subi	r30, 0x98	; 152
    1bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf2:	60 81       	ld	r22, Z
    1bf4:	71 81       	ldd	r23, Z+1	; 0x01
    1bf6:	82 81       	ldd	r24, Z+2	; 0x02
    1bf8:	0e 94 b0 05 	call	0xb60	; 0xb60 <LED_voidOn>
    1bfc:	80 e0       	ldi	r24, 0x00	; 0
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	aa e7       	ldi	r26, 0x7A	; 122
    1c02:	b3 e4       	ldi	r27, 0x43	; 67
    1c04:	8b 87       	std	Y+11, r24	; 0x0b
    1c06:	9c 87       	std	Y+12, r25	; 0x0c
    1c08:	ad 87       	std	Y+13, r26	; 0x0d
    1c0a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c10:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c12:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	4a e7       	ldi	r20, 0x7A	; 122
    1c1a:	53 e4       	ldi	r21, 0x43	; 67
    1c1c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c20:	dc 01       	movw	r26, r24
    1c22:	cb 01       	movw	r24, r22
    1c24:	8f 83       	std	Y+7, r24	; 0x07
    1c26:	98 87       	std	Y+8, r25	; 0x08
    1c28:	a9 87       	std	Y+9, r26	; 0x09
    1c2a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c2e:	78 85       	ldd	r23, Y+8	; 0x08
    1c30:	89 85       	ldd	r24, Y+9	; 0x09
    1c32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c34:	20 e0       	ldi	r18, 0x00	; 0
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	40 e8       	ldi	r20, 0x80	; 128
    1c3a:	5f e3       	ldi	r21, 0x3F	; 63
    1c3c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c40:	88 23       	and	r24, r24
    1c42:	2c f4       	brge	.+10     	; 0x1c4e <TwoLedsDivergingEvery250ms+0xbc>
		__ticks = 1;
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	9e 83       	std	Y+6, r25	; 0x06
    1c4a:	8d 83       	std	Y+5, r24	; 0x05
    1c4c:	3f c0       	rjmp	.+126    	; 0x1ccc <TwoLedsDivergingEvery250ms+0x13a>
	else if (__tmp > 65535)
    1c4e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c50:	78 85       	ldd	r23, Y+8	; 0x08
    1c52:	89 85       	ldd	r24, Y+9	; 0x09
    1c54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c56:	20 e0       	ldi	r18, 0x00	; 0
    1c58:	3f ef       	ldi	r19, 0xFF	; 255
    1c5a:	4f e7       	ldi	r20, 0x7F	; 127
    1c5c:	57 e4       	ldi	r21, 0x47	; 71
    1c5e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c62:	18 16       	cp	r1, r24
    1c64:	4c f5       	brge	.+82     	; 0x1cb8 <TwoLedsDivergingEvery250ms+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c66:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c68:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c6e:	20 e0       	ldi	r18, 0x00	; 0
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	40 e2       	ldi	r20, 0x20	; 32
    1c74:	51 e4       	ldi	r21, 0x41	; 65
    1c76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	bc 01       	movw	r22, r24
    1c80:	cd 01       	movw	r24, r26
    1c82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c86:	dc 01       	movw	r26, r24
    1c88:	cb 01       	movw	r24, r22
    1c8a:	9e 83       	std	Y+6, r25	; 0x06
    1c8c:	8d 83       	std	Y+5, r24	; 0x05
    1c8e:	0f c0       	rjmp	.+30     	; 0x1cae <TwoLedsDivergingEvery250ms+0x11c>
    1c90:	89 e1       	ldi	r24, 0x19	; 25
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	9c 83       	std	Y+4, r25	; 0x04
    1c96:	8b 83       	std	Y+3, r24	; 0x03
    1c98:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c9c:	01 97       	sbiw	r24, 0x01	; 1
    1c9e:	f1 f7       	brne	.-4      	; 0x1c9c <TwoLedsDivergingEvery250ms+0x10a>
    1ca0:	9c 83       	std	Y+4, r25	; 0x04
    1ca2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ca4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca8:	01 97       	sbiw	r24, 0x01	; 1
    1caa:	9e 83       	std	Y+6, r25	; 0x06
    1cac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cae:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb0:	9e 81       	ldd	r25, Y+6	; 0x06
    1cb2:	00 97       	sbiw	r24, 0x00	; 0
    1cb4:	69 f7       	brne	.-38     	; 0x1c90 <TwoLedsDivergingEvery250ms+0xfe>
    1cb6:	14 c0       	rjmp	.+40     	; 0x1ce0 <TwoLedsDivergingEvery250ms+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cb8:	6f 81       	ldd	r22, Y+7	; 0x07
    1cba:	78 85       	ldd	r23, Y+8	; 0x08
    1cbc:	89 85       	ldd	r24, Y+9	; 0x09
    1cbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cc0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cc4:	dc 01       	movw	r26, r24
    1cc6:	cb 01       	movw	r24, r22
    1cc8:	9e 83       	std	Y+6, r25	; 0x06
    1cca:	8d 83       	std	Y+5, r24	; 0x05
    1ccc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cce:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd0:	9a 83       	std	Y+2, r25	; 0x02
    1cd2:	89 83       	std	Y+1, r24	; 0x01
    1cd4:	89 81       	ldd	r24, Y+1	; 0x01
    1cd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd8:	01 97       	sbiw	r24, 0x01	; 1
    1cda:	f1 f7       	brne	.-4      	; 0x1cd8 <TwoLedsDivergingEvery250ms+0x146>
    1cdc:	9a 83       	std	Y+2, r25	; 0x02
    1cde:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);
		LED_voidOff(Leds[3-i]);
    1ce0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ce2:	28 2f       	mov	r18, r24
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	83 e0       	ldi	r24, 0x03	; 3
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	ac 01       	movw	r20, r24
    1cec:	42 1b       	sub	r20, r18
    1cee:	53 0b       	sbc	r21, r19
    1cf0:	9a 01       	movw	r18, r20
    1cf2:	c9 01       	movw	r24, r18
    1cf4:	88 0f       	add	r24, r24
    1cf6:	99 1f       	adc	r25, r25
    1cf8:	82 0f       	add	r24, r18
    1cfa:	93 1f       	adc	r25, r19
    1cfc:	fc 01       	movw	r30, r24
    1cfe:	e8 59       	subi	r30, 0x98	; 152
    1d00:	ff 4f       	sbci	r31, 0xFF	; 255
    1d02:	60 81       	ld	r22, Z
    1d04:	71 81       	ldd	r23, Z+1	; 0x01
    1d06:	82 81       	ldd	r24, Z+2	; 0x02
    1d08:	0e 94 d2 05 	call	0xba4	; 0xba4 <LED_voidOff>
		LED_voidOff(Leds[4+i]);
    1d0c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d0e:	88 2f       	mov	r24, r24
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	9c 01       	movw	r18, r24
    1d14:	2c 5f       	subi	r18, 0xFC	; 252
    1d16:	3f 4f       	sbci	r19, 0xFF	; 255
    1d18:	c9 01       	movw	r24, r18
    1d1a:	88 0f       	add	r24, r24
    1d1c:	99 1f       	adc	r25, r25
    1d1e:	82 0f       	add	r24, r18
    1d20:	93 1f       	adc	r25, r19
    1d22:	fc 01       	movw	r30, r24
    1d24:	e8 59       	subi	r30, 0x98	; 152
    1d26:	ff 4f       	sbci	r31, 0xFF	; 255
    1d28:	60 81       	ld	r22, Z
    1d2a:	71 81       	ldd	r23, Z+1	; 0x01
    1d2c:	82 81       	ldd	r24, Z+2	; 0x02
    1d2e:	0e 94 d2 05 	call	0xba4	; 0xba4 <LED_voidOff>
		LED_voidOff(Leds[7-i]);
	}
}

void TwoLedsDivergingEvery250ms(){
	for(u8 i=0;i<4;i++)
    1d32:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d34:	8f 5f       	subi	r24, 0xFF	; 255
    1d36:	8f 87       	std	Y+15, r24	; 0x0f
    1d38:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d3a:	84 30       	cpi	r24, 0x04	; 4
    1d3c:	08 f4       	brcc	.+2      	; 0x1d40 <TwoLedsDivergingEvery250ms+0x1ae>
    1d3e:	35 cf       	rjmp	.-406    	; 0x1baa <TwoLedsDivergingEvery250ms+0x18>
		LED_voidOn(Leds[4+i]);
		_delay_ms(250);
		LED_voidOff(Leds[3-i]);
		LED_voidOff(Leds[4+i]);
	}
}
    1d40:	2f 96       	adiw	r28, 0x0f	; 15
    1d42:	0f b6       	in	r0, 0x3f	; 63
    1d44:	f8 94       	cli
    1d46:	de bf       	out	0x3e, r29	; 62
    1d48:	0f be       	out	0x3f, r0	; 63
    1d4a:	cd bf       	out	0x3d, r28	; 61
    1d4c:	cf 91       	pop	r28
    1d4e:	df 91       	pop	r29
    1d50:	08 95       	ret

00001d52 <PingPongEffectEvery250ms>:

void PingPongEffectEvery250ms(){
    1d52:	df 93       	push	r29
    1d54:	cf 93       	push	r28
    1d56:	cd b7       	in	r28, 0x3d	; 61
    1d58:	de b7       	in	r29, 0x3e	; 62
    1d5a:	ac 97       	sbiw	r28, 0x2c	; 44
    1d5c:	0f b6       	in	r0, 0x3f	; 63
    1d5e:	f8 94       	cli
    1d60:	de bf       	out	0x3e, r29	; 62
    1d62:	0f be       	out	0x3f, r0	; 63
    1d64:	cd bf       	out	0x3d, r28	; 61
	for(u8 i=0;i<8;i++)
    1d66:	1c a6       	std	Y+44, r1	; 0x2c
    1d68:	95 c0       	rjmp	.+298    	; 0x1e94 <PingPongEffectEvery250ms+0x142>
	{
		LED_voidOn(Leds[i]);
    1d6a:	8c a5       	ldd	r24, Y+44	; 0x2c
    1d6c:	28 2f       	mov	r18, r24
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	c9 01       	movw	r24, r18
    1d72:	88 0f       	add	r24, r24
    1d74:	99 1f       	adc	r25, r25
    1d76:	82 0f       	add	r24, r18
    1d78:	93 1f       	adc	r25, r19
    1d7a:	fc 01       	movw	r30, r24
    1d7c:	e8 59       	subi	r30, 0x98	; 152
    1d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d80:	60 81       	ld	r22, Z
    1d82:	71 81       	ldd	r23, Z+1	; 0x01
    1d84:	82 81       	ldd	r24, Z+2	; 0x02
    1d86:	0e 94 b0 05 	call	0xb60	; 0xb60 <LED_voidOn>
    1d8a:	80 e0       	ldi	r24, 0x00	; 0
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	a8 ec       	ldi	r26, 0xC8	; 200
    1d90:	b2 e4       	ldi	r27, 0x42	; 66
    1d92:	8f a3       	std	Y+39, r24	; 0x27
    1d94:	98 a7       	std	Y+40, r25	; 0x28
    1d96:	a9 a7       	std	Y+41, r26	; 0x29
    1d98:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d9a:	6f a1       	ldd	r22, Y+39	; 0x27
    1d9c:	78 a5       	ldd	r23, Y+40	; 0x28
    1d9e:	89 a5       	ldd	r24, Y+41	; 0x29
    1da0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	4a e7       	ldi	r20, 0x7A	; 122
    1da8:	53 e4       	ldi	r21, 0x43	; 67
    1daa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dae:	dc 01       	movw	r26, r24
    1db0:	cb 01       	movw	r24, r22
    1db2:	8b a3       	std	Y+35, r24	; 0x23
    1db4:	9c a3       	std	Y+36, r25	; 0x24
    1db6:	ad a3       	std	Y+37, r26	; 0x25
    1db8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1dba:	6b a1       	ldd	r22, Y+35	; 0x23
    1dbc:	7c a1       	ldd	r23, Y+36	; 0x24
    1dbe:	8d a1       	ldd	r24, Y+37	; 0x25
    1dc0:	9e a1       	ldd	r25, Y+38	; 0x26
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	40 e8       	ldi	r20, 0x80	; 128
    1dc8:	5f e3       	ldi	r21, 0x3F	; 63
    1dca:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1dce:	88 23       	and	r24, r24
    1dd0:	2c f4       	brge	.+10     	; 0x1ddc <PingPongEffectEvery250ms+0x8a>
		__ticks = 1;
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	9a a3       	std	Y+34, r25	; 0x22
    1dd8:	89 a3       	std	Y+33, r24	; 0x21
    1dda:	3f c0       	rjmp	.+126    	; 0x1e5a <PingPongEffectEvery250ms+0x108>
	else if (__tmp > 65535)
    1ddc:	6b a1       	ldd	r22, Y+35	; 0x23
    1dde:	7c a1       	ldd	r23, Y+36	; 0x24
    1de0:	8d a1       	ldd	r24, Y+37	; 0x25
    1de2:	9e a1       	ldd	r25, Y+38	; 0x26
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	3f ef       	ldi	r19, 0xFF	; 255
    1de8:	4f e7       	ldi	r20, 0x7F	; 127
    1dea:	57 e4       	ldi	r21, 0x47	; 71
    1dec:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1df0:	18 16       	cp	r1, r24
    1df2:	4c f5       	brge	.+82     	; 0x1e46 <PingPongEffectEvery250ms+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1df4:	6f a1       	ldd	r22, Y+39	; 0x27
    1df6:	78 a5       	ldd	r23, Y+40	; 0x28
    1df8:	89 a5       	ldd	r24, Y+41	; 0x29
    1dfa:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	40 e2       	ldi	r20, 0x20	; 32
    1e02:	51 e4       	ldi	r21, 0x41	; 65
    1e04:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e08:	dc 01       	movw	r26, r24
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	bc 01       	movw	r22, r24
    1e0e:	cd 01       	movw	r24, r26
    1e10:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e14:	dc 01       	movw	r26, r24
    1e16:	cb 01       	movw	r24, r22
    1e18:	9a a3       	std	Y+34, r25	; 0x22
    1e1a:	89 a3       	std	Y+33, r24	; 0x21
    1e1c:	0f c0       	rjmp	.+30     	; 0x1e3c <PingPongEffectEvery250ms+0xea>
    1e1e:	89 e1       	ldi	r24, 0x19	; 25
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	98 a3       	std	Y+32, r25	; 0x20
    1e24:	8f 8f       	std	Y+31, r24	; 0x1f
    1e26:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e28:	98 a1       	ldd	r25, Y+32	; 0x20
    1e2a:	01 97       	sbiw	r24, 0x01	; 1
    1e2c:	f1 f7       	brne	.-4      	; 0x1e2a <PingPongEffectEvery250ms+0xd8>
    1e2e:	98 a3       	std	Y+32, r25	; 0x20
    1e30:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e32:	89 a1       	ldd	r24, Y+33	; 0x21
    1e34:	9a a1       	ldd	r25, Y+34	; 0x22
    1e36:	01 97       	sbiw	r24, 0x01	; 1
    1e38:	9a a3       	std	Y+34, r25	; 0x22
    1e3a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e3c:	89 a1       	ldd	r24, Y+33	; 0x21
    1e3e:	9a a1       	ldd	r25, Y+34	; 0x22
    1e40:	00 97       	sbiw	r24, 0x00	; 0
    1e42:	69 f7       	brne	.-38     	; 0x1e1e <PingPongEffectEvery250ms+0xcc>
    1e44:	14 c0       	rjmp	.+40     	; 0x1e6e <PingPongEffectEvery250ms+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e46:	6b a1       	ldd	r22, Y+35	; 0x23
    1e48:	7c a1       	ldd	r23, Y+36	; 0x24
    1e4a:	8d a1       	ldd	r24, Y+37	; 0x25
    1e4c:	9e a1       	ldd	r25, Y+38	; 0x26
    1e4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e52:	dc 01       	movw	r26, r24
    1e54:	cb 01       	movw	r24, r22
    1e56:	9a a3       	std	Y+34, r25	; 0x22
    1e58:	89 a3       	std	Y+33, r24	; 0x21
    1e5a:	89 a1       	ldd	r24, Y+33	; 0x21
    1e5c:	9a a1       	ldd	r25, Y+34	; 0x22
    1e5e:	9e 8f       	std	Y+30, r25	; 0x1e
    1e60:	8d 8f       	std	Y+29, r24	; 0x1d
    1e62:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e64:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e66:	01 97       	sbiw	r24, 0x01	; 1
    1e68:	f1 f7       	brne	.-4      	; 0x1e66 <PingPongEffectEvery250ms+0x114>
    1e6a:	9e 8f       	std	Y+30, r25	; 0x1e
    1e6c:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(100);
		LED_voidOff(Leds[i]);
    1e6e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1e70:	28 2f       	mov	r18, r24
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	c9 01       	movw	r24, r18
    1e76:	88 0f       	add	r24, r24
    1e78:	99 1f       	adc	r25, r25
    1e7a:	82 0f       	add	r24, r18
    1e7c:	93 1f       	adc	r25, r19
    1e7e:	fc 01       	movw	r30, r24
    1e80:	e8 59       	subi	r30, 0x98	; 152
    1e82:	ff 4f       	sbci	r31, 0xFF	; 255
    1e84:	60 81       	ld	r22, Z
    1e86:	71 81       	ldd	r23, Z+1	; 0x01
    1e88:	82 81       	ldd	r24, Z+2	; 0x02
    1e8a:	0e 94 d2 05 	call	0xba4	; 0xba4 <LED_voidOff>
		LED_voidOff(Leds[4+i]);
	}
}

void PingPongEffectEvery250ms(){
	for(u8 i=0;i<8;i++)
    1e8e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1e90:	8f 5f       	subi	r24, 0xFF	; 255
    1e92:	8c a7       	std	Y+44, r24	; 0x2c
    1e94:	8c a5       	ldd	r24, Y+44	; 0x2c
    1e96:	88 30       	cpi	r24, 0x08	; 8
    1e98:	08 f4       	brcc	.+2      	; 0x1e9c <PingPongEffectEvery250ms+0x14a>
    1e9a:	67 cf       	rjmp	.-306    	; 0x1d6a <PingPongEffectEvery250ms+0x18>
	{
		LED_voidOn(Leds[i]);
		_delay_ms(100);
		LED_voidOff(Leds[i]);
	}
	for(u8 i=0;i<8;i++)
    1e9c:	1b a6       	std	Y+43, r1	; 0x2b
    1e9e:	a1 c0       	rjmp	.+322    	; 0x1fe2 <PingPongEffectEvery250ms+0x290>
		{
			LED_voidOn     (Leds[7 - i]);
    1ea0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ea2:	28 2f       	mov	r18, r24
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	87 e0       	ldi	r24, 0x07	; 7
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	ac 01       	movw	r20, r24
    1eac:	42 1b       	sub	r20, r18
    1eae:	53 0b       	sbc	r21, r19
    1eb0:	9a 01       	movw	r18, r20
    1eb2:	c9 01       	movw	r24, r18
    1eb4:	88 0f       	add	r24, r24
    1eb6:	99 1f       	adc	r25, r25
    1eb8:	82 0f       	add	r24, r18
    1eba:	93 1f       	adc	r25, r19
    1ebc:	fc 01       	movw	r30, r24
    1ebe:	e8 59       	subi	r30, 0x98	; 152
    1ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec2:	60 81       	ld	r22, Z
    1ec4:	71 81       	ldd	r23, Z+1	; 0x01
    1ec6:	82 81       	ldd	r24, Z+2	; 0x02
    1ec8:	0e 94 b0 05 	call	0xb60	; 0xb60 <LED_voidOn>
    1ecc:	80 e0       	ldi	r24, 0x00	; 0
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	a8 ec       	ldi	r26, 0xC8	; 200
    1ed2:	b2 e4       	ldi	r27, 0x42	; 66
    1ed4:	89 8f       	std	Y+25, r24	; 0x19
    1ed6:	9a 8f       	std	Y+26, r25	; 0x1a
    1ed8:	ab 8f       	std	Y+27, r26	; 0x1b
    1eda:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1edc:	69 8d       	ldd	r22, Y+25	; 0x19
    1ede:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ee0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ee2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	4a e7       	ldi	r20, 0x7A	; 122
    1eea:	53 e4       	ldi	r21, 0x43	; 67
    1eec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	8d 8b       	std	Y+21, r24	; 0x15
    1ef6:	9e 8b       	std	Y+22, r25	; 0x16
    1ef8:	af 8b       	std	Y+23, r26	; 0x17
    1efa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1efc:	6d 89       	ldd	r22, Y+21	; 0x15
    1efe:	7e 89       	ldd	r23, Y+22	; 0x16
    1f00:	8f 89       	ldd	r24, Y+23	; 0x17
    1f02:	98 8d       	ldd	r25, Y+24	; 0x18
    1f04:	20 e0       	ldi	r18, 0x00	; 0
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	40 e8       	ldi	r20, 0x80	; 128
    1f0a:	5f e3       	ldi	r21, 0x3F	; 63
    1f0c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f10:	88 23       	and	r24, r24
    1f12:	2c f4       	brge	.+10     	; 0x1f1e <PingPongEffectEvery250ms+0x1cc>
		__ticks = 1;
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	9c 8b       	std	Y+20, r25	; 0x14
    1f1a:	8b 8b       	std	Y+19, r24	; 0x13
    1f1c:	3f c0       	rjmp	.+126    	; 0x1f9c <PingPongEffectEvery250ms+0x24a>
	else if (__tmp > 65535)
    1f1e:	6d 89       	ldd	r22, Y+21	; 0x15
    1f20:	7e 89       	ldd	r23, Y+22	; 0x16
    1f22:	8f 89       	ldd	r24, Y+23	; 0x17
    1f24:	98 8d       	ldd	r25, Y+24	; 0x18
    1f26:	20 e0       	ldi	r18, 0x00	; 0
    1f28:	3f ef       	ldi	r19, 0xFF	; 255
    1f2a:	4f e7       	ldi	r20, 0x7F	; 127
    1f2c:	57 e4       	ldi	r21, 0x47	; 71
    1f2e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f32:	18 16       	cp	r1, r24
    1f34:	4c f5       	brge	.+82     	; 0x1f88 <PingPongEffectEvery250ms+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f36:	69 8d       	ldd	r22, Y+25	; 0x19
    1f38:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	40 e2       	ldi	r20, 0x20	; 32
    1f44:	51 e4       	ldi	r21, 0x41	; 65
    1f46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f4a:	dc 01       	movw	r26, r24
    1f4c:	cb 01       	movw	r24, r22
    1f4e:	bc 01       	movw	r22, r24
    1f50:	cd 01       	movw	r24, r26
    1f52:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f56:	dc 01       	movw	r26, r24
    1f58:	cb 01       	movw	r24, r22
    1f5a:	9c 8b       	std	Y+20, r25	; 0x14
    1f5c:	8b 8b       	std	Y+19, r24	; 0x13
    1f5e:	0f c0       	rjmp	.+30     	; 0x1f7e <PingPongEffectEvery250ms+0x22c>
    1f60:	89 e1       	ldi	r24, 0x19	; 25
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	9a 8b       	std	Y+18, r25	; 0x12
    1f66:	89 8b       	std	Y+17, r24	; 0x11
    1f68:	89 89       	ldd	r24, Y+17	; 0x11
    1f6a:	9a 89       	ldd	r25, Y+18	; 0x12
    1f6c:	01 97       	sbiw	r24, 0x01	; 1
    1f6e:	f1 f7       	brne	.-4      	; 0x1f6c <PingPongEffectEvery250ms+0x21a>
    1f70:	9a 8b       	std	Y+18, r25	; 0x12
    1f72:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f74:	8b 89       	ldd	r24, Y+19	; 0x13
    1f76:	9c 89       	ldd	r25, Y+20	; 0x14
    1f78:	01 97       	sbiw	r24, 0x01	; 1
    1f7a:	9c 8b       	std	Y+20, r25	; 0x14
    1f7c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f80:	9c 89       	ldd	r25, Y+20	; 0x14
    1f82:	00 97       	sbiw	r24, 0x00	; 0
    1f84:	69 f7       	brne	.-38     	; 0x1f60 <PingPongEffectEvery250ms+0x20e>
    1f86:	14 c0       	rjmp	.+40     	; 0x1fb0 <PingPongEffectEvery250ms+0x25e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f88:	6d 89       	ldd	r22, Y+21	; 0x15
    1f8a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f8c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f8e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f90:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	9c 8b       	std	Y+20, r25	; 0x14
    1f9a:	8b 8b       	std	Y+19, r24	; 0x13
    1f9c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f9e:	9c 89       	ldd	r25, Y+20	; 0x14
    1fa0:	98 8b       	std	Y+16, r25	; 0x10
    1fa2:	8f 87       	std	Y+15, r24	; 0x0f
    1fa4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fa6:	98 89       	ldd	r25, Y+16	; 0x10
    1fa8:	01 97       	sbiw	r24, 0x01	; 1
    1faa:	f1 f7       	brne	.-4      	; 0x1fa8 <PingPongEffectEvery250ms+0x256>
    1fac:	98 8b       	std	Y+16, r25	; 0x10
    1fae:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(100);
			LED_voidOff     (Leds[7 - i]);
    1fb0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fb2:	28 2f       	mov	r18, r24
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	87 e0       	ldi	r24, 0x07	; 7
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	ac 01       	movw	r20, r24
    1fbc:	42 1b       	sub	r20, r18
    1fbe:	53 0b       	sbc	r21, r19
    1fc0:	9a 01       	movw	r18, r20
    1fc2:	c9 01       	movw	r24, r18
    1fc4:	88 0f       	add	r24, r24
    1fc6:	99 1f       	adc	r25, r25
    1fc8:	82 0f       	add	r24, r18
    1fca:	93 1f       	adc	r25, r19
    1fcc:	fc 01       	movw	r30, r24
    1fce:	e8 59       	subi	r30, 0x98	; 152
    1fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd2:	60 81       	ld	r22, Z
    1fd4:	71 81       	ldd	r23, Z+1	; 0x01
    1fd6:	82 81       	ldd	r24, Z+2	; 0x02
    1fd8:	0e 94 d2 05 	call	0xba4	; 0xba4 <LED_voidOff>
	{
		LED_voidOn(Leds[i]);
		_delay_ms(100);
		LED_voidOff(Leds[i]);
	}
	for(u8 i=0;i<8;i++)
    1fdc:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fde:	8f 5f       	subi	r24, 0xFF	; 255
    1fe0:	8b a7       	std	Y+43, r24	; 0x2b
    1fe2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fe4:	88 30       	cpi	r24, 0x08	; 8
    1fe6:	08 f4       	brcc	.+2      	; 0x1fea <PingPongEffectEvery250ms+0x298>
    1fe8:	5b cf       	rjmp	.-330    	; 0x1ea0 <PingPongEffectEvery250ms+0x14e>
    1fea:	80 e0       	ldi	r24, 0x00	; 0
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	aa e7       	ldi	r26, 0x7A	; 122
    1ff0:	b3 e4       	ldi	r27, 0x43	; 67
    1ff2:	8b 87       	std	Y+11, r24	; 0x0b
    1ff4:	9c 87       	std	Y+12, r25	; 0x0c
    1ff6:	ad 87       	std	Y+13, r26	; 0x0d
    1ff8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ffa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ffc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ffe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2000:	9e 85       	ldd	r25, Y+14	; 0x0e
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	4a e7       	ldi	r20, 0x7A	; 122
    2008:	53 e4       	ldi	r21, 0x43	; 67
    200a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    200e:	dc 01       	movw	r26, r24
    2010:	cb 01       	movw	r24, r22
    2012:	8f 83       	std	Y+7, r24	; 0x07
    2014:	98 87       	std	Y+8, r25	; 0x08
    2016:	a9 87       	std	Y+9, r26	; 0x09
    2018:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    201a:	6f 81       	ldd	r22, Y+7	; 0x07
    201c:	78 85       	ldd	r23, Y+8	; 0x08
    201e:	89 85       	ldd	r24, Y+9	; 0x09
    2020:	9a 85       	ldd	r25, Y+10	; 0x0a
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	40 e8       	ldi	r20, 0x80	; 128
    2028:	5f e3       	ldi	r21, 0x3F	; 63
    202a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    202e:	88 23       	and	r24, r24
    2030:	2c f4       	brge	.+10     	; 0x203c <PingPongEffectEvery250ms+0x2ea>
		__ticks = 1;
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	9e 83       	std	Y+6, r25	; 0x06
    2038:	8d 83       	std	Y+5, r24	; 0x05
    203a:	3f c0       	rjmp	.+126    	; 0x20ba <PingPongEffectEvery250ms+0x368>
	else if (__tmp > 65535)
    203c:	6f 81       	ldd	r22, Y+7	; 0x07
    203e:	78 85       	ldd	r23, Y+8	; 0x08
    2040:	89 85       	ldd	r24, Y+9	; 0x09
    2042:	9a 85       	ldd	r25, Y+10	; 0x0a
    2044:	20 e0       	ldi	r18, 0x00	; 0
    2046:	3f ef       	ldi	r19, 0xFF	; 255
    2048:	4f e7       	ldi	r20, 0x7F	; 127
    204a:	57 e4       	ldi	r21, 0x47	; 71
    204c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2050:	18 16       	cp	r1, r24
    2052:	4c f5       	brge	.+82     	; 0x20a6 <PingPongEffectEvery250ms+0x354>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2054:	6b 85       	ldd	r22, Y+11	; 0x0b
    2056:	7c 85       	ldd	r23, Y+12	; 0x0c
    2058:	8d 85       	ldd	r24, Y+13	; 0x0d
    205a:	9e 85       	ldd	r25, Y+14	; 0x0e
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	40 e2       	ldi	r20, 0x20	; 32
    2062:	51 e4       	ldi	r21, 0x41	; 65
    2064:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2068:	dc 01       	movw	r26, r24
    206a:	cb 01       	movw	r24, r22
    206c:	bc 01       	movw	r22, r24
    206e:	cd 01       	movw	r24, r26
    2070:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2074:	dc 01       	movw	r26, r24
    2076:	cb 01       	movw	r24, r22
    2078:	9e 83       	std	Y+6, r25	; 0x06
    207a:	8d 83       	std	Y+5, r24	; 0x05
    207c:	0f c0       	rjmp	.+30     	; 0x209c <PingPongEffectEvery250ms+0x34a>
    207e:	89 e1       	ldi	r24, 0x19	; 25
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	9c 83       	std	Y+4, r25	; 0x04
    2084:	8b 83       	std	Y+3, r24	; 0x03
    2086:	8b 81       	ldd	r24, Y+3	; 0x03
    2088:	9c 81       	ldd	r25, Y+4	; 0x04
    208a:	01 97       	sbiw	r24, 0x01	; 1
    208c:	f1 f7       	brne	.-4      	; 0x208a <PingPongEffectEvery250ms+0x338>
    208e:	9c 83       	std	Y+4, r25	; 0x04
    2090:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2092:	8d 81       	ldd	r24, Y+5	; 0x05
    2094:	9e 81       	ldd	r25, Y+6	; 0x06
    2096:	01 97       	sbiw	r24, 0x01	; 1
    2098:	9e 83       	std	Y+6, r25	; 0x06
    209a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    209c:	8d 81       	ldd	r24, Y+5	; 0x05
    209e:	9e 81       	ldd	r25, Y+6	; 0x06
    20a0:	00 97       	sbiw	r24, 0x00	; 0
    20a2:	69 f7       	brne	.-38     	; 0x207e <PingPongEffectEvery250ms+0x32c>
    20a4:	14 c0       	rjmp	.+40     	; 0x20ce <PingPongEffectEvery250ms+0x37c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a6:	6f 81       	ldd	r22, Y+7	; 0x07
    20a8:	78 85       	ldd	r23, Y+8	; 0x08
    20aa:	89 85       	ldd	r24, Y+9	; 0x09
    20ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20b2:	dc 01       	movw	r26, r24
    20b4:	cb 01       	movw	r24, r22
    20b6:	9e 83       	std	Y+6, r25	; 0x06
    20b8:	8d 83       	std	Y+5, r24	; 0x05
    20ba:	8d 81       	ldd	r24, Y+5	; 0x05
    20bc:	9e 81       	ldd	r25, Y+6	; 0x06
    20be:	9a 83       	std	Y+2, r25	; 0x02
    20c0:	89 83       	std	Y+1, r24	; 0x01
    20c2:	89 81       	ldd	r24, Y+1	; 0x01
    20c4:	9a 81       	ldd	r25, Y+2	; 0x02
    20c6:	01 97       	sbiw	r24, 0x01	; 1
    20c8:	f1 f7       	brne	.-4      	; 0x20c6 <PingPongEffectEvery250ms+0x374>
    20ca:	9a 83       	std	Y+2, r25	; 0x02
    20cc:	89 83       	std	Y+1, r24	; 0x01
			LED_voidOn     (Leds[7 - i]);
			_delay_ms(100);
			LED_voidOff     (Leds[7 - i]);
		}
	_delay_ms(250);
}
    20ce:	ac 96       	adiw	r28, 0x2c	; 44
    20d0:	0f b6       	in	r0, 0x3f	; 63
    20d2:	f8 94       	cli
    20d4:	de bf       	out	0x3e, r29	; 62
    20d6:	0f be       	out	0x3f, r0	; 63
    20d8:	cd bf       	out	0x3d, r28	; 61
    20da:	cf 91       	pop	r28
    20dc:	df 91       	pop	r29
    20de:	08 95       	ret

000020e0 <Incrementing_SnakeEffect_Every250>:


void Incrementing_SnakeEffect_Every250(){
    20e0:	df 93       	push	r29
    20e2:	cf 93       	push	r28
    20e4:	cd b7       	in	r28, 0x3d	; 61
    20e6:	de b7       	in	r29, 0x3e	; 62
    20e8:	6e 97       	sbiw	r28, 0x1e	; 30
    20ea:	0f b6       	in	r0, 0x3f	; 63
    20ec:	f8 94       	cli
    20ee:	de bf       	out	0x3e, r29	; 62
    20f0:	0f be       	out	0x3f, r0	; 63
    20f2:	cd bf       	out	0x3d, r28	; 61
	for(u8 i=0;i<8;i++)
    20f4:	1e 8e       	std	Y+30, r1	; 0x1e
    20f6:	85 c0       	rjmp	.+266    	; 0x2202 <Incrementing_SnakeEffect_Every250+0x122>
	{
		LED_voidOn(Leds[i]);
    20f8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20fa:	28 2f       	mov	r18, r24
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	c9 01       	movw	r24, r18
    2100:	88 0f       	add	r24, r24
    2102:	99 1f       	adc	r25, r25
    2104:	82 0f       	add	r24, r18
    2106:	93 1f       	adc	r25, r19
    2108:	fc 01       	movw	r30, r24
    210a:	e8 59       	subi	r30, 0x98	; 152
    210c:	ff 4f       	sbci	r31, 0xFF	; 255
    210e:	60 81       	ld	r22, Z
    2110:	71 81       	ldd	r23, Z+1	; 0x01
    2112:	82 81       	ldd	r24, Z+2	; 0x02
    2114:	0e 94 b0 05 	call	0xb60	; 0xb60 <LED_voidOn>
    2118:	80 e0       	ldi	r24, 0x00	; 0
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	aa e7       	ldi	r26, 0x7A	; 122
    211e:	b3 e4       	ldi	r27, 0x43	; 67
    2120:	89 8f       	std	Y+25, r24	; 0x19
    2122:	9a 8f       	std	Y+26, r25	; 0x1a
    2124:	ab 8f       	std	Y+27, r26	; 0x1b
    2126:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2128:	69 8d       	ldd	r22, Y+25	; 0x19
    212a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    212c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    212e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	4a e7       	ldi	r20, 0x7A	; 122
    2136:	53 e4       	ldi	r21, 0x43	; 67
    2138:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	8d 8b       	std	Y+21, r24	; 0x15
    2142:	9e 8b       	std	Y+22, r25	; 0x16
    2144:	af 8b       	std	Y+23, r26	; 0x17
    2146:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2148:	6d 89       	ldd	r22, Y+21	; 0x15
    214a:	7e 89       	ldd	r23, Y+22	; 0x16
    214c:	8f 89       	ldd	r24, Y+23	; 0x17
    214e:	98 8d       	ldd	r25, Y+24	; 0x18
    2150:	20 e0       	ldi	r18, 0x00	; 0
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	40 e8       	ldi	r20, 0x80	; 128
    2156:	5f e3       	ldi	r21, 0x3F	; 63
    2158:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    215c:	88 23       	and	r24, r24
    215e:	2c f4       	brge	.+10     	; 0x216a <Incrementing_SnakeEffect_Every250+0x8a>
		__ticks = 1;
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	9c 8b       	std	Y+20, r25	; 0x14
    2166:	8b 8b       	std	Y+19, r24	; 0x13
    2168:	3f c0       	rjmp	.+126    	; 0x21e8 <Incrementing_SnakeEffect_Every250+0x108>
	else if (__tmp > 65535)
    216a:	6d 89       	ldd	r22, Y+21	; 0x15
    216c:	7e 89       	ldd	r23, Y+22	; 0x16
    216e:	8f 89       	ldd	r24, Y+23	; 0x17
    2170:	98 8d       	ldd	r25, Y+24	; 0x18
    2172:	20 e0       	ldi	r18, 0x00	; 0
    2174:	3f ef       	ldi	r19, 0xFF	; 255
    2176:	4f e7       	ldi	r20, 0x7F	; 127
    2178:	57 e4       	ldi	r21, 0x47	; 71
    217a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    217e:	18 16       	cp	r1, r24
    2180:	4c f5       	brge	.+82     	; 0x21d4 <Incrementing_SnakeEffect_Every250+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2182:	69 8d       	ldd	r22, Y+25	; 0x19
    2184:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2186:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2188:	9c 8d       	ldd	r25, Y+28	; 0x1c
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	40 e2       	ldi	r20, 0x20	; 32
    2190:	51 e4       	ldi	r21, 0x41	; 65
    2192:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2196:	dc 01       	movw	r26, r24
    2198:	cb 01       	movw	r24, r22
    219a:	bc 01       	movw	r22, r24
    219c:	cd 01       	movw	r24, r26
    219e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21a2:	dc 01       	movw	r26, r24
    21a4:	cb 01       	movw	r24, r22
    21a6:	9c 8b       	std	Y+20, r25	; 0x14
    21a8:	8b 8b       	std	Y+19, r24	; 0x13
    21aa:	0f c0       	rjmp	.+30     	; 0x21ca <Incrementing_SnakeEffect_Every250+0xea>
    21ac:	89 e1       	ldi	r24, 0x19	; 25
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	9a 8b       	std	Y+18, r25	; 0x12
    21b2:	89 8b       	std	Y+17, r24	; 0x11
    21b4:	89 89       	ldd	r24, Y+17	; 0x11
    21b6:	9a 89       	ldd	r25, Y+18	; 0x12
    21b8:	01 97       	sbiw	r24, 0x01	; 1
    21ba:	f1 f7       	brne	.-4      	; 0x21b8 <Incrementing_SnakeEffect_Every250+0xd8>
    21bc:	9a 8b       	std	Y+18, r25	; 0x12
    21be:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21c0:	8b 89       	ldd	r24, Y+19	; 0x13
    21c2:	9c 89       	ldd	r25, Y+20	; 0x14
    21c4:	01 97       	sbiw	r24, 0x01	; 1
    21c6:	9c 8b       	std	Y+20, r25	; 0x14
    21c8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ca:	8b 89       	ldd	r24, Y+19	; 0x13
    21cc:	9c 89       	ldd	r25, Y+20	; 0x14
    21ce:	00 97       	sbiw	r24, 0x00	; 0
    21d0:	69 f7       	brne	.-38     	; 0x21ac <Incrementing_SnakeEffect_Every250+0xcc>
    21d2:	14 c0       	rjmp	.+40     	; 0x21fc <Incrementing_SnakeEffect_Every250+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21d4:	6d 89       	ldd	r22, Y+21	; 0x15
    21d6:	7e 89       	ldd	r23, Y+22	; 0x16
    21d8:	8f 89       	ldd	r24, Y+23	; 0x17
    21da:	98 8d       	ldd	r25, Y+24	; 0x18
    21dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21e0:	dc 01       	movw	r26, r24
    21e2:	cb 01       	movw	r24, r22
    21e4:	9c 8b       	std	Y+20, r25	; 0x14
    21e6:	8b 8b       	std	Y+19, r24	; 0x13
    21e8:	8b 89       	ldd	r24, Y+19	; 0x13
    21ea:	9c 89       	ldd	r25, Y+20	; 0x14
    21ec:	98 8b       	std	Y+16, r25	; 0x10
    21ee:	8f 87       	std	Y+15, r24	; 0x0f
    21f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    21f2:	98 89       	ldd	r25, Y+16	; 0x10
    21f4:	01 97       	sbiw	r24, 0x01	; 1
    21f6:	f1 f7       	brne	.-4      	; 0x21f4 <Incrementing_SnakeEffect_Every250+0x114>
    21f8:	98 8b       	std	Y+16, r25	; 0x10
    21fa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(250);
}


void Incrementing_SnakeEffect_Every250(){
	for(u8 i=0;i<8;i++)
    21fc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    21fe:	8f 5f       	subi	r24, 0xFF	; 255
    2200:	8e 8f       	std	Y+30, r24	; 0x1e
    2202:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2204:	88 30       	cpi	r24, 0x08	; 8
    2206:	08 f4       	brcc	.+2      	; 0x220a <Incrementing_SnakeEffect_Every250+0x12a>
    2208:	77 cf       	rjmp	.-274    	; 0x20f8 <Incrementing_SnakeEffect_Every250+0x18>
	{
		LED_voidOn(Leds[i]);
		_delay_ms(250);
	}
	for(u8 i=0;i<8;i++)
    220a:	1d 8e       	std	Y+29, r1	; 0x1d
    220c:	13 c0       	rjmp	.+38     	; 0x2234 <Incrementing_SnakeEffect_Every250+0x154>
	{
		LED_voidOff(Leds[i]);
    220e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2210:	28 2f       	mov	r18, r24
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	c9 01       	movw	r24, r18
    2216:	88 0f       	add	r24, r24
    2218:	99 1f       	adc	r25, r25
    221a:	82 0f       	add	r24, r18
    221c:	93 1f       	adc	r25, r19
    221e:	fc 01       	movw	r30, r24
    2220:	e8 59       	subi	r30, 0x98	; 152
    2222:	ff 4f       	sbci	r31, 0xFF	; 255
    2224:	60 81       	ld	r22, Z
    2226:	71 81       	ldd	r23, Z+1	; 0x01
    2228:	82 81       	ldd	r24, Z+2	; 0x02
    222a:	0e 94 d2 05 	call	0xba4	; 0xba4 <LED_voidOff>
	for(u8 i=0;i<8;i++)
	{
		LED_voidOn(Leds[i]);
		_delay_ms(250);
	}
	for(u8 i=0;i<8;i++)
    222e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2230:	8f 5f       	subi	r24, 0xFF	; 255
    2232:	8d 8f       	std	Y+29, r24	; 0x1d
    2234:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2236:	88 30       	cpi	r24, 0x08	; 8
    2238:	50 f3       	brcs	.-44     	; 0x220e <Incrementing_SnakeEffect_Every250+0x12e>
    223a:	80 e0       	ldi	r24, 0x00	; 0
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	aa e7       	ldi	r26, 0x7A	; 122
    2240:	b3 e4       	ldi	r27, 0x43	; 67
    2242:	8b 87       	std	Y+11, r24	; 0x0b
    2244:	9c 87       	std	Y+12, r25	; 0x0c
    2246:	ad 87       	std	Y+13, r26	; 0x0d
    2248:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    224a:	6b 85       	ldd	r22, Y+11	; 0x0b
    224c:	7c 85       	ldd	r23, Y+12	; 0x0c
    224e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2250:	9e 85       	ldd	r25, Y+14	; 0x0e
    2252:	20 e0       	ldi	r18, 0x00	; 0
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	4a e7       	ldi	r20, 0x7A	; 122
    2258:	53 e4       	ldi	r21, 0x43	; 67
    225a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    225e:	dc 01       	movw	r26, r24
    2260:	cb 01       	movw	r24, r22
    2262:	8f 83       	std	Y+7, r24	; 0x07
    2264:	98 87       	std	Y+8, r25	; 0x08
    2266:	a9 87       	std	Y+9, r26	; 0x09
    2268:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    226a:	6f 81       	ldd	r22, Y+7	; 0x07
    226c:	78 85       	ldd	r23, Y+8	; 0x08
    226e:	89 85       	ldd	r24, Y+9	; 0x09
    2270:	9a 85       	ldd	r25, Y+10	; 0x0a
    2272:	20 e0       	ldi	r18, 0x00	; 0
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	40 e8       	ldi	r20, 0x80	; 128
    2278:	5f e3       	ldi	r21, 0x3F	; 63
    227a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    227e:	88 23       	and	r24, r24
    2280:	2c f4       	brge	.+10     	; 0x228c <Incrementing_SnakeEffect_Every250+0x1ac>
		__ticks = 1;
    2282:	81 e0       	ldi	r24, 0x01	; 1
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	9e 83       	std	Y+6, r25	; 0x06
    2288:	8d 83       	std	Y+5, r24	; 0x05
    228a:	3f c0       	rjmp	.+126    	; 0x230a <Incrementing_SnakeEffect_Every250+0x22a>
	else if (__tmp > 65535)
    228c:	6f 81       	ldd	r22, Y+7	; 0x07
    228e:	78 85       	ldd	r23, Y+8	; 0x08
    2290:	89 85       	ldd	r24, Y+9	; 0x09
    2292:	9a 85       	ldd	r25, Y+10	; 0x0a
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	3f ef       	ldi	r19, 0xFF	; 255
    2298:	4f e7       	ldi	r20, 0x7F	; 127
    229a:	57 e4       	ldi	r21, 0x47	; 71
    229c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22a0:	18 16       	cp	r1, r24
    22a2:	4c f5       	brge	.+82     	; 0x22f6 <Incrementing_SnakeEffect_Every250+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    22a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    22a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	40 e2       	ldi	r20, 0x20	; 32
    22b2:	51 e4       	ldi	r21, 0x41	; 65
    22b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22b8:	dc 01       	movw	r26, r24
    22ba:	cb 01       	movw	r24, r22
    22bc:	bc 01       	movw	r22, r24
    22be:	cd 01       	movw	r24, r26
    22c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22c4:	dc 01       	movw	r26, r24
    22c6:	cb 01       	movw	r24, r22
    22c8:	9e 83       	std	Y+6, r25	; 0x06
    22ca:	8d 83       	std	Y+5, r24	; 0x05
    22cc:	0f c0       	rjmp	.+30     	; 0x22ec <Incrementing_SnakeEffect_Every250+0x20c>
    22ce:	89 e1       	ldi	r24, 0x19	; 25
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	9c 83       	std	Y+4, r25	; 0x04
    22d4:	8b 83       	std	Y+3, r24	; 0x03
    22d6:	8b 81       	ldd	r24, Y+3	; 0x03
    22d8:	9c 81       	ldd	r25, Y+4	; 0x04
    22da:	01 97       	sbiw	r24, 0x01	; 1
    22dc:	f1 f7       	brne	.-4      	; 0x22da <Incrementing_SnakeEffect_Every250+0x1fa>
    22de:	9c 83       	std	Y+4, r25	; 0x04
    22e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e2:	8d 81       	ldd	r24, Y+5	; 0x05
    22e4:	9e 81       	ldd	r25, Y+6	; 0x06
    22e6:	01 97       	sbiw	r24, 0x01	; 1
    22e8:	9e 83       	std	Y+6, r25	; 0x06
    22ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ec:	8d 81       	ldd	r24, Y+5	; 0x05
    22ee:	9e 81       	ldd	r25, Y+6	; 0x06
    22f0:	00 97       	sbiw	r24, 0x00	; 0
    22f2:	69 f7       	brne	.-38     	; 0x22ce <Incrementing_SnakeEffect_Every250+0x1ee>
    22f4:	14 c0       	rjmp	.+40     	; 0x231e <Incrementing_SnakeEffect_Every250+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22f6:	6f 81       	ldd	r22, Y+7	; 0x07
    22f8:	78 85       	ldd	r23, Y+8	; 0x08
    22fa:	89 85       	ldd	r24, Y+9	; 0x09
    22fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    22fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2302:	dc 01       	movw	r26, r24
    2304:	cb 01       	movw	r24, r22
    2306:	9e 83       	std	Y+6, r25	; 0x06
    2308:	8d 83       	std	Y+5, r24	; 0x05
    230a:	8d 81       	ldd	r24, Y+5	; 0x05
    230c:	9e 81       	ldd	r25, Y+6	; 0x06
    230e:	9a 83       	std	Y+2, r25	; 0x02
    2310:	89 83       	std	Y+1, r24	; 0x01
    2312:	89 81       	ldd	r24, Y+1	; 0x01
    2314:	9a 81       	ldd	r25, Y+2	; 0x02
    2316:	01 97       	sbiw	r24, 0x01	; 1
    2318:	f1 f7       	brne	.-4      	; 0x2316 <Incrementing_SnakeEffect_Every250+0x236>
    231a:	9a 83       	std	Y+2, r25	; 0x02
    231c:	89 83       	std	Y+1, r24	; 0x01
	{
		LED_voidOff(Leds[i]);
	}
	_delay_ms(250);
}
    231e:	6e 96       	adiw	r28, 0x1e	; 30
    2320:	0f b6       	in	r0, 0x3f	; 63
    2322:	f8 94       	cli
    2324:	de bf       	out	0x3e, r29	; 62
    2326:	0f be       	out	0x3f, r0	; 63
    2328:	cd bf       	out	0x3d, r28	; 61
    232a:	cf 91       	pop	r28
    232c:	df 91       	pop	r29
    232e:	08 95       	ret

00002330 <TwoLedsConvergeDivergeEvery250ms>:
void TwoLedsConvergeDivergeEvery250ms () {
    2330:	df 93       	push	r29
    2332:	cf 93       	push	r28
    2334:	cd b7       	in	r28, 0x3d	; 61
    2336:	de b7       	in	r29, 0x3e	; 62
    2338:	ac 97       	sbiw	r28, 0x2c	; 44
    233a:	0f b6       	in	r0, 0x3f	; 63
    233c:	f8 94       	cli
    233e:	de bf       	out	0x3e, r29	; 62
    2340:	0f be       	out	0x3f, r0	; 63
    2342:	cd bf       	out	0x3d, r28	; 61
	for(u8 i=0;i<4;i++)
    2344:	1c a6       	std	Y+44, r1	; 0x2c
    2346:	c1 c0       	rjmp	.+386    	; 0x24ca <TwoLedsConvergeDivergeEvery250ms+0x19a>
		{
			LED_voidOn(Leds[i]);
    2348:	8c a5       	ldd	r24, Y+44	; 0x2c
    234a:	28 2f       	mov	r18, r24
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	c9 01       	movw	r24, r18
    2350:	88 0f       	add	r24, r24
    2352:	99 1f       	adc	r25, r25
    2354:	82 0f       	add	r24, r18
    2356:	93 1f       	adc	r25, r19
    2358:	fc 01       	movw	r30, r24
    235a:	e8 59       	subi	r30, 0x98	; 152
    235c:	ff 4f       	sbci	r31, 0xFF	; 255
    235e:	60 81       	ld	r22, Z
    2360:	71 81       	ldd	r23, Z+1	; 0x01
    2362:	82 81       	ldd	r24, Z+2	; 0x02
    2364:	0e 94 b0 05 	call	0xb60	; 0xb60 <LED_voidOn>
			LED_voidOn(Leds[7-i]);
    2368:	8c a5       	ldd	r24, Y+44	; 0x2c
    236a:	28 2f       	mov	r18, r24
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	87 e0       	ldi	r24, 0x07	; 7
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	ac 01       	movw	r20, r24
    2374:	42 1b       	sub	r20, r18
    2376:	53 0b       	sbc	r21, r19
    2378:	9a 01       	movw	r18, r20
    237a:	c9 01       	movw	r24, r18
    237c:	88 0f       	add	r24, r24
    237e:	99 1f       	adc	r25, r25
    2380:	82 0f       	add	r24, r18
    2382:	93 1f       	adc	r25, r19
    2384:	fc 01       	movw	r30, r24
    2386:	e8 59       	subi	r30, 0x98	; 152
    2388:	ff 4f       	sbci	r31, 0xFF	; 255
    238a:	60 81       	ld	r22, Z
    238c:	71 81       	ldd	r23, Z+1	; 0x01
    238e:	82 81       	ldd	r24, Z+2	; 0x02
    2390:	0e 94 b0 05 	call	0xb60	; 0xb60 <LED_voidOn>
    2394:	80 e0       	ldi	r24, 0x00	; 0
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	aa e7       	ldi	r26, 0x7A	; 122
    239a:	b3 e4       	ldi	r27, 0x43	; 67
    239c:	8f a3       	std	Y+39, r24	; 0x27
    239e:	98 a7       	std	Y+40, r25	; 0x28
    23a0:	a9 a7       	std	Y+41, r26	; 0x29
    23a2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23a4:	6f a1       	ldd	r22, Y+39	; 0x27
    23a6:	78 a5       	ldd	r23, Y+40	; 0x28
    23a8:	89 a5       	ldd	r24, Y+41	; 0x29
    23aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    23ac:	20 e0       	ldi	r18, 0x00	; 0
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	4a e7       	ldi	r20, 0x7A	; 122
    23b2:	53 e4       	ldi	r21, 0x43	; 67
    23b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23b8:	dc 01       	movw	r26, r24
    23ba:	cb 01       	movw	r24, r22
    23bc:	8b a3       	std	Y+35, r24	; 0x23
    23be:	9c a3       	std	Y+36, r25	; 0x24
    23c0:	ad a3       	std	Y+37, r26	; 0x25
    23c2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    23c4:	6b a1       	ldd	r22, Y+35	; 0x23
    23c6:	7c a1       	ldd	r23, Y+36	; 0x24
    23c8:	8d a1       	ldd	r24, Y+37	; 0x25
    23ca:	9e a1       	ldd	r25, Y+38	; 0x26
    23cc:	20 e0       	ldi	r18, 0x00	; 0
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	40 e8       	ldi	r20, 0x80	; 128
    23d2:	5f e3       	ldi	r21, 0x3F	; 63
    23d4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    23d8:	88 23       	and	r24, r24
    23da:	2c f4       	brge	.+10     	; 0x23e6 <TwoLedsConvergeDivergeEvery250ms+0xb6>
		__ticks = 1;
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	9a a3       	std	Y+34, r25	; 0x22
    23e2:	89 a3       	std	Y+33, r24	; 0x21
    23e4:	3f c0       	rjmp	.+126    	; 0x2464 <TwoLedsConvergeDivergeEvery250ms+0x134>
	else if (__tmp > 65535)
    23e6:	6b a1       	ldd	r22, Y+35	; 0x23
    23e8:	7c a1       	ldd	r23, Y+36	; 0x24
    23ea:	8d a1       	ldd	r24, Y+37	; 0x25
    23ec:	9e a1       	ldd	r25, Y+38	; 0x26
    23ee:	20 e0       	ldi	r18, 0x00	; 0
    23f0:	3f ef       	ldi	r19, 0xFF	; 255
    23f2:	4f e7       	ldi	r20, 0x7F	; 127
    23f4:	57 e4       	ldi	r21, 0x47	; 71
    23f6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    23fa:	18 16       	cp	r1, r24
    23fc:	4c f5       	brge	.+82     	; 0x2450 <TwoLedsConvergeDivergeEvery250ms+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23fe:	6f a1       	ldd	r22, Y+39	; 0x27
    2400:	78 a5       	ldd	r23, Y+40	; 0x28
    2402:	89 a5       	ldd	r24, Y+41	; 0x29
    2404:	9a a5       	ldd	r25, Y+42	; 0x2a
    2406:	20 e0       	ldi	r18, 0x00	; 0
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	40 e2       	ldi	r20, 0x20	; 32
    240c:	51 e4       	ldi	r21, 0x41	; 65
    240e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2412:	dc 01       	movw	r26, r24
    2414:	cb 01       	movw	r24, r22
    2416:	bc 01       	movw	r22, r24
    2418:	cd 01       	movw	r24, r26
    241a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    241e:	dc 01       	movw	r26, r24
    2420:	cb 01       	movw	r24, r22
    2422:	9a a3       	std	Y+34, r25	; 0x22
    2424:	89 a3       	std	Y+33, r24	; 0x21
    2426:	0f c0       	rjmp	.+30     	; 0x2446 <TwoLedsConvergeDivergeEvery250ms+0x116>
    2428:	89 e1       	ldi	r24, 0x19	; 25
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	98 a3       	std	Y+32, r25	; 0x20
    242e:	8f 8f       	std	Y+31, r24	; 0x1f
    2430:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2432:	98 a1       	ldd	r25, Y+32	; 0x20
    2434:	01 97       	sbiw	r24, 0x01	; 1
    2436:	f1 f7       	brne	.-4      	; 0x2434 <TwoLedsConvergeDivergeEvery250ms+0x104>
    2438:	98 a3       	std	Y+32, r25	; 0x20
    243a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    243c:	89 a1       	ldd	r24, Y+33	; 0x21
    243e:	9a a1       	ldd	r25, Y+34	; 0x22
    2440:	01 97       	sbiw	r24, 0x01	; 1
    2442:	9a a3       	std	Y+34, r25	; 0x22
    2444:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2446:	89 a1       	ldd	r24, Y+33	; 0x21
    2448:	9a a1       	ldd	r25, Y+34	; 0x22
    244a:	00 97       	sbiw	r24, 0x00	; 0
    244c:	69 f7       	brne	.-38     	; 0x2428 <TwoLedsConvergeDivergeEvery250ms+0xf8>
    244e:	14 c0       	rjmp	.+40     	; 0x2478 <TwoLedsConvergeDivergeEvery250ms+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2450:	6b a1       	ldd	r22, Y+35	; 0x23
    2452:	7c a1       	ldd	r23, Y+36	; 0x24
    2454:	8d a1       	ldd	r24, Y+37	; 0x25
    2456:	9e a1       	ldd	r25, Y+38	; 0x26
    2458:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	9a a3       	std	Y+34, r25	; 0x22
    2462:	89 a3       	std	Y+33, r24	; 0x21
    2464:	89 a1       	ldd	r24, Y+33	; 0x21
    2466:	9a a1       	ldd	r25, Y+34	; 0x22
    2468:	9e 8f       	std	Y+30, r25	; 0x1e
    246a:	8d 8f       	std	Y+29, r24	; 0x1d
    246c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    246e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2470:	01 97       	sbiw	r24, 0x01	; 1
    2472:	f1 f7       	brne	.-4      	; 0x2470 <TwoLedsConvergeDivergeEvery250ms+0x140>
    2474:	9e 8f       	std	Y+30, r25	; 0x1e
    2476:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(250);
			LED_voidOff(Leds[i]);
    2478:	8c a5       	ldd	r24, Y+44	; 0x2c
    247a:	28 2f       	mov	r18, r24
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	c9 01       	movw	r24, r18
    2480:	88 0f       	add	r24, r24
    2482:	99 1f       	adc	r25, r25
    2484:	82 0f       	add	r24, r18
    2486:	93 1f       	adc	r25, r19
    2488:	fc 01       	movw	r30, r24
    248a:	e8 59       	subi	r30, 0x98	; 152
    248c:	ff 4f       	sbci	r31, 0xFF	; 255
    248e:	60 81       	ld	r22, Z
    2490:	71 81       	ldd	r23, Z+1	; 0x01
    2492:	82 81       	ldd	r24, Z+2	; 0x02
    2494:	0e 94 d2 05 	call	0xba4	; 0xba4 <LED_voidOff>
			LED_voidOff(Leds[7-i]);
    2498:	8c a5       	ldd	r24, Y+44	; 0x2c
    249a:	28 2f       	mov	r18, r24
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	87 e0       	ldi	r24, 0x07	; 7
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	ac 01       	movw	r20, r24
    24a4:	42 1b       	sub	r20, r18
    24a6:	53 0b       	sbc	r21, r19
    24a8:	9a 01       	movw	r18, r20
    24aa:	c9 01       	movw	r24, r18
    24ac:	88 0f       	add	r24, r24
    24ae:	99 1f       	adc	r25, r25
    24b0:	82 0f       	add	r24, r18
    24b2:	93 1f       	adc	r25, r19
    24b4:	fc 01       	movw	r30, r24
    24b6:	e8 59       	subi	r30, 0x98	; 152
    24b8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ba:	60 81       	ld	r22, Z
    24bc:	71 81       	ldd	r23, Z+1	; 0x01
    24be:	82 81       	ldd	r24, Z+2	; 0x02
    24c0:	0e 94 d2 05 	call	0xba4	; 0xba4 <LED_voidOff>
		LED_voidOff(Leds[i]);
	}
	_delay_ms(250);
}
void TwoLedsConvergeDivergeEvery250ms () {
	for(u8 i=0;i<4;i++)
    24c4:	8c a5       	ldd	r24, Y+44	; 0x2c
    24c6:	8f 5f       	subi	r24, 0xFF	; 255
    24c8:	8c a7       	std	Y+44, r24	; 0x2c
    24ca:	8c a5       	ldd	r24, Y+44	; 0x2c
    24cc:	84 30       	cpi	r24, 0x04	; 4
    24ce:	08 f4       	brcc	.+2      	; 0x24d2 <TwoLedsConvergeDivergeEvery250ms+0x1a2>
    24d0:	3b cf       	rjmp	.-394    	; 0x2348 <TwoLedsConvergeDivergeEvery250ms+0x18>
			LED_voidOn(Leds[7-i]);
			_delay_ms(250);
			LED_voidOff(Leds[i]);
			LED_voidOff(Leds[7-i]);
		}
	for(u8 i=0;i<4;i++)
    24d2:	1b a6       	std	Y+43, r1	; 0x2b
    24d4:	c7 c0       	rjmp	.+398    	; 0x2664 <TwoLedsConvergeDivergeEvery250ms+0x334>
		{
			LED_voidOn(Leds[3-i]);
    24d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    24d8:	28 2f       	mov	r18, r24
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	83 e0       	ldi	r24, 0x03	; 3
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	ac 01       	movw	r20, r24
    24e2:	42 1b       	sub	r20, r18
    24e4:	53 0b       	sbc	r21, r19
    24e6:	9a 01       	movw	r18, r20
    24e8:	c9 01       	movw	r24, r18
    24ea:	88 0f       	add	r24, r24
    24ec:	99 1f       	adc	r25, r25
    24ee:	82 0f       	add	r24, r18
    24f0:	93 1f       	adc	r25, r19
    24f2:	fc 01       	movw	r30, r24
    24f4:	e8 59       	subi	r30, 0x98	; 152
    24f6:	ff 4f       	sbci	r31, 0xFF	; 255
    24f8:	60 81       	ld	r22, Z
    24fa:	71 81       	ldd	r23, Z+1	; 0x01
    24fc:	82 81       	ldd	r24, Z+2	; 0x02
    24fe:	0e 94 b0 05 	call	0xb60	; 0xb60 <LED_voidOn>
			LED_voidOn(Leds[4+i]);
    2502:	8b a5       	ldd	r24, Y+43	; 0x2b
    2504:	88 2f       	mov	r24, r24
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	9c 01       	movw	r18, r24
    250a:	2c 5f       	subi	r18, 0xFC	; 252
    250c:	3f 4f       	sbci	r19, 0xFF	; 255
    250e:	c9 01       	movw	r24, r18
    2510:	88 0f       	add	r24, r24
    2512:	99 1f       	adc	r25, r25
    2514:	82 0f       	add	r24, r18
    2516:	93 1f       	adc	r25, r19
    2518:	fc 01       	movw	r30, r24
    251a:	e8 59       	subi	r30, 0x98	; 152
    251c:	ff 4f       	sbci	r31, 0xFF	; 255
    251e:	60 81       	ld	r22, Z
    2520:	71 81       	ldd	r23, Z+1	; 0x01
    2522:	82 81       	ldd	r24, Z+2	; 0x02
    2524:	0e 94 b0 05 	call	0xb60	; 0xb60 <LED_voidOn>
    2528:	80 e0       	ldi	r24, 0x00	; 0
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	aa e7       	ldi	r26, 0x7A	; 122
    252e:	b3 e4       	ldi	r27, 0x43	; 67
    2530:	89 8f       	std	Y+25, r24	; 0x19
    2532:	9a 8f       	std	Y+26, r25	; 0x1a
    2534:	ab 8f       	std	Y+27, r26	; 0x1b
    2536:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2538:	69 8d       	ldd	r22, Y+25	; 0x19
    253a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    253c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    253e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	4a e7       	ldi	r20, 0x7A	; 122
    2546:	53 e4       	ldi	r21, 0x43	; 67
    2548:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    254c:	dc 01       	movw	r26, r24
    254e:	cb 01       	movw	r24, r22
    2550:	8d 8b       	std	Y+21, r24	; 0x15
    2552:	9e 8b       	std	Y+22, r25	; 0x16
    2554:	af 8b       	std	Y+23, r26	; 0x17
    2556:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2558:	6d 89       	ldd	r22, Y+21	; 0x15
    255a:	7e 89       	ldd	r23, Y+22	; 0x16
    255c:	8f 89       	ldd	r24, Y+23	; 0x17
    255e:	98 8d       	ldd	r25, Y+24	; 0x18
    2560:	20 e0       	ldi	r18, 0x00	; 0
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	40 e8       	ldi	r20, 0x80	; 128
    2566:	5f e3       	ldi	r21, 0x3F	; 63
    2568:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    256c:	88 23       	and	r24, r24
    256e:	2c f4       	brge	.+10     	; 0x257a <TwoLedsConvergeDivergeEvery250ms+0x24a>
		__ticks = 1;
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	9c 8b       	std	Y+20, r25	; 0x14
    2576:	8b 8b       	std	Y+19, r24	; 0x13
    2578:	3f c0       	rjmp	.+126    	; 0x25f8 <TwoLedsConvergeDivergeEvery250ms+0x2c8>
	else if (__tmp > 65535)
    257a:	6d 89       	ldd	r22, Y+21	; 0x15
    257c:	7e 89       	ldd	r23, Y+22	; 0x16
    257e:	8f 89       	ldd	r24, Y+23	; 0x17
    2580:	98 8d       	ldd	r25, Y+24	; 0x18
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	3f ef       	ldi	r19, 0xFF	; 255
    2586:	4f e7       	ldi	r20, 0x7F	; 127
    2588:	57 e4       	ldi	r21, 0x47	; 71
    258a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    258e:	18 16       	cp	r1, r24
    2590:	4c f5       	brge	.+82     	; 0x25e4 <TwoLedsConvergeDivergeEvery250ms+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2592:	69 8d       	ldd	r22, Y+25	; 0x19
    2594:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2596:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2598:	9c 8d       	ldd	r25, Y+28	; 0x1c
    259a:	20 e0       	ldi	r18, 0x00	; 0
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	40 e2       	ldi	r20, 0x20	; 32
    25a0:	51 e4       	ldi	r21, 0x41	; 65
    25a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25a6:	dc 01       	movw	r26, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	bc 01       	movw	r22, r24
    25ac:	cd 01       	movw	r24, r26
    25ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25b2:	dc 01       	movw	r26, r24
    25b4:	cb 01       	movw	r24, r22
    25b6:	9c 8b       	std	Y+20, r25	; 0x14
    25b8:	8b 8b       	std	Y+19, r24	; 0x13
    25ba:	0f c0       	rjmp	.+30     	; 0x25da <TwoLedsConvergeDivergeEvery250ms+0x2aa>
    25bc:	89 e1       	ldi	r24, 0x19	; 25
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	9a 8b       	std	Y+18, r25	; 0x12
    25c2:	89 8b       	std	Y+17, r24	; 0x11
    25c4:	89 89       	ldd	r24, Y+17	; 0x11
    25c6:	9a 89       	ldd	r25, Y+18	; 0x12
    25c8:	01 97       	sbiw	r24, 0x01	; 1
    25ca:	f1 f7       	brne	.-4      	; 0x25c8 <TwoLedsConvergeDivergeEvery250ms+0x298>
    25cc:	9a 8b       	std	Y+18, r25	; 0x12
    25ce:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d0:	8b 89       	ldd	r24, Y+19	; 0x13
    25d2:	9c 89       	ldd	r25, Y+20	; 0x14
    25d4:	01 97       	sbiw	r24, 0x01	; 1
    25d6:	9c 8b       	std	Y+20, r25	; 0x14
    25d8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25da:	8b 89       	ldd	r24, Y+19	; 0x13
    25dc:	9c 89       	ldd	r25, Y+20	; 0x14
    25de:	00 97       	sbiw	r24, 0x00	; 0
    25e0:	69 f7       	brne	.-38     	; 0x25bc <TwoLedsConvergeDivergeEvery250ms+0x28c>
    25e2:	14 c0       	rjmp	.+40     	; 0x260c <TwoLedsConvergeDivergeEvery250ms+0x2dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e4:	6d 89       	ldd	r22, Y+21	; 0x15
    25e6:	7e 89       	ldd	r23, Y+22	; 0x16
    25e8:	8f 89       	ldd	r24, Y+23	; 0x17
    25ea:	98 8d       	ldd	r25, Y+24	; 0x18
    25ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25f0:	dc 01       	movw	r26, r24
    25f2:	cb 01       	movw	r24, r22
    25f4:	9c 8b       	std	Y+20, r25	; 0x14
    25f6:	8b 8b       	std	Y+19, r24	; 0x13
    25f8:	8b 89       	ldd	r24, Y+19	; 0x13
    25fa:	9c 89       	ldd	r25, Y+20	; 0x14
    25fc:	98 8b       	std	Y+16, r25	; 0x10
    25fe:	8f 87       	std	Y+15, r24	; 0x0f
    2600:	8f 85       	ldd	r24, Y+15	; 0x0f
    2602:	98 89       	ldd	r25, Y+16	; 0x10
    2604:	01 97       	sbiw	r24, 0x01	; 1
    2606:	f1 f7       	brne	.-4      	; 0x2604 <TwoLedsConvergeDivergeEvery250ms+0x2d4>
    2608:	98 8b       	std	Y+16, r25	; 0x10
    260a:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(250);
			LED_voidOff(Leds[3-i]);
    260c:	8b a5       	ldd	r24, Y+43	; 0x2b
    260e:	28 2f       	mov	r18, r24
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	83 e0       	ldi	r24, 0x03	; 3
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	ac 01       	movw	r20, r24
    2618:	42 1b       	sub	r20, r18
    261a:	53 0b       	sbc	r21, r19
    261c:	9a 01       	movw	r18, r20
    261e:	c9 01       	movw	r24, r18
    2620:	88 0f       	add	r24, r24
    2622:	99 1f       	adc	r25, r25
    2624:	82 0f       	add	r24, r18
    2626:	93 1f       	adc	r25, r19
    2628:	fc 01       	movw	r30, r24
    262a:	e8 59       	subi	r30, 0x98	; 152
    262c:	ff 4f       	sbci	r31, 0xFF	; 255
    262e:	60 81       	ld	r22, Z
    2630:	71 81       	ldd	r23, Z+1	; 0x01
    2632:	82 81       	ldd	r24, Z+2	; 0x02
    2634:	0e 94 d2 05 	call	0xba4	; 0xba4 <LED_voidOff>
			LED_voidOff(Leds[4+i]);
    2638:	8b a5       	ldd	r24, Y+43	; 0x2b
    263a:	88 2f       	mov	r24, r24
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	9c 01       	movw	r18, r24
    2640:	2c 5f       	subi	r18, 0xFC	; 252
    2642:	3f 4f       	sbci	r19, 0xFF	; 255
    2644:	c9 01       	movw	r24, r18
    2646:	88 0f       	add	r24, r24
    2648:	99 1f       	adc	r25, r25
    264a:	82 0f       	add	r24, r18
    264c:	93 1f       	adc	r25, r19
    264e:	fc 01       	movw	r30, r24
    2650:	e8 59       	subi	r30, 0x98	; 152
    2652:	ff 4f       	sbci	r31, 0xFF	; 255
    2654:	60 81       	ld	r22, Z
    2656:	71 81       	ldd	r23, Z+1	; 0x01
    2658:	82 81       	ldd	r24, Z+2	; 0x02
    265a:	0e 94 d2 05 	call	0xba4	; 0xba4 <LED_voidOff>
			LED_voidOn(Leds[7-i]);
			_delay_ms(250);
			LED_voidOff(Leds[i]);
			LED_voidOff(Leds[7-i]);
		}
	for(u8 i=0;i<4;i++)
    265e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2660:	8f 5f       	subi	r24, 0xFF	; 255
    2662:	8b a7       	std	Y+43, r24	; 0x2b
    2664:	8b a5       	ldd	r24, Y+43	; 0x2b
    2666:	84 30       	cpi	r24, 0x04	; 4
    2668:	08 f4       	brcc	.+2      	; 0x266c <TwoLedsConvergeDivergeEvery250ms+0x33c>
    266a:	35 cf       	rjmp	.-406    	; 0x24d6 <TwoLedsConvergeDivergeEvery250ms+0x1a6>
    266c:	80 e0       	ldi	r24, 0x00	; 0
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	aa e7       	ldi	r26, 0x7A	; 122
    2672:	b3 e4       	ldi	r27, 0x43	; 67
    2674:	8b 87       	std	Y+11, r24	; 0x0b
    2676:	9c 87       	std	Y+12, r25	; 0x0c
    2678:	ad 87       	std	Y+13, r26	; 0x0d
    267a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    267c:	6b 85       	ldd	r22, Y+11	; 0x0b
    267e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2680:	8d 85       	ldd	r24, Y+13	; 0x0d
    2682:	9e 85       	ldd	r25, Y+14	; 0x0e
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	4a e7       	ldi	r20, 0x7A	; 122
    268a:	53 e4       	ldi	r21, 0x43	; 67
    268c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	8f 83       	std	Y+7, r24	; 0x07
    2696:	98 87       	std	Y+8, r25	; 0x08
    2698:	a9 87       	std	Y+9, r26	; 0x09
    269a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    269c:	6f 81       	ldd	r22, Y+7	; 0x07
    269e:	78 85       	ldd	r23, Y+8	; 0x08
    26a0:	89 85       	ldd	r24, Y+9	; 0x09
    26a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a4:	20 e0       	ldi	r18, 0x00	; 0
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	40 e8       	ldi	r20, 0x80	; 128
    26aa:	5f e3       	ldi	r21, 0x3F	; 63
    26ac:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    26b0:	88 23       	and	r24, r24
    26b2:	2c f4       	brge	.+10     	; 0x26be <TwoLedsConvergeDivergeEvery250ms+0x38e>
		__ticks = 1;
    26b4:	81 e0       	ldi	r24, 0x01	; 1
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	9e 83       	std	Y+6, r25	; 0x06
    26ba:	8d 83       	std	Y+5, r24	; 0x05
    26bc:	3f c0       	rjmp	.+126    	; 0x273c <TwoLedsConvergeDivergeEvery250ms+0x40c>
	else if (__tmp > 65535)
    26be:	6f 81       	ldd	r22, Y+7	; 0x07
    26c0:	78 85       	ldd	r23, Y+8	; 0x08
    26c2:	89 85       	ldd	r24, Y+9	; 0x09
    26c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    26c6:	20 e0       	ldi	r18, 0x00	; 0
    26c8:	3f ef       	ldi	r19, 0xFF	; 255
    26ca:	4f e7       	ldi	r20, 0x7F	; 127
    26cc:	57 e4       	ldi	r21, 0x47	; 71
    26ce:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    26d2:	18 16       	cp	r1, r24
    26d4:	4c f5       	brge	.+82     	; 0x2728 <TwoLedsConvergeDivergeEvery250ms+0x3f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    26d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    26da:	8d 85       	ldd	r24, Y+13	; 0x0d
    26dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    26de:	20 e0       	ldi	r18, 0x00	; 0
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	40 e2       	ldi	r20, 0x20	; 32
    26e4:	51 e4       	ldi	r21, 0x41	; 65
    26e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26ea:	dc 01       	movw	r26, r24
    26ec:	cb 01       	movw	r24, r22
    26ee:	bc 01       	movw	r22, r24
    26f0:	cd 01       	movw	r24, r26
    26f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26f6:	dc 01       	movw	r26, r24
    26f8:	cb 01       	movw	r24, r22
    26fa:	9e 83       	std	Y+6, r25	; 0x06
    26fc:	8d 83       	std	Y+5, r24	; 0x05
    26fe:	0f c0       	rjmp	.+30     	; 0x271e <TwoLedsConvergeDivergeEvery250ms+0x3ee>
    2700:	89 e1       	ldi	r24, 0x19	; 25
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	9c 83       	std	Y+4, r25	; 0x04
    2706:	8b 83       	std	Y+3, r24	; 0x03
    2708:	8b 81       	ldd	r24, Y+3	; 0x03
    270a:	9c 81       	ldd	r25, Y+4	; 0x04
    270c:	01 97       	sbiw	r24, 0x01	; 1
    270e:	f1 f7       	brne	.-4      	; 0x270c <TwoLedsConvergeDivergeEvery250ms+0x3dc>
    2710:	9c 83       	std	Y+4, r25	; 0x04
    2712:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2714:	8d 81       	ldd	r24, Y+5	; 0x05
    2716:	9e 81       	ldd	r25, Y+6	; 0x06
    2718:	01 97       	sbiw	r24, 0x01	; 1
    271a:	9e 83       	std	Y+6, r25	; 0x06
    271c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    271e:	8d 81       	ldd	r24, Y+5	; 0x05
    2720:	9e 81       	ldd	r25, Y+6	; 0x06
    2722:	00 97       	sbiw	r24, 0x00	; 0
    2724:	69 f7       	brne	.-38     	; 0x2700 <TwoLedsConvergeDivergeEvery250ms+0x3d0>
    2726:	14 c0       	rjmp	.+40     	; 0x2750 <TwoLedsConvergeDivergeEvery250ms+0x420>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2728:	6f 81       	ldd	r22, Y+7	; 0x07
    272a:	78 85       	ldd	r23, Y+8	; 0x08
    272c:	89 85       	ldd	r24, Y+9	; 0x09
    272e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2730:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2734:	dc 01       	movw	r26, r24
    2736:	cb 01       	movw	r24, r22
    2738:	9e 83       	std	Y+6, r25	; 0x06
    273a:	8d 83       	std	Y+5, r24	; 0x05
    273c:	8d 81       	ldd	r24, Y+5	; 0x05
    273e:	9e 81       	ldd	r25, Y+6	; 0x06
    2740:	9a 83       	std	Y+2, r25	; 0x02
    2742:	89 83       	std	Y+1, r24	; 0x01
    2744:	89 81       	ldd	r24, Y+1	; 0x01
    2746:	9a 81       	ldd	r25, Y+2	; 0x02
    2748:	01 97       	sbiw	r24, 0x01	; 1
    274a:	f1 f7       	brne	.-4      	; 0x2748 <TwoLedsConvergeDivergeEvery250ms+0x418>
    274c:	9a 83       	std	Y+2, r25	; 0x02
    274e:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(250);
			LED_voidOff(Leds[3-i]);
			LED_voidOff(Leds[4+i]);
		}
	_delay_ms(250);
}
    2750:	ac 96       	adiw	r28, 0x2c	; 44
    2752:	0f b6       	in	r0, 0x3f	; 63
    2754:	f8 94       	cli
    2756:	de bf       	out	0x3e, r29	; 62
    2758:	0f be       	out	0x3f, r0	; 63
    275a:	cd bf       	out	0x3d, r28	; 61
    275c:	cf 91       	pop	r28
    275e:	df 91       	pop	r29
    2760:	08 95       	ret

00002762 <__prologue_saves__>:
    2762:	2f 92       	push	r2
    2764:	3f 92       	push	r3
    2766:	4f 92       	push	r4
    2768:	5f 92       	push	r5
    276a:	6f 92       	push	r6
    276c:	7f 92       	push	r7
    276e:	8f 92       	push	r8
    2770:	9f 92       	push	r9
    2772:	af 92       	push	r10
    2774:	bf 92       	push	r11
    2776:	cf 92       	push	r12
    2778:	df 92       	push	r13
    277a:	ef 92       	push	r14
    277c:	ff 92       	push	r15
    277e:	0f 93       	push	r16
    2780:	1f 93       	push	r17
    2782:	cf 93       	push	r28
    2784:	df 93       	push	r29
    2786:	cd b7       	in	r28, 0x3d	; 61
    2788:	de b7       	in	r29, 0x3e	; 62
    278a:	ca 1b       	sub	r28, r26
    278c:	db 0b       	sbc	r29, r27
    278e:	0f b6       	in	r0, 0x3f	; 63
    2790:	f8 94       	cli
    2792:	de bf       	out	0x3e, r29	; 62
    2794:	0f be       	out	0x3f, r0	; 63
    2796:	cd bf       	out	0x3d, r28	; 61
    2798:	09 94       	ijmp

0000279a <__epilogue_restores__>:
    279a:	2a 88       	ldd	r2, Y+18	; 0x12
    279c:	39 88       	ldd	r3, Y+17	; 0x11
    279e:	48 88       	ldd	r4, Y+16	; 0x10
    27a0:	5f 84       	ldd	r5, Y+15	; 0x0f
    27a2:	6e 84       	ldd	r6, Y+14	; 0x0e
    27a4:	7d 84       	ldd	r7, Y+13	; 0x0d
    27a6:	8c 84       	ldd	r8, Y+12	; 0x0c
    27a8:	9b 84       	ldd	r9, Y+11	; 0x0b
    27aa:	aa 84       	ldd	r10, Y+10	; 0x0a
    27ac:	b9 84       	ldd	r11, Y+9	; 0x09
    27ae:	c8 84       	ldd	r12, Y+8	; 0x08
    27b0:	df 80       	ldd	r13, Y+7	; 0x07
    27b2:	ee 80       	ldd	r14, Y+6	; 0x06
    27b4:	fd 80       	ldd	r15, Y+5	; 0x05
    27b6:	0c 81       	ldd	r16, Y+4	; 0x04
    27b8:	1b 81       	ldd	r17, Y+3	; 0x03
    27ba:	aa 81       	ldd	r26, Y+2	; 0x02
    27bc:	b9 81       	ldd	r27, Y+1	; 0x01
    27be:	ce 0f       	add	r28, r30
    27c0:	d1 1d       	adc	r29, r1
    27c2:	0f b6       	in	r0, 0x3f	; 63
    27c4:	f8 94       	cli
    27c6:	de bf       	out	0x3e, r29	; 62
    27c8:	0f be       	out	0x3f, r0	; 63
    27ca:	cd bf       	out	0x3d, r28	; 61
    27cc:	ed 01       	movw	r28, r26
    27ce:	08 95       	ret

000027d0 <_exit>:
    27d0:	f8 94       	cli

000027d2 <__stop_program>:
    27d2:	ff cf       	rjmp	.-2      	; 0x27d2 <__stop_program>
