
SW_LEDApp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000298a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  0000298a  000029fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001fe0  00000000  00000000  00002a38  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c97  00000000  00000000  00004a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000056af  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000057ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000595f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000075a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008493  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009240  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  000093a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000962d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009dfb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e8       	ldi	r30, 0x8A	; 138
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 39       	cpi	r26, 0x98	; 152
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 9d 0a 	call	0x153a	; 0x153a <main>
      7a:	0c 94 c3 14 	jmp	0x2986	; 0x2986 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 8c 14 	jmp	0x2918	; 0x2918 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 a8 14 	jmp	0x2950	; 0x2950 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 98 14 	jmp	0x2930	; 0x2930 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 b4 14 	jmp	0x2968	; 0x2968 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 98 14 	jmp	0x2930	; 0x2930 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 b4 14 	jmp	0x2968	; 0x2968 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 8c 14 	jmp	0x2918	; 0x2918 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 a8 14 	jmp	0x2950	; 0x2950 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 98 14 	jmp	0x2930	; 0x2930 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 b4 14 	jmp	0x2968	; 0x2968 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 98 14 	jmp	0x2930	; 0x2930 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 b4 14 	jmp	0x2968	; 0x2968 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 98 14 	jmp	0x2930	; 0x2930 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 b4 14 	jmp	0x2968	; 0x2968 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 9c 14 	jmp	0x2938	; 0x2938 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 b8 14 	jmp	0x2970	; 0x2970 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <SW_voidInit>:

#include "../SW/SW_config.h"
#include "../SW/SW_interface.h"
#include "../SW/SW_private.h"

void SW_voidInit(SW_Type SW_Config){
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <SW_voidInit+0x6>
     b3c:	0f 92       	push	r0
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
     b42:	69 83       	std	Y+1, r22	; 0x01
     b44:	7a 83       	std	Y+2, r23	; 0x02
     b46:	8b 83       	std	Y+3, r24	; 0x03

	DIO_VoidSetPinDirection( SW_Config.Port , SW_Config.Pin , DIO_PIN_INPUT );
     b48:	89 81       	ldd	r24, Y+1	; 0x01
     b4a:	9a 81       	ldd	r25, Y+2	; 0x02
     b4c:	69 2f       	mov	r22, r25
     b4e:	40 e0       	ldi	r20, 0x00	; 0
     b50:	0e 94 65 06 	call	0xcca	; 0xcca <DIO_VoidSetPinDirection>

	if( SW_Config.Pull_State == SW_Int_PULL_UP ){
     b54:	8b 81       	ldd	r24, Y+3	; 0x03
     b56:	88 23       	and	r24, r24
     b58:	31 f4       	brne	.+12     	; 0xb66 <SW_voidInit+0x30>

		DIO_VoidSetPinValue( SW_Config.Port , SW_Config.Pin , DIO_PIN_HIGH  );
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	9a 81       	ldd	r25, Y+2	; 0x02
     b5e:	69 2f       	mov	r22, r25
     b60:	41 e0       	ldi	r20, 0x01	; 1
     b62:	0e 94 65 07 	call	0xeca	; 0xeca <DIO_VoidSetPinValue>

	}

}
     b66:	0f 90       	pop	r0
     b68:	0f 90       	pop	r0
     b6a:	0f 90       	pop	r0
     b6c:	cf 91       	pop	r28
     b6e:	df 91       	pop	r29
     b70:	08 95       	ret

00000b72 <SW_u8GetPressed>:
u8   SW_u8GetPressed   ( SW_Type SW_Config ){
     b72:	df 93       	push	r29
     b74:	cf 93       	push	r28
     b76:	00 d0       	rcall	.+0      	; 0xb78 <SW_u8GetPressed+0x6>
     b78:	00 d0       	rcall	.+0      	; 0xb7a <SW_u8GetPressed+0x8>
     b7a:	0f 92       	push	r0
     b7c:	cd b7       	in	r28, 0x3d	; 61
     b7e:	de b7       	in	r29, 0x3e	; 62
     b80:	6b 83       	std	Y+3, r22	; 0x03
     b82:	7c 83       	std	Y+4, r23	; 0x04
     b84:	8d 83       	std	Y+5, r24	; 0x05

	u8 LOC_u8Result = SW_NOT_PRESSED ;
     b86:	1a 82       	std	Y+2, r1	; 0x02
		u8 PIN_u8PinVal = SW_NOT_PRESSED ;
     b88:	19 82       	std	Y+1, r1	; 0x01

		if ( (SW_Config.Pull_State == SW_Int_PULL_UP) || (SW_Config.Pull_State == SW_Ext_PULL_UP) )
     b8a:	8d 81       	ldd	r24, Y+5	; 0x05
     b8c:	88 23       	and	r24, r24
     b8e:	19 f0       	breq	.+6      	; 0xb96 <SW_u8GetPressed+0x24>
     b90:	8d 81       	ldd	r24, Y+5	; 0x05
     b92:	81 30       	cpi	r24, 0x01	; 1
     b94:	89 f4       	brne	.+34     	; 0xbb8 <SW_u8GetPressed+0x46>
		{
			 PIN_u8PinVal= DIO_VoidGetPinValue( SW_Config.Port , SW_Config.Pin);
     b96:	8b 81       	ldd	r24, Y+3	; 0x03
     b98:	9c 81       	ldd	r25, Y+4	; 0x04
     b9a:	69 2f       	mov	r22, r25
     b9c:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <DIO_VoidGetPinValue>
     ba0:	89 83       	std	Y+1, r24	; 0x01

			if ( PIN_u8PinVal==0)
     ba2:	89 81       	ldd	r24, Y+1	; 0x01
     ba4:	88 23       	and	r24, r24
     ba6:	19 f4       	brne	.+6      	; 0xbae <SW_u8GetPressed+0x3c>
			{
				LOC_u8Result = SW_PRESSED ;
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	8a 83       	std	Y+2, r24	; 0x02
     bac:	18 c0       	rjmp	.+48     	; 0xbde <SW_u8GetPressed+0x6c>
			}
			else if ( PIN_u8PinVal==1)
     bae:	89 81       	ldd	r24, Y+1	; 0x01
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a9 f4       	brne	.+42     	; 0xbde <SW_u8GetPressed+0x6c>
			{
				LOC_u8Result = SW_NOT_PRESSED ;
     bb4:	1a 82       	std	Y+2, r1	; 0x02
     bb6:	13 c0       	rjmp	.+38     	; 0xbde <SW_u8GetPressed+0x6c>
			}

		}
		else if (SW_Config.Pull_State == SW_Ext_PULL_DOWN)
     bb8:	8d 81       	ldd	r24, Y+5	; 0x05
     bba:	82 30       	cpi	r24, 0x02	; 2
     bbc:	81 f4       	brne	.+32     	; 0xbde <SW_u8GetPressed+0x6c>
		{
			 PIN_u8PinVal=DIO_VoidGetPinValue( SW_Config.Port , SW_Config.Pin);
     bbe:	8b 81       	ldd	r24, Y+3	; 0x03
     bc0:	9c 81       	ldd	r25, Y+4	; 0x04
     bc2:	69 2f       	mov	r22, r25
     bc4:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <DIO_VoidGetPinValue>
     bc8:	89 83       	std	Y+1, r24	; 0x01

			if ( PIN_u8PinVal==0)
     bca:	89 81       	ldd	r24, Y+1	; 0x01
     bcc:	88 23       	and	r24, r24
     bce:	11 f4       	brne	.+4      	; 0xbd4 <SW_u8GetPressed+0x62>
			{
				LOC_u8Result = SW_NOT_PRESSED ;
     bd0:	1a 82       	std	Y+2, r1	; 0x02
     bd2:	05 c0       	rjmp	.+10     	; 0xbde <SW_u8GetPressed+0x6c>
			}
			else if ( PIN_u8PinVal==1)
     bd4:	89 81       	ldd	r24, Y+1	; 0x01
     bd6:	81 30       	cpi	r24, 0x01	; 1
     bd8:	11 f4       	brne	.+4      	; 0xbde <SW_u8GetPressed+0x6c>
			{
				LOC_u8Result = SW_PRESSED ;
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	8a 83       	std	Y+2, r24	; 0x02
			}
		}

		return LOC_u8Result ;
     bde:	8a 81       	ldd	r24, Y+2	; 0x02
}
     be0:	0f 90       	pop	r0
     be2:	0f 90       	pop	r0
     be4:	0f 90       	pop	r0
     be6:	0f 90       	pop	r0
     be8:	0f 90       	pop	r0
     bea:	cf 91       	pop	r28
     bec:	df 91       	pop	r29
     bee:	08 95       	ret

00000bf0 <LED_voidInit>:

#include "../DIO/DIO_interface.h"
#include "LED_interface.h"

void LED_voidInit(LED_Type LED_Config)
{
     bf0:	df 93       	push	r29
     bf2:	cf 93       	push	r28
     bf4:	00 d0       	rcall	.+0      	; 0xbf6 <LED_voidInit+0x6>
     bf6:	0f 92       	push	r0
     bf8:	cd b7       	in	r28, 0x3d	; 61
     bfa:	de b7       	in	r29, 0x3e	; 62
     bfc:	69 83       	std	Y+1, r22	; 0x01
     bfe:	7a 83       	std	Y+2, r23	; 0x02
     c00:	8b 83       	std	Y+3, r24	; 0x03

	DIO_VoidSetPinDirection( LED_Config.Port , LED_Config.Pin , DIO_PIN_OUTPUT);
     c02:	89 81       	ldd	r24, Y+1	; 0x01
     c04:	9a 81       	ldd	r25, Y+2	; 0x02
     c06:	69 2f       	mov	r22, r25
     c08:	41 e0       	ldi	r20, 0x01	; 1
     c0a:	0e 94 65 06 	call	0xcca	; 0xcca <DIO_VoidSetPinDirection>

}
     c0e:	0f 90       	pop	r0
     c10:	0f 90       	pop	r0
     c12:	0f 90       	pop	r0
     c14:	cf 91       	pop	r28
     c16:	df 91       	pop	r29
     c18:	08 95       	ret

00000c1a <LED_voidOn>:

void LED_voidOn(LED_Type LED_Config)
{
     c1a:	df 93       	push	r29
     c1c:	cf 93       	push	r28
     c1e:	00 d0       	rcall	.+0      	; 0xc20 <LED_voidOn+0x6>
     c20:	0f 92       	push	r0
     c22:	cd b7       	in	r28, 0x3d	; 61
     c24:	de b7       	in	r29, 0x3e	; 62
     c26:	69 83       	std	Y+1, r22	; 0x01
     c28:	7a 83       	std	Y+2, r23	; 0x02
     c2a:	8b 83       	std	Y+3, r24	; 0x03

	if(LED_Config.Active_State == ACTIVE_HIGH ){
     c2c:	8b 81       	ldd	r24, Y+3	; 0x03
     c2e:	81 30       	cpi	r24, 0x01	; 1
     c30:	39 f4       	brne	.+14     	; 0xc40 <LED_voidOn+0x26>

		DIO_VoidSetPinValue(LED_Config.Port ,LED_Config.Pin ,DIO_PIN_HIGH);
     c32:	89 81       	ldd	r24, Y+1	; 0x01
     c34:	9a 81       	ldd	r25, Y+2	; 0x02
     c36:	69 2f       	mov	r22, r25
     c38:	41 e0       	ldi	r20, 0x01	; 1
     c3a:	0e 94 65 07 	call	0xeca	; 0xeca <DIO_VoidSetPinValue>
     c3e:	09 c0       	rjmp	.+18     	; 0xc52 <LED_voidOn+0x38>

	}else if(LED_Config.Active_State == ACTIVE_LOW ){
     c40:	8b 81       	ldd	r24, Y+3	; 0x03
     c42:	88 23       	and	r24, r24
     c44:	31 f4       	brne	.+12     	; 0xc52 <LED_voidOn+0x38>

		DIO_VoidSetPinValue(LED_Config.Port ,LED_Config.Pin ,DIO_PIN_LOW);
     c46:	89 81       	ldd	r24, Y+1	; 0x01
     c48:	9a 81       	ldd	r25, Y+2	; 0x02
     c4a:	69 2f       	mov	r22, r25
     c4c:	40 e0       	ldi	r20, 0x00	; 0
     c4e:	0e 94 65 07 	call	0xeca	; 0xeca <DIO_VoidSetPinValue>

	}

}
     c52:	0f 90       	pop	r0
     c54:	0f 90       	pop	r0
     c56:	0f 90       	pop	r0
     c58:	cf 91       	pop	r28
     c5a:	df 91       	pop	r29
     c5c:	08 95       	ret

00000c5e <LED_voidOff>:

void LED_voidOff(LED_Type LED_Config)
{
     c5e:	df 93       	push	r29
     c60:	cf 93       	push	r28
     c62:	00 d0       	rcall	.+0      	; 0xc64 <LED_voidOff+0x6>
     c64:	0f 92       	push	r0
     c66:	cd b7       	in	r28, 0x3d	; 61
     c68:	de b7       	in	r29, 0x3e	; 62
     c6a:	69 83       	std	Y+1, r22	; 0x01
     c6c:	7a 83       	std	Y+2, r23	; 0x02
     c6e:	8b 83       	std	Y+3, r24	; 0x03

	if(LED_Config.Active_State == ACTIVE_HIGH ){
     c70:	8b 81       	ldd	r24, Y+3	; 0x03
     c72:	81 30       	cpi	r24, 0x01	; 1
     c74:	39 f4       	brne	.+14     	; 0xc84 <LED_voidOff+0x26>

		DIO_VoidSetPinValue(LED_Config.Port ,LED_Config.Pin ,DIO_PIN_LOW);
     c76:	89 81       	ldd	r24, Y+1	; 0x01
     c78:	9a 81       	ldd	r25, Y+2	; 0x02
     c7a:	69 2f       	mov	r22, r25
     c7c:	40 e0       	ldi	r20, 0x00	; 0
     c7e:	0e 94 65 07 	call	0xeca	; 0xeca <DIO_VoidSetPinValue>
     c82:	09 c0       	rjmp	.+18     	; 0xc96 <LED_voidOff+0x38>

	}else if(LED_Config.Active_State == ACTIVE_LOW ){
     c84:	8b 81       	ldd	r24, Y+3	; 0x03
     c86:	88 23       	and	r24, r24
     c88:	31 f4       	brne	.+12     	; 0xc96 <LED_voidOff+0x38>

		DIO_VoidSetPinValue(LED_Config.Port ,LED_Config.Pin ,DIO_PIN_HIGH);
     c8a:	89 81       	ldd	r24, Y+1	; 0x01
     c8c:	9a 81       	ldd	r25, Y+2	; 0x02
     c8e:	69 2f       	mov	r22, r25
     c90:	41 e0       	ldi	r20, 0x01	; 1
     c92:	0e 94 65 07 	call	0xeca	; 0xeca <DIO_VoidSetPinValue>

	}

}
     c96:	0f 90       	pop	r0
     c98:	0f 90       	pop	r0
     c9a:	0f 90       	pop	r0
     c9c:	cf 91       	pop	r28
     c9e:	df 91       	pop	r29
     ca0:	08 95       	ret

00000ca2 <LED_voidToggle>:

void LED_voidToggle( LED_Type LED_Config)
{
     ca2:	df 93       	push	r29
     ca4:	cf 93       	push	r28
     ca6:	00 d0       	rcall	.+0      	; 0xca8 <LED_voidToggle+0x6>
     ca8:	0f 92       	push	r0
     caa:	cd b7       	in	r28, 0x3d	; 61
     cac:	de b7       	in	r29, 0x3e	; 62
     cae:	69 83       	std	Y+1, r22	; 0x01
     cb0:	7a 83       	std	Y+2, r23	; 0x02
     cb2:	8b 83       	std	Y+3, r24	; 0x03
	DIO_VoidTogglePinValue( LED_Config.Port , LED_Config.Pin );
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	9a 81       	ldd	r25, Y+2	; 0x02
     cb8:	69 2f       	mov	r22, r25
     cba:	0e 94 65 08 	call	0x10ca	; 0x10ca <DIO_VoidTogglePinValue>
}
     cbe:	0f 90       	pop	r0
     cc0:	0f 90       	pop	r0
     cc2:	0f 90       	pop	r0
     cc4:	cf 91       	pop	r28
     cc6:	df 91       	pop	r29
     cc8:	08 95       	ret

00000cca <DIO_VoidSetPinDirection>:
#include "DIO_config.h"
#include "DIO_interface.h"
#include "DIO_private.h"

void DIO_VoidSetPinDirection(u8 Copy_u8PORT,u8 Copy_u8PIN,u8 Copy_u8Direction)
{
     cca:	df 93       	push	r29
     ccc:	cf 93       	push	r28
     cce:	cd b7       	in	r28, 0x3d	; 61
     cd0:	de b7       	in	r29, 0x3e	; 62
     cd2:	27 97       	sbiw	r28, 0x07	; 7
     cd4:	0f b6       	in	r0, 0x3f	; 63
     cd6:	f8 94       	cli
     cd8:	de bf       	out	0x3e, r29	; 62
     cda:	0f be       	out	0x3f, r0	; 63
     cdc:	cd bf       	out	0x3d, r28	; 61
     cde:	89 83       	std	Y+1, r24	; 0x01
     ce0:	6a 83       	std	Y+2, r22	; 0x02
     ce2:	4b 83       	std	Y+3, r20	; 0x03
  if(Copy_u8Direction== DIO_PIN_OUTPUT )
     ce4:	8b 81       	ldd	r24, Y+3	; 0x03
     ce6:	81 30       	cpi	r24, 0x01	; 1
     ce8:	09 f0       	breq	.+2      	; 0xcec <DIO_VoidSetPinDirection+0x22>
     cea:	6f c0       	rjmp	.+222    	; 0xdca <DIO_VoidSetPinDirection+0x100>
  {
	  switch (Copy_u8PORT)
     cec:	89 81       	ldd	r24, Y+1	; 0x01
     cee:	28 2f       	mov	r18, r24
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	3f 83       	std	Y+7, r19	; 0x07
     cf4:	2e 83       	std	Y+6, r18	; 0x06
     cf6:	8e 81       	ldd	r24, Y+6	; 0x06
     cf8:	9f 81       	ldd	r25, Y+7	; 0x07
     cfa:	81 30       	cpi	r24, 0x01	; 1
     cfc:	91 05       	cpc	r25, r1
     cfe:	a9 f0       	breq	.+42     	; 0xd2a <DIO_VoidSetPinDirection+0x60>
     d00:	2e 81       	ldd	r18, Y+6	; 0x06
     d02:	3f 81       	ldd	r19, Y+7	; 0x07
     d04:	22 30       	cpi	r18, 0x02	; 2
     d06:	31 05       	cpc	r19, r1
     d08:	2c f4       	brge	.+10     	; 0xd14 <DIO_VoidSetPinDirection+0x4a>
     d0a:	8e 81       	ldd	r24, Y+6	; 0x06
     d0c:	9f 81       	ldd	r25, Y+7	; 0x07
     d0e:	00 97       	sbiw	r24, 0x00	; 0
     d10:	01 f1       	breq	.+64     	; 0xd52 <DIO_VoidSetPinDirection+0x88>
     d12:	d2 c0       	rjmp	.+420    	; 0xeb8 <DIO_VoidSetPinDirection+0x1ee>
     d14:	2e 81       	ldd	r18, Y+6	; 0x06
     d16:	3f 81       	ldd	r19, Y+7	; 0x07
     d18:	22 30       	cpi	r18, 0x02	; 2
     d1a:	31 05       	cpc	r19, r1
     d1c:	71 f1       	breq	.+92     	; 0xd7a <DIO_VoidSetPinDirection+0xb0>
     d1e:	8e 81       	ldd	r24, Y+6	; 0x06
     d20:	9f 81       	ldd	r25, Y+7	; 0x07
     d22:	83 30       	cpi	r24, 0x03	; 3
     d24:	91 05       	cpc	r25, r1
     d26:	e9 f1       	breq	.+122    	; 0xda2 <DIO_VoidSetPinDirection+0xd8>
     d28:	c7 c0       	rjmp	.+398    	; 0xeb8 <DIO_VoidSetPinDirection+0x1ee>
	  {
	  case DIO_PORTB: SET_BIT(DDRB,Copy_u8PIN); break;
     d2a:	a7 e3       	ldi	r26, 0x37	; 55
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	e7 e3       	ldi	r30, 0x37	; 55
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	48 2f       	mov	r20, r24
     d36:	8a 81       	ldd	r24, Y+2	; 0x02
     d38:	28 2f       	mov	r18, r24
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	02 2e       	mov	r0, r18
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <DIO_VoidSetPinDirection+0x7e>
     d44:	88 0f       	add	r24, r24
     d46:	99 1f       	adc	r25, r25
     d48:	0a 94       	dec	r0
     d4a:	e2 f7       	brpl	.-8      	; 0xd44 <DIO_VoidSetPinDirection+0x7a>
     d4c:	84 2b       	or	r24, r20
     d4e:	8c 93       	st	X, r24
     d50:	b3 c0       	rjmp	.+358    	; 0xeb8 <DIO_VoidSetPinDirection+0x1ee>
	  case DIO_PORTA: SET_BIT(DDRA,Copy_u8PIN); break;
     d52:	aa e3       	ldi	r26, 0x3A	; 58
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	ea e3       	ldi	r30, 0x3A	; 58
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	48 2f       	mov	r20, r24
     d5e:	8a 81       	ldd	r24, Y+2	; 0x02
     d60:	28 2f       	mov	r18, r24
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	02 2e       	mov	r0, r18
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <DIO_VoidSetPinDirection+0xa6>
     d6c:	88 0f       	add	r24, r24
     d6e:	99 1f       	adc	r25, r25
     d70:	0a 94       	dec	r0
     d72:	e2 f7       	brpl	.-8      	; 0xd6c <DIO_VoidSetPinDirection+0xa2>
     d74:	84 2b       	or	r24, r20
     d76:	8c 93       	st	X, r24
     d78:	9f c0       	rjmp	.+318    	; 0xeb8 <DIO_VoidSetPinDirection+0x1ee>
	  case DIO_PORTC: SET_BIT(DDRC,Copy_u8PIN); break;
     d7a:	a4 e3       	ldi	r26, 0x34	; 52
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	e4 e3       	ldi	r30, 0x34	; 52
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	48 2f       	mov	r20, r24
     d86:	8a 81       	ldd	r24, Y+2	; 0x02
     d88:	28 2f       	mov	r18, r24
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	02 2e       	mov	r0, r18
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <DIO_VoidSetPinDirection+0xce>
     d94:	88 0f       	add	r24, r24
     d96:	99 1f       	adc	r25, r25
     d98:	0a 94       	dec	r0
     d9a:	e2 f7       	brpl	.-8      	; 0xd94 <DIO_VoidSetPinDirection+0xca>
     d9c:	84 2b       	or	r24, r20
     d9e:	8c 93       	st	X, r24
     da0:	8b c0       	rjmp	.+278    	; 0xeb8 <DIO_VoidSetPinDirection+0x1ee>
	  case DIO_PORTD: SET_BIT(DDRD,Copy_u8PIN); break;
     da2:	a1 e3       	ldi	r26, 0x31	; 49
     da4:	b0 e0       	ldi	r27, 0x00	; 0
     da6:	e1 e3       	ldi	r30, 0x31	; 49
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	48 2f       	mov	r20, r24
     dae:	8a 81       	ldd	r24, Y+2	; 0x02
     db0:	28 2f       	mov	r18, r24
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	02 2e       	mov	r0, r18
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <DIO_VoidSetPinDirection+0xf6>
     dbc:	88 0f       	add	r24, r24
     dbe:	99 1f       	adc	r25, r25
     dc0:	0a 94       	dec	r0
     dc2:	e2 f7       	brpl	.-8      	; 0xdbc <DIO_VoidSetPinDirection+0xf2>
     dc4:	84 2b       	or	r24, r20
     dc6:	8c 93       	st	X, r24
     dc8:	77 c0       	rjmp	.+238    	; 0xeb8 <DIO_VoidSetPinDirection+0x1ee>
	  }
  }
  else if(Copy_u8Direction== DIO_PIN_INPUT)
     dca:	8b 81       	ldd	r24, Y+3	; 0x03
     dcc:	88 23       	and	r24, r24
     dce:	09 f0       	breq	.+2      	; 0xdd2 <DIO_VoidSetPinDirection+0x108>
     dd0:	73 c0       	rjmp	.+230    	; 0xeb8 <DIO_VoidSetPinDirection+0x1ee>
  {
	  switch (Copy_u8PORT)
     dd2:	89 81       	ldd	r24, Y+1	; 0x01
     dd4:	28 2f       	mov	r18, r24
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	3d 83       	std	Y+5, r19	; 0x05
     dda:	2c 83       	std	Y+4, r18	; 0x04
     ddc:	8c 81       	ldd	r24, Y+4	; 0x04
     dde:	9d 81       	ldd	r25, Y+5	; 0x05
     de0:	81 30       	cpi	r24, 0x01	; 1
     de2:	91 05       	cpc	r25, r1
     de4:	b1 f0       	breq	.+44     	; 0xe12 <DIO_VoidSetPinDirection+0x148>
     de6:	2c 81       	ldd	r18, Y+4	; 0x04
     de8:	3d 81       	ldd	r19, Y+5	; 0x05
     dea:	22 30       	cpi	r18, 0x02	; 2
     dec:	31 05       	cpc	r19, r1
     dee:	2c f4       	brge	.+10     	; 0xdfa <DIO_VoidSetPinDirection+0x130>
     df0:	8c 81       	ldd	r24, Y+4	; 0x04
     df2:	9d 81       	ldd	r25, Y+5	; 0x05
     df4:	00 97       	sbiw	r24, 0x00	; 0
     df6:	11 f1       	breq	.+68     	; 0xe3c <DIO_VoidSetPinDirection+0x172>
     df8:	5f c0       	rjmp	.+190    	; 0xeb8 <DIO_VoidSetPinDirection+0x1ee>
     dfa:	2c 81       	ldd	r18, Y+4	; 0x04
     dfc:	3d 81       	ldd	r19, Y+5	; 0x05
     dfe:	22 30       	cpi	r18, 0x02	; 2
     e00:	31 05       	cpc	r19, r1
     e02:	89 f1       	breq	.+98     	; 0xe66 <DIO_VoidSetPinDirection+0x19c>
     e04:	8c 81       	ldd	r24, Y+4	; 0x04
     e06:	9d 81       	ldd	r25, Y+5	; 0x05
     e08:	83 30       	cpi	r24, 0x03	; 3
     e0a:	91 05       	cpc	r25, r1
     e0c:	09 f4       	brne	.+2      	; 0xe10 <DIO_VoidSetPinDirection+0x146>
     e0e:	40 c0       	rjmp	.+128    	; 0xe90 <DIO_VoidSetPinDirection+0x1c6>
     e10:	53 c0       	rjmp	.+166    	; 0xeb8 <DIO_VoidSetPinDirection+0x1ee>
	  {
	  	case DIO_PORTB: CLR_BIT(DDRB,Copy_u8PIN); break;
     e12:	a7 e3       	ldi	r26, 0x37	; 55
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	e7 e3       	ldi	r30, 0x37	; 55
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	48 2f       	mov	r20, r24
     e1e:	8a 81       	ldd	r24, Y+2	; 0x02
     e20:	28 2f       	mov	r18, r24
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	02 2e       	mov	r0, r18
     e2a:	02 c0       	rjmp	.+4      	; 0xe30 <DIO_VoidSetPinDirection+0x166>
     e2c:	88 0f       	add	r24, r24
     e2e:	99 1f       	adc	r25, r25
     e30:	0a 94       	dec	r0
     e32:	e2 f7       	brpl	.-8      	; 0xe2c <DIO_VoidSetPinDirection+0x162>
     e34:	80 95       	com	r24
     e36:	84 23       	and	r24, r20
     e38:	8c 93       	st	X, r24
     e3a:	3e c0       	rjmp	.+124    	; 0xeb8 <DIO_VoidSetPinDirection+0x1ee>
	    case DIO_PORTA: CLR_BIT(DDRA,Copy_u8PIN); break;
     e3c:	aa e3       	ldi	r26, 0x3A	; 58
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	ea e3       	ldi	r30, 0x3A	; 58
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	48 2f       	mov	r20, r24
     e48:	8a 81       	ldd	r24, Y+2	; 0x02
     e4a:	28 2f       	mov	r18, r24
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	02 2e       	mov	r0, r18
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <DIO_VoidSetPinDirection+0x190>
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	0a 94       	dec	r0
     e5c:	e2 f7       	brpl	.-8      	; 0xe56 <DIO_VoidSetPinDirection+0x18c>
     e5e:	80 95       	com	r24
     e60:	84 23       	and	r24, r20
     e62:	8c 93       	st	X, r24
     e64:	29 c0       	rjmp	.+82     	; 0xeb8 <DIO_VoidSetPinDirection+0x1ee>
	  	case DIO_PORTC: CLR_BIT(DDRC,Copy_u8PIN); break;
     e66:	a4 e3       	ldi	r26, 0x34	; 52
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	e4 e3       	ldi	r30, 0x34	; 52
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	48 2f       	mov	r20, r24
     e72:	8a 81       	ldd	r24, Y+2	; 0x02
     e74:	28 2f       	mov	r18, r24
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	02 2e       	mov	r0, r18
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <DIO_VoidSetPinDirection+0x1ba>
     e80:	88 0f       	add	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	0a 94       	dec	r0
     e86:	e2 f7       	brpl	.-8      	; 0xe80 <DIO_VoidSetPinDirection+0x1b6>
     e88:	80 95       	com	r24
     e8a:	84 23       	and	r24, r20
     e8c:	8c 93       	st	X, r24
     e8e:	14 c0       	rjmp	.+40     	; 0xeb8 <DIO_VoidSetPinDirection+0x1ee>
	  	case DIO_PORTD: CLR_BIT(DDRD,Copy_u8PIN); break;
     e90:	a1 e3       	ldi	r26, 0x31	; 49
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e1 e3       	ldi	r30, 0x31	; 49
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	48 2f       	mov	r20, r24
     e9c:	8a 81       	ldd	r24, Y+2	; 0x02
     e9e:	28 2f       	mov	r18, r24
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	02 2e       	mov	r0, r18
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <DIO_VoidSetPinDirection+0x1e4>
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	0a 94       	dec	r0
     eb0:	e2 f7       	brpl	.-8      	; 0xeaa <DIO_VoidSetPinDirection+0x1e0>
     eb2:	80 95       	com	r24
     eb4:	84 23       	and	r24, r20
     eb6:	8c 93       	st	X, r24
	  }
  }
}
     eb8:	27 96       	adiw	r28, 0x07	; 7
     eba:	0f b6       	in	r0, 0x3f	; 63
     ebc:	f8 94       	cli
     ebe:	de bf       	out	0x3e, r29	; 62
     ec0:	0f be       	out	0x3f, r0	; 63
     ec2:	cd bf       	out	0x3d, r28	; 61
     ec4:	cf 91       	pop	r28
     ec6:	df 91       	pop	r29
     ec8:	08 95       	ret

00000eca <DIO_VoidSetPinValue>:
void DIO_VoidSetPinValue(u8 Copy_u8PORT,u8 Copy_u8PIN,u8 Copy_u8Value)
{
     eca:	df 93       	push	r29
     ecc:	cf 93       	push	r28
     ece:	cd b7       	in	r28, 0x3d	; 61
     ed0:	de b7       	in	r29, 0x3e	; 62
     ed2:	27 97       	sbiw	r28, 0x07	; 7
     ed4:	0f b6       	in	r0, 0x3f	; 63
     ed6:	f8 94       	cli
     ed8:	de bf       	out	0x3e, r29	; 62
     eda:	0f be       	out	0x3f, r0	; 63
     edc:	cd bf       	out	0x3d, r28	; 61
     ede:	89 83       	std	Y+1, r24	; 0x01
     ee0:	6a 83       	std	Y+2, r22	; 0x02
     ee2:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Value== DIO_PIN_HIGH )
     ee4:	8b 81       	ldd	r24, Y+3	; 0x03
     ee6:	81 30       	cpi	r24, 0x01	; 1
     ee8:	09 f0       	breq	.+2      	; 0xeec <DIO_VoidSetPinValue+0x22>
     eea:	6f c0       	rjmp	.+222    	; 0xfca <DIO_VoidSetPinValue+0x100>
	  {
		  switch (Copy_u8PORT)
     eec:	89 81       	ldd	r24, Y+1	; 0x01
     eee:	28 2f       	mov	r18, r24
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	3f 83       	std	Y+7, r19	; 0x07
     ef4:	2e 83       	std	Y+6, r18	; 0x06
     ef6:	8e 81       	ldd	r24, Y+6	; 0x06
     ef8:	9f 81       	ldd	r25, Y+7	; 0x07
     efa:	81 30       	cpi	r24, 0x01	; 1
     efc:	91 05       	cpc	r25, r1
     efe:	a9 f0       	breq	.+42     	; 0xf2a <DIO_VoidSetPinValue+0x60>
     f00:	2e 81       	ldd	r18, Y+6	; 0x06
     f02:	3f 81       	ldd	r19, Y+7	; 0x07
     f04:	22 30       	cpi	r18, 0x02	; 2
     f06:	31 05       	cpc	r19, r1
     f08:	2c f4       	brge	.+10     	; 0xf14 <DIO_VoidSetPinValue+0x4a>
     f0a:	8e 81       	ldd	r24, Y+6	; 0x06
     f0c:	9f 81       	ldd	r25, Y+7	; 0x07
     f0e:	00 97       	sbiw	r24, 0x00	; 0
     f10:	01 f1       	breq	.+64     	; 0xf52 <DIO_VoidSetPinValue+0x88>
     f12:	d2 c0       	rjmp	.+420    	; 0x10b8 <DIO_VoidSetPinValue+0x1ee>
     f14:	2e 81       	ldd	r18, Y+6	; 0x06
     f16:	3f 81       	ldd	r19, Y+7	; 0x07
     f18:	22 30       	cpi	r18, 0x02	; 2
     f1a:	31 05       	cpc	r19, r1
     f1c:	71 f1       	breq	.+92     	; 0xf7a <DIO_VoidSetPinValue+0xb0>
     f1e:	8e 81       	ldd	r24, Y+6	; 0x06
     f20:	9f 81       	ldd	r25, Y+7	; 0x07
     f22:	83 30       	cpi	r24, 0x03	; 3
     f24:	91 05       	cpc	r25, r1
     f26:	e9 f1       	breq	.+122    	; 0xfa2 <DIO_VoidSetPinValue+0xd8>
     f28:	c7 c0       	rjmp	.+398    	; 0x10b8 <DIO_VoidSetPinValue+0x1ee>
		  {
		  	case DIO_PORTB: SET_BIT(PORTB,Copy_u8PIN); break;
     f2a:	a8 e3       	ldi	r26, 0x38	; 56
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	e8 e3       	ldi	r30, 0x38	; 56
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	48 2f       	mov	r20, r24
     f36:	8a 81       	ldd	r24, Y+2	; 0x02
     f38:	28 2f       	mov	r18, r24
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	02 2e       	mov	r0, r18
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <DIO_VoidSetPinValue+0x7e>
     f44:	88 0f       	add	r24, r24
     f46:	99 1f       	adc	r25, r25
     f48:	0a 94       	dec	r0
     f4a:	e2 f7       	brpl	.-8      	; 0xf44 <DIO_VoidSetPinValue+0x7a>
     f4c:	84 2b       	or	r24, r20
     f4e:	8c 93       	st	X, r24
     f50:	b3 c0       	rjmp	.+358    	; 0x10b8 <DIO_VoidSetPinValue+0x1ee>
		  	case DIO_PORTA: SET_BIT(PORTA,Copy_u8PIN); break;
     f52:	ab e3       	ldi	r26, 0x3B	; 59
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	eb e3       	ldi	r30, 0x3B	; 59
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	48 2f       	mov	r20, r24
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	28 2f       	mov	r18, r24
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	02 2e       	mov	r0, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <DIO_VoidSetPinValue+0xa6>
     f6c:	88 0f       	add	r24, r24
     f6e:	99 1f       	adc	r25, r25
     f70:	0a 94       	dec	r0
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <DIO_VoidSetPinValue+0xa2>
     f74:	84 2b       	or	r24, r20
     f76:	8c 93       	st	X, r24
     f78:	9f c0       	rjmp	.+318    	; 0x10b8 <DIO_VoidSetPinValue+0x1ee>
		    case DIO_PORTC: SET_BIT(PORTC,Copy_u8PIN); break;
     f7a:	a5 e3       	ldi	r26, 0x35	; 53
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e5 e3       	ldi	r30, 0x35	; 53
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	48 2f       	mov	r20, r24
     f86:	8a 81       	ldd	r24, Y+2	; 0x02
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	02 2e       	mov	r0, r18
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <DIO_VoidSetPinValue+0xce>
     f94:	88 0f       	add	r24, r24
     f96:	99 1f       	adc	r25, r25
     f98:	0a 94       	dec	r0
     f9a:	e2 f7       	brpl	.-8      	; 0xf94 <DIO_VoidSetPinValue+0xca>
     f9c:	84 2b       	or	r24, r20
     f9e:	8c 93       	st	X, r24
     fa0:	8b c0       	rjmp	.+278    	; 0x10b8 <DIO_VoidSetPinValue+0x1ee>
		  	case DIO_PORTD: SET_BIT(PORTD,Copy_u8PIN); break;
     fa2:	a2 e3       	ldi	r26, 0x32	; 50
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e2 e3       	ldi	r30, 0x32	; 50
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	48 2f       	mov	r20, r24
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	02 2e       	mov	r0, r18
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <DIO_VoidSetPinValue+0xf6>
     fbc:	88 0f       	add	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	0a 94       	dec	r0
     fc2:	e2 f7       	brpl	.-8      	; 0xfbc <DIO_VoidSetPinValue+0xf2>
     fc4:	84 2b       	or	r24, r20
     fc6:	8c 93       	st	X, r24
     fc8:	77 c0       	rjmp	.+238    	; 0x10b8 <DIO_VoidSetPinValue+0x1ee>
		  }
	  }
	  else if(Copy_u8Value== DIO_PIN_LOW)
     fca:	8b 81       	ldd	r24, Y+3	; 0x03
     fcc:	88 23       	and	r24, r24
     fce:	09 f0       	breq	.+2      	; 0xfd2 <DIO_VoidSetPinValue+0x108>
     fd0:	73 c0       	rjmp	.+230    	; 0x10b8 <DIO_VoidSetPinValue+0x1ee>
	  {
		  switch (Copy_u8PORT)
     fd2:	89 81       	ldd	r24, Y+1	; 0x01
     fd4:	28 2f       	mov	r18, r24
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	3d 83       	std	Y+5, r19	; 0x05
     fda:	2c 83       	std	Y+4, r18	; 0x04
     fdc:	8c 81       	ldd	r24, Y+4	; 0x04
     fde:	9d 81       	ldd	r25, Y+5	; 0x05
     fe0:	81 30       	cpi	r24, 0x01	; 1
     fe2:	91 05       	cpc	r25, r1
     fe4:	b1 f0       	breq	.+44     	; 0x1012 <DIO_VoidSetPinValue+0x148>
     fe6:	2c 81       	ldd	r18, Y+4	; 0x04
     fe8:	3d 81       	ldd	r19, Y+5	; 0x05
     fea:	22 30       	cpi	r18, 0x02	; 2
     fec:	31 05       	cpc	r19, r1
     fee:	2c f4       	brge	.+10     	; 0xffa <DIO_VoidSetPinValue+0x130>
     ff0:	8c 81       	ldd	r24, Y+4	; 0x04
     ff2:	9d 81       	ldd	r25, Y+5	; 0x05
     ff4:	00 97       	sbiw	r24, 0x00	; 0
     ff6:	11 f1       	breq	.+68     	; 0x103c <DIO_VoidSetPinValue+0x172>
     ff8:	5f c0       	rjmp	.+190    	; 0x10b8 <DIO_VoidSetPinValue+0x1ee>
     ffa:	2c 81       	ldd	r18, Y+4	; 0x04
     ffc:	3d 81       	ldd	r19, Y+5	; 0x05
     ffe:	22 30       	cpi	r18, 0x02	; 2
    1000:	31 05       	cpc	r19, r1
    1002:	89 f1       	breq	.+98     	; 0x1066 <DIO_VoidSetPinValue+0x19c>
    1004:	8c 81       	ldd	r24, Y+4	; 0x04
    1006:	9d 81       	ldd	r25, Y+5	; 0x05
    1008:	83 30       	cpi	r24, 0x03	; 3
    100a:	91 05       	cpc	r25, r1
    100c:	09 f4       	brne	.+2      	; 0x1010 <DIO_VoidSetPinValue+0x146>
    100e:	40 c0       	rjmp	.+128    	; 0x1090 <DIO_VoidSetPinValue+0x1c6>
    1010:	53 c0       	rjmp	.+166    	; 0x10b8 <DIO_VoidSetPinValue+0x1ee>
		  {
		  	 case DIO_PORTB: CLR_BIT(PORTB,Copy_u8PIN); break;
    1012:	a8 e3       	ldi	r26, 0x38	; 56
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	e8 e3       	ldi	r30, 0x38	; 56
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	48 2f       	mov	r20, r24
    101e:	8a 81       	ldd	r24, Y+2	; 0x02
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	02 2e       	mov	r0, r18
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <DIO_VoidSetPinValue+0x166>
    102c:	88 0f       	add	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	0a 94       	dec	r0
    1032:	e2 f7       	brpl	.-8      	; 0x102c <DIO_VoidSetPinValue+0x162>
    1034:	80 95       	com	r24
    1036:	84 23       	and	r24, r20
    1038:	8c 93       	st	X, r24
    103a:	3e c0       	rjmp	.+124    	; 0x10b8 <DIO_VoidSetPinValue+0x1ee>
		  	 case DIO_PORTA: CLR_BIT(PORTA,Copy_u8PIN); break;
    103c:	ab e3       	ldi	r26, 0x3B	; 59
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	eb e3       	ldi	r30, 0x3B	; 59
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	48 2f       	mov	r20, r24
    1048:	8a 81       	ldd	r24, Y+2	; 0x02
    104a:	28 2f       	mov	r18, r24
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	02 2e       	mov	r0, r18
    1054:	02 c0       	rjmp	.+4      	; 0x105a <DIO_VoidSetPinValue+0x190>
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	0a 94       	dec	r0
    105c:	e2 f7       	brpl	.-8      	; 0x1056 <DIO_VoidSetPinValue+0x18c>
    105e:	80 95       	com	r24
    1060:	84 23       	and	r24, r20
    1062:	8c 93       	st	X, r24
    1064:	29 c0       	rjmp	.+82     	; 0x10b8 <DIO_VoidSetPinValue+0x1ee>
		  	 case DIO_PORTC: CLR_BIT(PORTC,Copy_u8PIN); break;
    1066:	a5 e3       	ldi	r26, 0x35	; 53
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	e5 e3       	ldi	r30, 0x35	; 53
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	48 2f       	mov	r20, r24
    1072:	8a 81       	ldd	r24, Y+2	; 0x02
    1074:	28 2f       	mov	r18, r24
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	02 2e       	mov	r0, r18
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <DIO_VoidSetPinValue+0x1ba>
    1080:	88 0f       	add	r24, r24
    1082:	99 1f       	adc	r25, r25
    1084:	0a 94       	dec	r0
    1086:	e2 f7       	brpl	.-8      	; 0x1080 <DIO_VoidSetPinValue+0x1b6>
    1088:	80 95       	com	r24
    108a:	84 23       	and	r24, r20
    108c:	8c 93       	st	X, r24
    108e:	14 c0       	rjmp	.+40     	; 0x10b8 <DIO_VoidSetPinValue+0x1ee>
		  	 case DIO_PORTD: CLR_BIT(PORTD,Copy_u8PIN); break;
    1090:	a2 e3       	ldi	r26, 0x32	; 50
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	e2 e3       	ldi	r30, 0x32	; 50
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	48 2f       	mov	r20, r24
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	28 2f       	mov	r18, r24
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	02 2e       	mov	r0, r18
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <DIO_VoidSetPinValue+0x1e4>
    10aa:	88 0f       	add	r24, r24
    10ac:	99 1f       	adc	r25, r25
    10ae:	0a 94       	dec	r0
    10b0:	e2 f7       	brpl	.-8      	; 0x10aa <DIO_VoidSetPinValue+0x1e0>
    10b2:	80 95       	com	r24
    10b4:	84 23       	and	r24, r20
    10b6:	8c 93       	st	X, r24
		  }
	  }

}
    10b8:	27 96       	adiw	r28, 0x07	; 7
    10ba:	0f b6       	in	r0, 0x3f	; 63
    10bc:	f8 94       	cli
    10be:	de bf       	out	0x3e, r29	; 62
    10c0:	0f be       	out	0x3f, r0	; 63
    10c2:	cd bf       	out	0x3d, r28	; 61
    10c4:	cf 91       	pop	r28
    10c6:	df 91       	pop	r29
    10c8:	08 95       	ret

000010ca <DIO_VoidTogglePinValue>:

void DIO_VoidTogglePinValue(u8 Copy_u8PORT,u8 Copy_u8PIN)
{
    10ca:	df 93       	push	r29
    10cc:	cf 93       	push	r28
    10ce:	00 d0       	rcall	.+0      	; 0x10d0 <DIO_VoidTogglePinValue+0x6>
    10d0:	00 d0       	rcall	.+0      	; 0x10d2 <DIO_VoidTogglePinValue+0x8>
    10d2:	cd b7       	in	r28, 0x3d	; 61
    10d4:	de b7       	in	r29, 0x3e	; 62
    10d6:	89 83       	std	Y+1, r24	; 0x01
    10d8:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PORT)
    10da:	89 81       	ldd	r24, Y+1	; 0x01
    10dc:	28 2f       	mov	r18, r24
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	3c 83       	std	Y+4, r19	; 0x04
    10e2:	2b 83       	std	Y+3, r18	; 0x03
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	9c 81       	ldd	r25, Y+4	; 0x04
    10e8:	81 30       	cpi	r24, 0x01	; 1
    10ea:	91 05       	cpc	r25, r1
    10ec:	a9 f0       	breq	.+42     	; 0x1118 <DIO_VoidTogglePinValue+0x4e>
    10ee:	2b 81       	ldd	r18, Y+3	; 0x03
    10f0:	3c 81       	ldd	r19, Y+4	; 0x04
    10f2:	22 30       	cpi	r18, 0x02	; 2
    10f4:	31 05       	cpc	r19, r1
    10f6:	2c f4       	brge	.+10     	; 0x1102 <DIO_VoidTogglePinValue+0x38>
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	00 97       	sbiw	r24, 0x00	; 0
    10fe:	01 f1       	breq	.+64     	; 0x1140 <DIO_VoidTogglePinValue+0x76>
    1100:	5a c0       	rjmp	.+180    	; 0x11b6 <DIO_VoidTogglePinValue+0xec>
    1102:	2b 81       	ldd	r18, Y+3	; 0x03
    1104:	3c 81       	ldd	r19, Y+4	; 0x04
    1106:	22 30       	cpi	r18, 0x02	; 2
    1108:	31 05       	cpc	r19, r1
    110a:	71 f1       	breq	.+92     	; 0x1168 <DIO_VoidTogglePinValue+0x9e>
    110c:	8b 81       	ldd	r24, Y+3	; 0x03
    110e:	9c 81       	ldd	r25, Y+4	; 0x04
    1110:	83 30       	cpi	r24, 0x03	; 3
    1112:	91 05       	cpc	r25, r1
    1114:	e9 f1       	breq	.+122    	; 0x1190 <DIO_VoidTogglePinValue+0xc6>
    1116:	4f c0       	rjmp	.+158    	; 0x11b6 <DIO_VoidTogglePinValue+0xec>
    {
     case DIO_PORTB: TOG_BIT(PORTB,Copy_u8PIN); break;
    1118:	a8 e3       	ldi	r26, 0x38	; 56
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	e8 e3       	ldi	r30, 0x38	; 56
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	48 2f       	mov	r20, r24
    1124:	8a 81       	ldd	r24, Y+2	; 0x02
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	02 2e       	mov	r0, r18
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <DIO_VoidTogglePinValue+0x6c>
    1132:	88 0f       	add	r24, r24
    1134:	99 1f       	adc	r25, r25
    1136:	0a 94       	dec	r0
    1138:	e2 f7       	brpl	.-8      	; 0x1132 <DIO_VoidTogglePinValue+0x68>
    113a:	84 27       	eor	r24, r20
    113c:	8c 93       	st	X, r24
    113e:	3b c0       	rjmp	.+118    	; 0x11b6 <DIO_VoidTogglePinValue+0xec>
	 case DIO_PORTA: TOG_BIT(PORTA,Copy_u8PIN); break;
    1140:	ab e3       	ldi	r26, 0x3B	; 59
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	eb e3       	ldi	r30, 0x3B	; 59
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	48 2f       	mov	r20, r24
    114c:	8a 81       	ldd	r24, Y+2	; 0x02
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	02 2e       	mov	r0, r18
    1158:	02 c0       	rjmp	.+4      	; 0x115e <DIO_VoidTogglePinValue+0x94>
    115a:	88 0f       	add	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	0a 94       	dec	r0
    1160:	e2 f7       	brpl	.-8      	; 0x115a <DIO_VoidTogglePinValue+0x90>
    1162:	84 27       	eor	r24, r20
    1164:	8c 93       	st	X, r24
    1166:	27 c0       	rjmp	.+78     	; 0x11b6 <DIO_VoidTogglePinValue+0xec>
	 case DIO_PORTC: TOG_BIT(PORTC,Copy_u8PIN); break;
    1168:	a5 e3       	ldi	r26, 0x35	; 53
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	e5 e3       	ldi	r30, 0x35	; 53
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	48 2f       	mov	r20, r24
    1174:	8a 81       	ldd	r24, Y+2	; 0x02
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	02 2e       	mov	r0, r18
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <DIO_VoidTogglePinValue+0xbc>
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	0a 94       	dec	r0
    1188:	e2 f7       	brpl	.-8      	; 0x1182 <DIO_VoidTogglePinValue+0xb8>
    118a:	84 27       	eor	r24, r20
    118c:	8c 93       	st	X, r24
    118e:	13 c0       	rjmp	.+38     	; 0x11b6 <DIO_VoidTogglePinValue+0xec>
	 case DIO_PORTD: TOG_BIT(PORTD,Copy_u8PIN); break;
    1190:	a2 e3       	ldi	r26, 0x32	; 50
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	e2 e3       	ldi	r30, 0x32	; 50
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	48 2f       	mov	r20, r24
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	28 2f       	mov	r18, r24
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	02 2e       	mov	r0, r18
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <DIO_VoidTogglePinValue+0xe4>
    11aa:	88 0f       	add	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	0a 94       	dec	r0
    11b0:	e2 f7       	brpl	.-8      	; 0x11aa <DIO_VoidTogglePinValue+0xe0>
    11b2:	84 27       	eor	r24, r20
    11b4:	8c 93       	st	X, r24
	}
}
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	cf 91       	pop	r28
    11c0:	df 91       	pop	r29
    11c2:	08 95       	ret

000011c4 <DIO_VoidGetPinValue>:

u8 DIO_VoidGetPinValue(u8 Copy_u8PORT,u8 Copy_u8PIN)
{
    11c4:	df 93       	push	r29
    11c6:	cf 93       	push	r28
    11c8:	00 d0       	rcall	.+0      	; 0x11ca <DIO_VoidGetPinValue+0x6>
    11ca:	00 d0       	rcall	.+0      	; 0x11cc <DIO_VoidGetPinValue+0x8>
    11cc:	0f 92       	push	r0
    11ce:	cd b7       	in	r28, 0x3d	; 61
    11d0:	de b7       	in	r29, 0x3e	; 62
    11d2:	8a 83       	std	Y+2, r24	; 0x02
    11d4:	6b 83       	std	Y+3, r22	; 0x03
	u8 PIN_u8Value=0;
    11d6:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8PORT)
    11d8:	8a 81       	ldd	r24, Y+2	; 0x02
    11da:	28 2f       	mov	r18, r24
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	3d 83       	std	Y+5, r19	; 0x05
    11e0:	2c 83       	std	Y+4, r18	; 0x04
    11e2:	4c 81       	ldd	r20, Y+4	; 0x04
    11e4:	5d 81       	ldd	r21, Y+5	; 0x05
    11e6:	41 30       	cpi	r20, 0x01	; 1
    11e8:	51 05       	cpc	r21, r1
    11ea:	c1 f0       	breq	.+48     	; 0x121c <DIO_VoidGetPinValue+0x58>
    11ec:	8c 81       	ldd	r24, Y+4	; 0x04
    11ee:	9d 81       	ldd	r25, Y+5	; 0x05
    11f0:	82 30       	cpi	r24, 0x02	; 2
    11f2:	91 05       	cpc	r25, r1
    11f4:	34 f4       	brge	.+12     	; 0x1202 <DIO_VoidGetPinValue+0x3e>
    11f6:	2c 81       	ldd	r18, Y+4	; 0x04
    11f8:	3d 81       	ldd	r19, Y+5	; 0x05
    11fa:	21 15       	cp	r18, r1
    11fc:	31 05       	cpc	r19, r1
    11fe:	61 f1       	breq	.+88     	; 0x1258 <DIO_VoidGetPinValue+0x94>
    1200:	84 c0       	rjmp	.+264    	; 0x130a <DIO_VoidGetPinValue+0x146>
    1202:	4c 81       	ldd	r20, Y+4	; 0x04
    1204:	5d 81       	ldd	r21, Y+5	; 0x05
    1206:	42 30       	cpi	r20, 0x02	; 2
    1208:	51 05       	cpc	r21, r1
    120a:	09 f4       	brne	.+2      	; 0x120e <DIO_VoidGetPinValue+0x4a>
    120c:	43 c0       	rjmp	.+134    	; 0x1294 <DIO_VoidGetPinValue+0xd0>
    120e:	8c 81       	ldd	r24, Y+4	; 0x04
    1210:	9d 81       	ldd	r25, Y+5	; 0x05
    1212:	83 30       	cpi	r24, 0x03	; 3
    1214:	91 05       	cpc	r25, r1
    1216:	09 f4       	brne	.+2      	; 0x121a <DIO_VoidGetPinValue+0x56>
    1218:	5b c0       	rjmp	.+182    	; 0x12d0 <DIO_VoidGetPinValue+0x10c>
    121a:	77 c0       	rjmp	.+238    	; 0x130a <DIO_VoidGetPinValue+0x146>
	{
	   case DIO_PORTB: PIN_u8Value=GET_BIT(PINB,Copy_u8PIN); break;
    121c:	e6 e3       	ldi	r30, 0x36	; 54
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	48 2f       	mov	r20, r24
    1224:	50 e0       	ldi	r21, 0x00	; 0
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	28 2f       	mov	r18, r24
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <DIO_VoidGetPinValue+0x72>
    1232:	88 0f       	add	r24, r24
    1234:	99 1f       	adc	r25, r25
    1236:	2a 95       	dec	r18
    1238:	e2 f7       	brpl	.-8      	; 0x1232 <DIO_VoidGetPinValue+0x6e>
    123a:	9a 01       	movw	r18, r20
    123c:	28 23       	and	r18, r24
    123e:	39 23       	and	r19, r25
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	88 2f       	mov	r24, r24
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	a9 01       	movw	r20, r18
    1248:	02 c0       	rjmp	.+4      	; 0x124e <DIO_VoidGetPinValue+0x8a>
    124a:	55 95       	asr	r21
    124c:	47 95       	ror	r20
    124e:	8a 95       	dec	r24
    1250:	e2 f7       	brpl	.-8      	; 0x124a <DIO_VoidGetPinValue+0x86>
    1252:	ca 01       	movw	r24, r20
    1254:	89 83       	std	Y+1, r24	; 0x01
    1256:	59 c0       	rjmp	.+178    	; 0x130a <DIO_VoidGetPinValue+0x146>
	   case DIO_PORTA: PIN_u8Value=GET_BIT(PINA,Copy_u8PIN); break;
    1258:	e9 e3       	ldi	r30, 0x39	; 57
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	48 2f       	mov	r20, r24
    1260:	50 e0       	ldi	r21, 0x00	; 0
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <DIO_VoidGetPinValue+0xae>
    126e:	88 0f       	add	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	2a 95       	dec	r18
    1274:	e2 f7       	brpl	.-8      	; 0x126e <DIO_VoidGetPinValue+0xaa>
    1276:	9a 01       	movw	r18, r20
    1278:	28 23       	and	r18, r24
    127a:	39 23       	and	r19, r25
    127c:	8b 81       	ldd	r24, Y+3	; 0x03
    127e:	88 2f       	mov	r24, r24
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	a9 01       	movw	r20, r18
    1284:	02 c0       	rjmp	.+4      	; 0x128a <DIO_VoidGetPinValue+0xc6>
    1286:	55 95       	asr	r21
    1288:	47 95       	ror	r20
    128a:	8a 95       	dec	r24
    128c:	e2 f7       	brpl	.-8      	; 0x1286 <DIO_VoidGetPinValue+0xc2>
    128e:	ca 01       	movw	r24, r20
    1290:	89 83       	std	Y+1, r24	; 0x01
    1292:	3b c0       	rjmp	.+118    	; 0x130a <DIO_VoidGetPinValue+0x146>
	   case DIO_PORTC: PIN_u8Value=GET_BIT(PINC,Copy_u8PIN); break;
    1294:	e3 e3       	ldi	r30, 0x33	; 51
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	48 2f       	mov	r20, r24
    129c:	50 e0       	ldi	r21, 0x00	; 0
    129e:	8b 81       	ldd	r24, Y+3	; 0x03
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <DIO_VoidGetPinValue+0xea>
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	2a 95       	dec	r18
    12b0:	e2 f7       	brpl	.-8      	; 0x12aa <DIO_VoidGetPinValue+0xe6>
    12b2:	9a 01       	movw	r18, r20
    12b4:	28 23       	and	r18, r24
    12b6:	39 23       	and	r19, r25
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	88 2f       	mov	r24, r24
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	a9 01       	movw	r20, r18
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <DIO_VoidGetPinValue+0x102>
    12c2:	55 95       	asr	r21
    12c4:	47 95       	ror	r20
    12c6:	8a 95       	dec	r24
    12c8:	e2 f7       	brpl	.-8      	; 0x12c2 <DIO_VoidGetPinValue+0xfe>
    12ca:	ca 01       	movw	r24, r20
    12cc:	89 83       	std	Y+1, r24	; 0x01
    12ce:	1d c0       	rjmp	.+58     	; 0x130a <DIO_VoidGetPinValue+0x146>
	   case DIO_PORTD: PIN_u8Value=GET_BIT(PIND,Copy_u8PIN); break;
    12d0:	e0 e3       	ldi	r30, 0x30	; 48
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	48 2f       	mov	r20, r24
    12d8:	50 e0       	ldi	r21, 0x00	; 0
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	28 2f       	mov	r18, r24
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <DIO_VoidGetPinValue+0x126>
    12e6:	88 0f       	add	r24, r24
    12e8:	99 1f       	adc	r25, r25
    12ea:	2a 95       	dec	r18
    12ec:	e2 f7       	brpl	.-8      	; 0x12e6 <DIO_VoidGetPinValue+0x122>
    12ee:	9a 01       	movw	r18, r20
    12f0:	28 23       	and	r18, r24
    12f2:	39 23       	and	r19, r25
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	88 2f       	mov	r24, r24
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	a9 01       	movw	r20, r18
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <DIO_VoidGetPinValue+0x13e>
    12fe:	55 95       	asr	r21
    1300:	47 95       	ror	r20
    1302:	8a 95       	dec	r24
    1304:	e2 f7       	brpl	.-8      	; 0x12fe <DIO_VoidGetPinValue+0x13a>
    1306:	ca 01       	movw	r24, r20
    1308:	89 83       	std	Y+1, r24	; 0x01
    }
	return PIN_u8Value;
    130a:	89 81       	ldd	r24, Y+1	; 0x01
}
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	cf 91       	pop	r28
    1318:	df 91       	pop	r29
    131a:	08 95       	ret

0000131c <DIO_VoidSetPortDirection>:

void DIO_VoidSetPortDirection(u8 Copy_u8PORT,u8 Copy_u8Direction)
{
    131c:	df 93       	push	r29
    131e:	cf 93       	push	r28
    1320:	00 d0       	rcall	.+0      	; 0x1322 <DIO_VoidSetPortDirection+0x6>
    1322:	00 d0       	rcall	.+0      	; 0x1324 <DIO_VoidSetPortDirection+0x8>
    1324:	cd b7       	in	r28, 0x3d	; 61
    1326:	de b7       	in	r29, 0x3e	; 62
    1328:	89 83       	std	Y+1, r24	; 0x01
    132a:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PORT)
    132c:	89 81       	ldd	r24, Y+1	; 0x01
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	3c 83       	std	Y+4, r19	; 0x04
    1334:	2b 83       	std	Y+3, r18	; 0x03
    1336:	8b 81       	ldd	r24, Y+3	; 0x03
    1338:	9c 81       	ldd	r25, Y+4	; 0x04
    133a:	81 30       	cpi	r24, 0x01	; 1
    133c:	91 05       	cpc	r25, r1
    133e:	a9 f0       	breq	.+42     	; 0x136a <DIO_VoidSetPortDirection+0x4e>
    1340:	2b 81       	ldd	r18, Y+3	; 0x03
    1342:	3c 81       	ldd	r19, Y+4	; 0x04
    1344:	22 30       	cpi	r18, 0x02	; 2
    1346:	31 05       	cpc	r19, r1
    1348:	2c f4       	brge	.+10     	; 0x1354 <DIO_VoidSetPortDirection+0x38>
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	9c 81       	ldd	r25, Y+4	; 0x04
    134e:	00 97       	sbiw	r24, 0x00	; 0
    1350:	89 f0       	breq	.+34     	; 0x1374 <DIO_VoidSetPortDirection+0x58>
    1352:	1e c0       	rjmp	.+60     	; 0x1390 <DIO_VoidSetPortDirection+0x74>
    1354:	2b 81       	ldd	r18, Y+3	; 0x03
    1356:	3c 81       	ldd	r19, Y+4	; 0x04
    1358:	22 30       	cpi	r18, 0x02	; 2
    135a:	31 05       	cpc	r19, r1
    135c:	81 f0       	breq	.+32     	; 0x137e <DIO_VoidSetPortDirection+0x62>
    135e:	8b 81       	ldd	r24, Y+3	; 0x03
    1360:	9c 81       	ldd	r25, Y+4	; 0x04
    1362:	83 30       	cpi	r24, 0x03	; 3
    1364:	91 05       	cpc	r25, r1
    1366:	81 f0       	breq	.+32     	; 0x1388 <DIO_VoidSetPortDirection+0x6c>
    1368:	13 c0       	rjmp	.+38     	; 0x1390 <DIO_VoidSetPortDirection+0x74>
		{
		   case DIO_PORTB: DDRB=Copy_u8Direction; break;
    136a:	e7 e3       	ldi	r30, 0x37	; 55
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	80 83       	st	Z, r24
    1372:	0e c0       	rjmp	.+28     	; 0x1390 <DIO_VoidSetPortDirection+0x74>
		   case DIO_PORTA: DDRA=Copy_u8Direction; break;
    1374:	ea e3       	ldi	r30, 0x3A	; 58
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	8a 81       	ldd	r24, Y+2	; 0x02
    137a:	80 83       	st	Z, r24
    137c:	09 c0       	rjmp	.+18     	; 0x1390 <DIO_VoidSetPortDirection+0x74>
		   case DIO_PORTC: DDRC=Copy_u8Direction; break;
    137e:	e4 e3       	ldi	r30, 0x34	; 52
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	8a 81       	ldd	r24, Y+2	; 0x02
    1384:	80 83       	st	Z, r24
    1386:	04 c0       	rjmp	.+8      	; 0x1390 <DIO_VoidSetPortDirection+0x74>
		   case DIO_PORTD: DDRD=Copy_u8Direction; break;
    1388:	e1 e3       	ldi	r30, 0x31	; 49
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	8a 81       	ldd	r24, Y+2	; 0x02
    138e:	80 83       	st	Z, r24
	    }

}
    1390:	0f 90       	pop	r0
    1392:	0f 90       	pop	r0
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
    1398:	cf 91       	pop	r28
    139a:	df 91       	pop	r29
    139c:	08 95       	ret

0000139e <DIO_VoidSetPortValue>:
void DIO_VoidSetPortValue(u8 Copy_u8PORT,u8 Copy_u8Value)
{
    139e:	df 93       	push	r29
    13a0:	cf 93       	push	r28
    13a2:	00 d0       	rcall	.+0      	; 0x13a4 <DIO_VoidSetPortValue+0x6>
    13a4:	00 d0       	rcall	.+0      	; 0x13a6 <DIO_VoidSetPortValue+0x8>
    13a6:	cd b7       	in	r28, 0x3d	; 61
    13a8:	de b7       	in	r29, 0x3e	; 62
    13aa:	89 83       	std	Y+1, r24	; 0x01
    13ac:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PORT)
    13ae:	89 81       	ldd	r24, Y+1	; 0x01
    13b0:	28 2f       	mov	r18, r24
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	3c 83       	std	Y+4, r19	; 0x04
    13b6:	2b 83       	std	Y+3, r18	; 0x03
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	9c 81       	ldd	r25, Y+4	; 0x04
    13bc:	81 30       	cpi	r24, 0x01	; 1
    13be:	91 05       	cpc	r25, r1
    13c0:	a9 f0       	breq	.+42     	; 0x13ec <DIO_VoidSetPortValue+0x4e>
    13c2:	2b 81       	ldd	r18, Y+3	; 0x03
    13c4:	3c 81       	ldd	r19, Y+4	; 0x04
    13c6:	22 30       	cpi	r18, 0x02	; 2
    13c8:	31 05       	cpc	r19, r1
    13ca:	2c f4       	brge	.+10     	; 0x13d6 <DIO_VoidSetPortValue+0x38>
    13cc:	8b 81       	ldd	r24, Y+3	; 0x03
    13ce:	9c 81       	ldd	r25, Y+4	; 0x04
    13d0:	00 97       	sbiw	r24, 0x00	; 0
    13d2:	89 f0       	breq	.+34     	; 0x13f6 <DIO_VoidSetPortValue+0x58>
    13d4:	1e c0       	rjmp	.+60     	; 0x1412 <DIO_VoidSetPortValue+0x74>
    13d6:	2b 81       	ldd	r18, Y+3	; 0x03
    13d8:	3c 81       	ldd	r19, Y+4	; 0x04
    13da:	22 30       	cpi	r18, 0x02	; 2
    13dc:	31 05       	cpc	r19, r1
    13de:	81 f0       	breq	.+32     	; 0x1400 <DIO_VoidSetPortValue+0x62>
    13e0:	8b 81       	ldd	r24, Y+3	; 0x03
    13e2:	9c 81       	ldd	r25, Y+4	; 0x04
    13e4:	83 30       	cpi	r24, 0x03	; 3
    13e6:	91 05       	cpc	r25, r1
    13e8:	81 f0       	breq	.+32     	; 0x140a <DIO_VoidSetPortValue+0x6c>
    13ea:	13 c0       	rjmp	.+38     	; 0x1412 <DIO_VoidSetPortValue+0x74>
		{
			   case DIO_PORTB: PORTB=Copy_u8Value; break;
    13ec:	e8 e3       	ldi	r30, 0x38	; 56
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	80 83       	st	Z, r24
    13f4:	0e c0       	rjmp	.+28     	; 0x1412 <DIO_VoidSetPortValue+0x74>
			   case DIO_PORTA: PORTA=Copy_u8Value; break;
    13f6:	eb e3       	ldi	r30, 0x3B	; 59
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	8a 81       	ldd	r24, Y+2	; 0x02
    13fc:	80 83       	st	Z, r24
    13fe:	09 c0       	rjmp	.+18     	; 0x1412 <DIO_VoidSetPortValue+0x74>
			   case DIO_PORTC: PORTC=Copy_u8Value; break;
    1400:	e5 e3       	ldi	r30, 0x35	; 53
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	8a 81       	ldd	r24, Y+2	; 0x02
    1406:	80 83       	st	Z, r24
    1408:	04 c0       	rjmp	.+8      	; 0x1412 <DIO_VoidSetPortValue+0x74>
			   case DIO_PORTD: PORTD=Copy_u8Value; break;
    140a:	e2 e3       	ldi	r30, 0x32	; 50
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	8a 81       	ldd	r24, Y+2	; 0x02
    1410:	80 83       	st	Z, r24
	    }
}
    1412:	0f 90       	pop	r0
    1414:	0f 90       	pop	r0
    1416:	0f 90       	pop	r0
    1418:	0f 90       	pop	r0
    141a:	cf 91       	pop	r28
    141c:	df 91       	pop	r29
    141e:	08 95       	ret

00001420 <DIO_VoidTogglePortValue>:
void DIO_VoidTogglePortValue(u8 Copy_u8PORT)
{
    1420:	df 93       	push	r29
    1422:	cf 93       	push	r28
    1424:	00 d0       	rcall	.+0      	; 0x1426 <DIO_VoidTogglePortValue+0x6>
    1426:	0f 92       	push	r0
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
    142c:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8PORT)
    142e:	89 81       	ldd	r24, Y+1	; 0x01
    1430:	28 2f       	mov	r18, r24
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	3b 83       	std	Y+3, r19	; 0x03
    1436:	2a 83       	std	Y+2, r18	; 0x02
    1438:	8a 81       	ldd	r24, Y+2	; 0x02
    143a:	9b 81       	ldd	r25, Y+3	; 0x03
    143c:	81 30       	cpi	r24, 0x01	; 1
    143e:	91 05       	cpc	r25, r1
    1440:	a9 f0       	breq	.+42     	; 0x146c <DIO_VoidTogglePortValue+0x4c>
    1442:	2a 81       	ldd	r18, Y+2	; 0x02
    1444:	3b 81       	ldd	r19, Y+3	; 0x03
    1446:	22 30       	cpi	r18, 0x02	; 2
    1448:	31 05       	cpc	r19, r1
    144a:	2c f4       	brge	.+10     	; 0x1456 <DIO_VoidTogglePortValue+0x36>
    144c:	8a 81       	ldd	r24, Y+2	; 0x02
    144e:	9b 81       	ldd	r25, Y+3	; 0x03
    1450:	00 97       	sbiw	r24, 0x00	; 0
    1452:	a1 f0       	breq	.+40     	; 0x147c <DIO_VoidTogglePortValue+0x5c>
    1454:	2a c0       	rjmp	.+84     	; 0x14aa <DIO_VoidTogglePortValue+0x8a>
    1456:	2a 81       	ldd	r18, Y+2	; 0x02
    1458:	3b 81       	ldd	r19, Y+3	; 0x03
    145a:	22 30       	cpi	r18, 0x02	; 2
    145c:	31 05       	cpc	r19, r1
    145e:	b1 f0       	breq	.+44     	; 0x148c <DIO_VoidTogglePortValue+0x6c>
    1460:	8a 81       	ldd	r24, Y+2	; 0x02
    1462:	9b 81       	ldd	r25, Y+3	; 0x03
    1464:	83 30       	cpi	r24, 0x03	; 3
    1466:	91 05       	cpc	r25, r1
    1468:	c9 f0       	breq	.+50     	; 0x149c <DIO_VoidTogglePortValue+0x7c>
    146a:	1f c0       	rjmp	.+62     	; 0x14aa <DIO_VoidTogglePortValue+0x8a>
			{
				   case DIO_PORTB: PORTB=~PORTB; break;
    146c:	a8 e3       	ldi	r26, 0x38	; 56
    146e:	b0 e0       	ldi	r27, 0x00	; 0
    1470:	e8 e3       	ldi	r30, 0x38	; 56
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	80 95       	com	r24
    1478:	8c 93       	st	X, r24
    147a:	17 c0       	rjmp	.+46     	; 0x14aa <DIO_VoidTogglePortValue+0x8a>
				   case DIO_PORTA: PORTA=~PORTA; break;
    147c:	ab e3       	ldi	r26, 0x3B	; 59
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	eb e3       	ldi	r30, 0x3B	; 59
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	80 95       	com	r24
    1488:	8c 93       	st	X, r24
    148a:	0f c0       	rjmp	.+30     	; 0x14aa <DIO_VoidTogglePortValue+0x8a>
				   case DIO_PORTC: PORTC=~PORTC; break;
    148c:	a5 e3       	ldi	r26, 0x35	; 53
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	e5 e3       	ldi	r30, 0x35	; 53
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	80 95       	com	r24
    1498:	8c 93       	st	X, r24
    149a:	07 c0       	rjmp	.+14     	; 0x14aa <DIO_VoidTogglePortValue+0x8a>
				   case DIO_PORTD: PORTD=~PORTD; break;
    149c:	a2 e3       	ldi	r26, 0x32	; 50
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	e2 e3       	ldi	r30, 0x32	; 50
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	80 95       	com	r24
    14a8:	8c 93       	st	X, r24
		    }
}
    14aa:	0f 90       	pop	r0
    14ac:	0f 90       	pop	r0
    14ae:	0f 90       	pop	r0
    14b0:	cf 91       	pop	r28
    14b2:	df 91       	pop	r29
    14b4:	08 95       	ret

000014b6 <DIO_VoidGetPortValue>:
u8   DIO_VoidGetPortValue(u8 Copy_u8PORT)
{
    14b6:	df 93       	push	r29
    14b8:	cf 93       	push	r28
    14ba:	00 d0       	rcall	.+0      	; 0x14bc <DIO_VoidGetPortValue+0x6>
    14bc:	00 d0       	rcall	.+0      	; 0x14be <DIO_VoidGetPortValue+0x8>
    14be:	cd b7       	in	r28, 0x3d	; 61
    14c0:	de b7       	in	r29, 0x3e	; 62
    14c2:	8a 83       	std	Y+2, r24	; 0x02
	u8 PIN_u8Value=0;
    14c4:	19 82       	std	Y+1, r1	; 0x01
		switch (Copy_u8PORT)
    14c6:	8a 81       	ldd	r24, Y+2	; 0x02
    14c8:	28 2f       	mov	r18, r24
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	3c 83       	std	Y+4, r19	; 0x04
    14ce:	2b 83       	std	Y+3, r18	; 0x03
    14d0:	8b 81       	ldd	r24, Y+3	; 0x03
    14d2:	9c 81       	ldd	r25, Y+4	; 0x04
    14d4:	81 30       	cpi	r24, 0x01	; 1
    14d6:	91 05       	cpc	r25, r1
    14d8:	a9 f0       	breq	.+42     	; 0x1504 <DIO_VoidGetPortValue+0x4e>
    14da:	2b 81       	ldd	r18, Y+3	; 0x03
    14dc:	3c 81       	ldd	r19, Y+4	; 0x04
    14de:	22 30       	cpi	r18, 0x02	; 2
    14e0:	31 05       	cpc	r19, r1
    14e2:	2c f4       	brge	.+10     	; 0x14ee <DIO_VoidGetPortValue+0x38>
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
    14e6:	9c 81       	ldd	r25, Y+4	; 0x04
    14e8:	00 97       	sbiw	r24, 0x00	; 0
    14ea:	89 f0       	breq	.+34     	; 0x150e <DIO_VoidGetPortValue+0x58>
    14ec:	1e c0       	rjmp	.+60     	; 0x152a <DIO_VoidGetPortValue+0x74>
    14ee:	2b 81       	ldd	r18, Y+3	; 0x03
    14f0:	3c 81       	ldd	r19, Y+4	; 0x04
    14f2:	22 30       	cpi	r18, 0x02	; 2
    14f4:	31 05       	cpc	r19, r1
    14f6:	81 f0       	breq	.+32     	; 0x1518 <DIO_VoidGetPortValue+0x62>
    14f8:	8b 81       	ldd	r24, Y+3	; 0x03
    14fa:	9c 81       	ldd	r25, Y+4	; 0x04
    14fc:	83 30       	cpi	r24, 0x03	; 3
    14fe:	91 05       	cpc	r25, r1
    1500:	81 f0       	breq	.+32     	; 0x1522 <DIO_VoidGetPortValue+0x6c>
    1502:	13 c0       	rjmp	.+38     	; 0x152a <DIO_VoidGetPortValue+0x74>
		{
		   case DIO_PORTB: PIN_u8Value=PINB; break;
    1504:	e6 e3       	ldi	r30, 0x36	; 54
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	89 83       	std	Y+1, r24	; 0x01
    150c:	0e c0       	rjmp	.+28     	; 0x152a <DIO_VoidGetPortValue+0x74>
		   case DIO_PORTA: PIN_u8Value=PINA; break;
    150e:	e9 e3       	ldi	r30, 0x39	; 57
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	89 83       	std	Y+1, r24	; 0x01
    1516:	09 c0       	rjmp	.+18     	; 0x152a <DIO_VoidGetPortValue+0x74>
		   case DIO_PORTC: PIN_u8Value=PINC; break;
    1518:	e3 e3       	ldi	r30, 0x33	; 51
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	89 83       	std	Y+1, r24	; 0x01
    1520:	04 c0       	rjmp	.+8      	; 0x152a <DIO_VoidGetPortValue+0x74>
		   case DIO_PORTD: PIN_u8Value=PIND; break;
    1522:	e0 e3       	ldi	r30, 0x30	; 48
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	89 83       	std	Y+1, r24	; 0x01
	    }
		return PIN_u8Value;
    152a:	89 81       	ldd	r24, Y+1	; 0x01
}
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	cf 91       	pop	r28
    1536:	df 91       	pop	r29
    1538:	08 95       	ret

0000153a <main>:
void TwoLedsDivergingEvery250ms();
void PingPongEffectEvery250ms();
void Incrementing_SnakeEffect_Every250();
void TwoLedsConvergeDivergeEvery250ms ();

int main(void){
    153a:	df 93       	push	r29
    153c:	cf 93       	push	r28
    153e:	00 d0       	rcall	.+0      	; 0x1540 <main+0x6>
    1540:	00 d0       	rcall	.+0      	; 0x1542 <main+0x8>
    1542:	0f 92       	push	r0
    1544:	cd b7       	in	r28, 0x3d	; 61
    1546:	de b7       	in	r29, 0x3e	; 62

	for(u8 i=0;i<8;i++)
    1548:	1b 82       	std	Y+3, r1	; 0x03
    154a:	13 c0       	rjmp	.+38     	; 0x1572 <main+0x38>
	{
		LED_voidInit(Leds[i]);
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	28 2f       	mov	r18, r24
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	c9 01       	movw	r24, r18
    1554:	88 0f       	add	r24, r24
    1556:	99 1f       	adc	r25, r25
    1558:	82 0f       	add	r24, r18
    155a:	93 1f       	adc	r25, r19
    155c:	fc 01       	movw	r30, r24
    155e:	e8 59       	subi	r30, 0x98	; 152
    1560:	ff 4f       	sbci	r31, 0xFF	; 255
    1562:	60 81       	ld	r22, Z
    1564:	71 81       	ldd	r23, Z+1	; 0x01
    1566:	82 81       	ldd	r24, Z+2	; 0x02
    1568:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <LED_voidInit>
void Incrementing_SnakeEffect_Every250();
void TwoLedsConvergeDivergeEvery250ms ();

int main(void){

	for(u8 i=0;i<8;i++)
    156c:	8b 81       	ldd	r24, Y+3	; 0x03
    156e:	8f 5f       	subi	r24, 0xFF	; 255
    1570:	8b 83       	std	Y+3, r24	; 0x03
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	88 30       	cpi	r24, 0x08	; 8
    1576:	50 f3       	brcs	.-44     	; 0x154c <main+0x12>
	{
		LED_voidInit(Leds[i]);
	}

	for(u8 i=0;i<8;i++)
    1578:	1a 82       	std	Y+2, r1	; 0x02
    157a:	13 c0       	rjmp	.+38     	; 0x15a2 <main+0x68>
		{
			SW_voidInit    (SW[i]);
    157c:	8a 81       	ldd	r24, Y+2	; 0x02
    157e:	28 2f       	mov	r18, r24
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	c9 01       	movw	r24, r18
    1584:	88 0f       	add	r24, r24
    1586:	99 1f       	adc	r25, r25
    1588:	82 0f       	add	r24, r18
    158a:	93 1f       	adc	r25, r19
    158c:	fc 01       	movw	r30, r24
    158e:	e0 58       	subi	r30, 0x80	; 128
    1590:	ff 4f       	sbci	r31, 0xFF	; 255
    1592:	60 81       	ld	r22, Z
    1594:	71 81       	ldd	r23, Z+1	; 0x01
    1596:	82 81       	ldd	r24, Z+2	; 0x02
    1598:	0e 94 9b 05 	call	0xb36	; 0xb36 <SW_voidInit>
	for(u8 i=0;i<8;i++)
	{
		LED_voidInit(Leds[i]);
	}

	for(u8 i=0;i<8;i++)
    159c:	8a 81       	ldd	r24, Y+2	; 0x02
    159e:	8f 5f       	subi	r24, 0xFF	; 255
    15a0:	8a 83       	std	Y+2, r24	; 0x02
    15a2:	8a 81       	ldd	r24, Y+2	; 0x02
    15a4:	88 30       	cpi	r24, 0x08	; 8
    15a6:	50 f3       	brcs	.-44     	; 0x157c <main+0x42>


	while(1)
	{

		for(u8 i=0;i<8;i++)
    15a8:	19 82       	std	Y+1, r1	; 0x01
    15aa:	60 c0       	rjmp	.+192    	; 0x166c <main+0x132>
		{
			if (SW_u8GetPressed (SW[i])) {
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
    15ae:	28 2f       	mov	r18, r24
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	c9 01       	movw	r24, r18
    15b4:	88 0f       	add	r24, r24
    15b6:	99 1f       	adc	r25, r25
    15b8:	82 0f       	add	r24, r18
    15ba:	93 1f       	adc	r25, r19
    15bc:	fc 01       	movw	r30, r24
    15be:	e0 58       	subi	r30, 0x80	; 128
    15c0:	ff 4f       	sbci	r31, 0xFF	; 255
    15c2:	60 81       	ld	r22, Z
    15c4:	71 81       	ldd	r23, Z+1	; 0x01
    15c6:	82 81       	ldd	r24, Z+2	; 0x02
    15c8:	0e 94 b9 05 	call	0xb72	; 0xb72 <SW_u8GetPressed>
    15cc:	88 23       	and	r24, r24
    15ce:	09 f4       	brne	.+2      	; 0x15d2 <main+0x98>
    15d0:	4a c0       	rjmp	.+148    	; 0x1666 <main+0x12c>
				switch(i){
    15d2:	89 81       	ldd	r24, Y+1	; 0x01
    15d4:	28 2f       	mov	r18, r24
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	3d 83       	std	Y+5, r19	; 0x05
    15da:	2c 83       	std	Y+4, r18	; 0x04
    15dc:	8c 81       	ldd	r24, Y+4	; 0x04
    15de:	9d 81       	ldd	r25, Y+5	; 0x05
    15e0:	83 30       	cpi	r24, 0x03	; 3
    15e2:	91 05       	cpc	r25, r1
    15e4:	91 f1       	breq	.+100    	; 0x164a <main+0x110>
    15e6:	2c 81       	ldd	r18, Y+4	; 0x04
    15e8:	3d 81       	ldd	r19, Y+5	; 0x05
    15ea:	24 30       	cpi	r18, 0x04	; 4
    15ec:	31 05       	cpc	r19, r1
    15ee:	7c f4       	brge	.+30     	; 0x160e <main+0xd4>
    15f0:	8c 81       	ldd	r24, Y+4	; 0x04
    15f2:	9d 81       	ldd	r25, Y+5	; 0x05
    15f4:	81 30       	cpi	r24, 0x01	; 1
    15f6:	91 05       	cpc	r25, r1
    15f8:	11 f1       	breq	.+68     	; 0x163e <main+0x104>
    15fa:	2c 81       	ldd	r18, Y+4	; 0x04
    15fc:	3d 81       	ldd	r19, Y+5	; 0x05
    15fe:	22 30       	cpi	r18, 0x02	; 2
    1600:	31 05       	cpc	r19, r1
    1602:	04 f5       	brge	.+64     	; 0x1644 <main+0x10a>
    1604:	8c 81       	ldd	r24, Y+4	; 0x04
    1606:	9d 81       	ldd	r25, Y+5	; 0x05
    1608:	00 97       	sbiw	r24, 0x00	; 0
    160a:	b1 f0       	breq	.+44     	; 0x1638 <main+0xfe>
    160c:	2c c0       	rjmp	.+88     	; 0x1666 <main+0x12c>
    160e:	2c 81       	ldd	r18, Y+4	; 0x04
    1610:	3d 81       	ldd	r19, Y+5	; 0x05
    1612:	25 30       	cpi	r18, 0x05	; 5
    1614:	31 05       	cpc	r19, r1
    1616:	f9 f0       	breq	.+62     	; 0x1656 <main+0x11c>
    1618:	8c 81       	ldd	r24, Y+4	; 0x04
    161a:	9d 81       	ldd	r25, Y+5	; 0x05
    161c:	85 30       	cpi	r24, 0x05	; 5
    161e:	91 05       	cpc	r25, r1
    1620:	bc f0       	brlt	.+46     	; 0x1650 <main+0x116>
    1622:	2c 81       	ldd	r18, Y+4	; 0x04
    1624:	3d 81       	ldd	r19, Y+5	; 0x05
    1626:	26 30       	cpi	r18, 0x06	; 6
    1628:	31 05       	cpc	r19, r1
    162a:	c1 f0       	breq	.+48     	; 0x165c <main+0x122>
    162c:	8c 81       	ldd	r24, Y+4	; 0x04
    162e:	9d 81       	ldd	r25, Y+5	; 0x05
    1630:	87 30       	cpi	r24, 0x07	; 7
    1632:	91 05       	cpc	r25, r1
    1634:	b1 f0       	breq	.+44     	; 0x1662 <main+0x128>
    1636:	17 c0       	rjmp	.+46     	; 0x1666 <main+0x12c>
				case 0:
					FlashingEvery1sec();
    1638:	0e 94 3b 0b 	call	0x1676	; 0x1676 <FlashingEvery1sec>
    163c:	14 c0       	rjmp	.+40     	; 0x1666 <main+0x12c>
					break;
				case 1:
					ShiftingLeftEvery250ms();
    163e:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <ShiftingLeftEvery250ms>
    1642:	11 c0       	rjmp	.+34     	; 0x1666 <main+0x12c>
					break;
				case 2:
					ShiftingRightEvery250ms();
    1644:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <ShiftingRightEvery250ms>
    1648:	0e c0       	rjmp	.+28     	; 0x1666 <main+0x12c>
					break;
				case 3:
					TwoLedsConvergingEvery250ms();
    164a:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <TwoLedsConvergingEvery250ms>
    164e:	0b c0       	rjmp	.+22     	; 0x1666 <main+0x12c>
					break;
				case 4:
					TwoLedsDivergingEvery250ms();
    1650:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <TwoLedsDivergingEvery250ms>
    1654:	08 c0       	rjmp	.+16     	; 0x1666 <main+0x12c>
					break;
				case 5:
					PingPongEffectEvery250ms();
    1656:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <PingPongEffectEvery250ms>
    165a:	05 c0       	rjmp	.+10     	; 0x1666 <main+0x12c>
					break;
				case 6:
					Incrementing_SnakeEffect_Every250();
    165c:	0e 94 4b 11 	call	0x2296	; 0x2296 <Incrementing_SnakeEffect_Every250>
    1660:	02 c0       	rjmp	.+4      	; 0x1666 <main+0x12c>
					break;
				case 7:
					TwoLedsConvergeDivergeEvery250ms ();
    1662:	0e 94 73 12 	call	0x24e6	; 0x24e6 <TwoLedsConvergeDivergeEvery250ms>


	while(1)
	{

		for(u8 i=0;i<8;i++)
    1666:	89 81       	ldd	r24, Y+1	; 0x01
    1668:	8f 5f       	subi	r24, 0xFF	; 255
    166a:	89 83       	std	Y+1, r24	; 0x01
    166c:	89 81       	ldd	r24, Y+1	; 0x01
    166e:	88 30       	cpi	r24, 0x08	; 8
    1670:	08 f4       	brcc	.+2      	; 0x1674 <main+0x13a>
    1672:	9c cf       	rjmp	.-200    	; 0x15ac <main+0x72>
    1674:	99 cf       	rjmp	.-206    	; 0x15a8 <main+0x6e>

00001676 <FlashingEvery1sec>:
		}

	}

}
void FlashingEvery1sec(){
    1676:	df 93       	push	r29
    1678:	cf 93       	push	r28
    167a:	cd b7       	in	r28, 0x3d	; 61
    167c:	de b7       	in	r29, 0x3e	; 62
    167e:	6e 97       	sbiw	r28, 0x1e	; 30
    1680:	0f b6       	in	r0, 0x3f	; 63
    1682:	f8 94       	cli
    1684:	de bf       	out	0x3e, r29	; 62
    1686:	0f be       	out	0x3f, r0	; 63
    1688:	cd bf       	out	0x3d, r28	; 61

	for(u8 i=0;i<8;i++)
    168a:	1e 8e       	std	Y+30, r1	; 0x1e
    168c:	13 c0       	rjmp	.+38     	; 0x16b4 <FlashingEvery1sec+0x3e>
	{
		LED_voidOn(Leds[i]);
    168e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1690:	28 2f       	mov	r18, r24
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	c9 01       	movw	r24, r18
    1696:	88 0f       	add	r24, r24
    1698:	99 1f       	adc	r25, r25
    169a:	82 0f       	add	r24, r18
    169c:	93 1f       	adc	r25, r19
    169e:	fc 01       	movw	r30, r24
    16a0:	e8 59       	subi	r30, 0x98	; 152
    16a2:	ff 4f       	sbci	r31, 0xFF	; 255
    16a4:	60 81       	ld	r22, Z
    16a6:	71 81       	ldd	r23, Z+1	; 0x01
    16a8:	82 81       	ldd	r24, Z+2	; 0x02
    16aa:	0e 94 0d 06 	call	0xc1a	; 0xc1a <LED_voidOn>
	}

}
void FlashingEvery1sec(){

	for(u8 i=0;i<8;i++)
    16ae:	8e 8d       	ldd	r24, Y+30	; 0x1e
    16b0:	8f 5f       	subi	r24, 0xFF	; 255
    16b2:	8e 8f       	std	Y+30, r24	; 0x1e
    16b4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    16b6:	88 30       	cpi	r24, 0x08	; 8
    16b8:	50 f3       	brcs	.-44     	; 0x168e <FlashingEvery1sec+0x18>
    16ba:	80 e0       	ldi	r24, 0x00	; 0
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	aa e7       	ldi	r26, 0x7A	; 122
    16c0:	b4 e4       	ldi	r27, 0x44	; 68
    16c2:	89 8f       	std	Y+25, r24	; 0x19
    16c4:	9a 8f       	std	Y+26, r25	; 0x1a
    16c6:	ab 8f       	std	Y+27, r26	; 0x1b
    16c8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ca:	69 8d       	ldd	r22, Y+25	; 0x19
    16cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16d2:	20 e0       	ldi	r18, 0x00	; 0
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	4a ef       	ldi	r20, 0xFA	; 250
    16d8:	54 e4       	ldi	r21, 0x44	; 68
    16da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16de:	dc 01       	movw	r26, r24
    16e0:	cb 01       	movw	r24, r22
    16e2:	8d 8b       	std	Y+21, r24	; 0x15
    16e4:	9e 8b       	std	Y+22, r25	; 0x16
    16e6:	af 8b       	std	Y+23, r26	; 0x17
    16e8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16ea:	6d 89       	ldd	r22, Y+21	; 0x15
    16ec:	7e 89       	ldd	r23, Y+22	; 0x16
    16ee:	8f 89       	ldd	r24, Y+23	; 0x17
    16f0:	98 8d       	ldd	r25, Y+24	; 0x18
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	40 e8       	ldi	r20, 0x80	; 128
    16f8:	5f e3       	ldi	r21, 0x3F	; 63
    16fa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    16fe:	88 23       	and	r24, r24
    1700:	2c f4       	brge	.+10     	; 0x170c <FlashingEvery1sec+0x96>
		__ticks = 1;
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	9c 8b       	std	Y+20, r25	; 0x14
    1708:	8b 8b       	std	Y+19, r24	; 0x13
    170a:	3f c0       	rjmp	.+126    	; 0x178a <FlashingEvery1sec+0x114>
	else if (__tmp > 65535)
    170c:	6d 89       	ldd	r22, Y+21	; 0x15
    170e:	7e 89       	ldd	r23, Y+22	; 0x16
    1710:	8f 89       	ldd	r24, Y+23	; 0x17
    1712:	98 8d       	ldd	r25, Y+24	; 0x18
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	3f ef       	ldi	r19, 0xFF	; 255
    1718:	4f e7       	ldi	r20, 0x7F	; 127
    171a:	57 e4       	ldi	r21, 0x47	; 71
    171c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1720:	18 16       	cp	r1, r24
    1722:	4c f5       	brge	.+82     	; 0x1776 <FlashingEvery1sec+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1724:	69 8d       	ldd	r22, Y+25	; 0x19
    1726:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1728:	8b 8d       	ldd	r24, Y+27	; 0x1b
    172a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	40 e2       	ldi	r20, 0x20	; 32
    1732:	51 e4       	ldi	r21, 0x41	; 65
    1734:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1738:	dc 01       	movw	r26, r24
    173a:	cb 01       	movw	r24, r22
    173c:	bc 01       	movw	r22, r24
    173e:	cd 01       	movw	r24, r26
    1740:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1744:	dc 01       	movw	r26, r24
    1746:	cb 01       	movw	r24, r22
    1748:	9c 8b       	std	Y+20, r25	; 0x14
    174a:	8b 8b       	std	Y+19, r24	; 0x13
    174c:	0f c0       	rjmp	.+30     	; 0x176c <FlashingEvery1sec+0xf6>
    174e:	88 ec       	ldi	r24, 0xC8	; 200
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	9a 8b       	std	Y+18, r25	; 0x12
    1754:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1756:	89 89       	ldd	r24, Y+17	; 0x11
    1758:	9a 89       	ldd	r25, Y+18	; 0x12
    175a:	01 97       	sbiw	r24, 0x01	; 1
    175c:	f1 f7       	brne	.-4      	; 0x175a <FlashingEvery1sec+0xe4>
    175e:	9a 8b       	std	Y+18, r25	; 0x12
    1760:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1762:	8b 89       	ldd	r24, Y+19	; 0x13
    1764:	9c 89       	ldd	r25, Y+20	; 0x14
    1766:	01 97       	sbiw	r24, 0x01	; 1
    1768:	9c 8b       	std	Y+20, r25	; 0x14
    176a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    176c:	8b 89       	ldd	r24, Y+19	; 0x13
    176e:	9c 89       	ldd	r25, Y+20	; 0x14
    1770:	00 97       	sbiw	r24, 0x00	; 0
    1772:	69 f7       	brne	.-38     	; 0x174e <FlashingEvery1sec+0xd8>
    1774:	14 c0       	rjmp	.+40     	; 0x179e <FlashingEvery1sec+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1776:	6d 89       	ldd	r22, Y+21	; 0x15
    1778:	7e 89       	ldd	r23, Y+22	; 0x16
    177a:	8f 89       	ldd	r24, Y+23	; 0x17
    177c:	98 8d       	ldd	r25, Y+24	; 0x18
    177e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1782:	dc 01       	movw	r26, r24
    1784:	cb 01       	movw	r24, r22
    1786:	9c 8b       	std	Y+20, r25	; 0x14
    1788:	8b 8b       	std	Y+19, r24	; 0x13
    178a:	8b 89       	ldd	r24, Y+19	; 0x13
    178c:	9c 89       	ldd	r25, Y+20	; 0x14
    178e:	98 8b       	std	Y+16, r25	; 0x10
    1790:	8f 87       	std	Y+15, r24	; 0x0f
    1792:	8f 85       	ldd	r24, Y+15	; 0x0f
    1794:	98 89       	ldd	r25, Y+16	; 0x10
    1796:	01 97       	sbiw	r24, 0x01	; 1
    1798:	f1 f7       	brne	.-4      	; 0x1796 <FlashingEvery1sec+0x120>
    179a:	98 8b       	std	Y+16, r25	; 0x10
    179c:	8f 87       	std	Y+15, r24	; 0x0f
	{
		LED_voidOn(Leds[i]);
	}
	_delay_ms(1000);
	for(u8 i=0;i<8;i++)
    179e:	1d 8e       	std	Y+29, r1	; 0x1d
    17a0:	13 c0       	rjmp	.+38     	; 0x17c8 <FlashingEvery1sec+0x152>
	{
		LED_voidOff(Leds[i]);
    17a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17a4:	28 2f       	mov	r18, r24
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	c9 01       	movw	r24, r18
    17aa:	88 0f       	add	r24, r24
    17ac:	99 1f       	adc	r25, r25
    17ae:	82 0f       	add	r24, r18
    17b0:	93 1f       	adc	r25, r19
    17b2:	fc 01       	movw	r30, r24
    17b4:	e8 59       	subi	r30, 0x98	; 152
    17b6:	ff 4f       	sbci	r31, 0xFF	; 255
    17b8:	60 81       	ld	r22, Z
    17ba:	71 81       	ldd	r23, Z+1	; 0x01
    17bc:	82 81       	ldd	r24, Z+2	; 0x02
    17be:	0e 94 2f 06 	call	0xc5e	; 0xc5e <LED_voidOff>
	for(u8 i=0;i<8;i++)
	{
		LED_voidOn(Leds[i]);
	}
	_delay_ms(1000);
	for(u8 i=0;i<8;i++)
    17c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17c4:	8f 5f       	subi	r24, 0xFF	; 255
    17c6:	8d 8f       	std	Y+29, r24	; 0x1d
    17c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17ca:	88 30       	cpi	r24, 0x08	; 8
    17cc:	50 f3       	brcs	.-44     	; 0x17a2 <FlashingEvery1sec+0x12c>
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	aa e7       	ldi	r26, 0x7A	; 122
    17d4:	b4 e4       	ldi	r27, 0x44	; 68
    17d6:	8b 87       	std	Y+11, r24	; 0x0b
    17d8:	9c 87       	std	Y+12, r25	; 0x0c
    17da:	ad 87       	std	Y+13, r26	; 0x0d
    17dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17de:	6b 85       	ldd	r22, Y+11	; 0x0b
    17e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    17e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    17e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	4a ef       	ldi	r20, 0xFA	; 250
    17ec:	54 e4       	ldi	r21, 0x44	; 68
    17ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17f2:	dc 01       	movw	r26, r24
    17f4:	cb 01       	movw	r24, r22
    17f6:	8f 83       	std	Y+7, r24	; 0x07
    17f8:	98 87       	std	Y+8, r25	; 0x08
    17fa:	a9 87       	std	Y+9, r26	; 0x09
    17fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1800:	78 85       	ldd	r23, Y+8	; 0x08
    1802:	89 85       	ldd	r24, Y+9	; 0x09
    1804:	9a 85       	ldd	r25, Y+10	; 0x0a
    1806:	20 e0       	ldi	r18, 0x00	; 0
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	40 e8       	ldi	r20, 0x80	; 128
    180c:	5f e3       	ldi	r21, 0x3F	; 63
    180e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1812:	88 23       	and	r24, r24
    1814:	2c f4       	brge	.+10     	; 0x1820 <FlashingEvery1sec+0x1aa>
		__ticks = 1;
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	9e 83       	std	Y+6, r25	; 0x06
    181c:	8d 83       	std	Y+5, r24	; 0x05
    181e:	3f c0       	rjmp	.+126    	; 0x189e <FlashingEvery1sec+0x228>
	else if (__tmp > 65535)
    1820:	6f 81       	ldd	r22, Y+7	; 0x07
    1822:	78 85       	ldd	r23, Y+8	; 0x08
    1824:	89 85       	ldd	r24, Y+9	; 0x09
    1826:	9a 85       	ldd	r25, Y+10	; 0x0a
    1828:	20 e0       	ldi	r18, 0x00	; 0
    182a:	3f ef       	ldi	r19, 0xFF	; 255
    182c:	4f e7       	ldi	r20, 0x7F	; 127
    182e:	57 e4       	ldi	r21, 0x47	; 71
    1830:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1834:	18 16       	cp	r1, r24
    1836:	4c f5       	brge	.+82     	; 0x188a <FlashingEvery1sec+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1838:	6b 85       	ldd	r22, Y+11	; 0x0b
    183a:	7c 85       	ldd	r23, Y+12	; 0x0c
    183c:	8d 85       	ldd	r24, Y+13	; 0x0d
    183e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1840:	20 e0       	ldi	r18, 0x00	; 0
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	40 e2       	ldi	r20, 0x20	; 32
    1846:	51 e4       	ldi	r21, 0x41	; 65
    1848:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    184c:	dc 01       	movw	r26, r24
    184e:	cb 01       	movw	r24, r22
    1850:	bc 01       	movw	r22, r24
    1852:	cd 01       	movw	r24, r26
    1854:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	9e 83       	std	Y+6, r25	; 0x06
    185e:	8d 83       	std	Y+5, r24	; 0x05
    1860:	0f c0       	rjmp	.+30     	; 0x1880 <FlashingEvery1sec+0x20a>
    1862:	88 ec       	ldi	r24, 0xC8	; 200
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	9c 83       	std	Y+4, r25	; 0x04
    1868:	8b 83       	std	Y+3, r24	; 0x03
    186a:	8b 81       	ldd	r24, Y+3	; 0x03
    186c:	9c 81       	ldd	r25, Y+4	; 0x04
    186e:	01 97       	sbiw	r24, 0x01	; 1
    1870:	f1 f7       	brne	.-4      	; 0x186e <FlashingEvery1sec+0x1f8>
    1872:	9c 83       	std	Y+4, r25	; 0x04
    1874:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1876:	8d 81       	ldd	r24, Y+5	; 0x05
    1878:	9e 81       	ldd	r25, Y+6	; 0x06
    187a:	01 97       	sbiw	r24, 0x01	; 1
    187c:	9e 83       	std	Y+6, r25	; 0x06
    187e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1880:	8d 81       	ldd	r24, Y+5	; 0x05
    1882:	9e 81       	ldd	r25, Y+6	; 0x06
    1884:	00 97       	sbiw	r24, 0x00	; 0
    1886:	69 f7       	brne	.-38     	; 0x1862 <FlashingEvery1sec+0x1ec>
    1888:	14 c0       	rjmp	.+40     	; 0x18b2 <FlashingEvery1sec+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    188a:	6f 81       	ldd	r22, Y+7	; 0x07
    188c:	78 85       	ldd	r23, Y+8	; 0x08
    188e:	89 85       	ldd	r24, Y+9	; 0x09
    1890:	9a 85       	ldd	r25, Y+10	; 0x0a
    1892:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1896:	dc 01       	movw	r26, r24
    1898:	cb 01       	movw	r24, r22
    189a:	9e 83       	std	Y+6, r25	; 0x06
    189c:	8d 83       	std	Y+5, r24	; 0x05
    189e:	8d 81       	ldd	r24, Y+5	; 0x05
    18a0:	9e 81       	ldd	r25, Y+6	; 0x06
    18a2:	9a 83       	std	Y+2, r25	; 0x02
    18a4:	89 83       	std	Y+1, r24	; 0x01
    18a6:	89 81       	ldd	r24, Y+1	; 0x01
    18a8:	9a 81       	ldd	r25, Y+2	; 0x02
    18aa:	01 97       	sbiw	r24, 0x01	; 1
    18ac:	f1 f7       	brne	.-4      	; 0x18aa <FlashingEvery1sec+0x234>
    18ae:	9a 83       	std	Y+2, r25	; 0x02
    18b0:	89 83       	std	Y+1, r24	; 0x01
	{
		LED_voidOff(Leds[i]);
	}
	_delay_ms(1000);
}
    18b2:	6e 96       	adiw	r28, 0x1e	; 30
    18b4:	0f b6       	in	r0, 0x3f	; 63
    18b6:	f8 94       	cli
    18b8:	de bf       	out	0x3e, r29	; 62
    18ba:	0f be       	out	0x3f, r0	; 63
    18bc:	cd bf       	out	0x3d, r28	; 61
    18be:	cf 91       	pop	r28
    18c0:	df 91       	pop	r29
    18c2:	08 95       	ret

000018c4 <ShiftingLeftEvery250ms>:
void ShiftingLeftEvery250ms(){
    18c4:	df 93       	push	r29
    18c6:	cf 93       	push	r28
    18c8:	cd b7       	in	r28, 0x3d	; 61
    18ca:	de b7       	in	r29, 0x3e	; 62
    18cc:	2f 97       	sbiw	r28, 0x0f	; 15
    18ce:	0f b6       	in	r0, 0x3f	; 63
    18d0:	f8 94       	cli
    18d2:	de bf       	out	0x3e, r29	; 62
    18d4:	0f be       	out	0x3f, r0	; 63
    18d6:	cd bf       	out	0x3d, r28	; 61
	for(u8 i=0;i<8;i++)
    18d8:	1f 86       	std	Y+15, r1	; 0x0f
    18da:	95 c0       	rjmp	.+298    	; 0x1a06 <ShiftingLeftEvery250ms+0x142>
	{
		LED_voidOn(Leds[i]);
    18dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    18de:	28 2f       	mov	r18, r24
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	c9 01       	movw	r24, r18
    18e4:	88 0f       	add	r24, r24
    18e6:	99 1f       	adc	r25, r25
    18e8:	82 0f       	add	r24, r18
    18ea:	93 1f       	adc	r25, r19
    18ec:	fc 01       	movw	r30, r24
    18ee:	e8 59       	subi	r30, 0x98	; 152
    18f0:	ff 4f       	sbci	r31, 0xFF	; 255
    18f2:	60 81       	ld	r22, Z
    18f4:	71 81       	ldd	r23, Z+1	; 0x01
    18f6:	82 81       	ldd	r24, Z+2	; 0x02
    18f8:	0e 94 0d 06 	call	0xc1a	; 0xc1a <LED_voidOn>
    18fc:	80 e0       	ldi	r24, 0x00	; 0
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	aa e7       	ldi	r26, 0x7A	; 122
    1902:	b3 e4       	ldi	r27, 0x43	; 67
    1904:	8b 87       	std	Y+11, r24	; 0x0b
    1906:	9c 87       	std	Y+12, r25	; 0x0c
    1908:	ad 87       	std	Y+13, r26	; 0x0d
    190a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    190c:	6b 85       	ldd	r22, Y+11	; 0x0b
    190e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1910:	8d 85       	ldd	r24, Y+13	; 0x0d
    1912:	9e 85       	ldd	r25, Y+14	; 0x0e
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	4a ef       	ldi	r20, 0xFA	; 250
    191a:	54 e4       	ldi	r21, 0x44	; 68
    191c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1920:	dc 01       	movw	r26, r24
    1922:	cb 01       	movw	r24, r22
    1924:	8f 83       	std	Y+7, r24	; 0x07
    1926:	98 87       	std	Y+8, r25	; 0x08
    1928:	a9 87       	std	Y+9, r26	; 0x09
    192a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    192c:	6f 81       	ldd	r22, Y+7	; 0x07
    192e:	78 85       	ldd	r23, Y+8	; 0x08
    1930:	89 85       	ldd	r24, Y+9	; 0x09
    1932:	9a 85       	ldd	r25, Y+10	; 0x0a
    1934:	20 e0       	ldi	r18, 0x00	; 0
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	40 e8       	ldi	r20, 0x80	; 128
    193a:	5f e3       	ldi	r21, 0x3F	; 63
    193c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1940:	88 23       	and	r24, r24
    1942:	2c f4       	brge	.+10     	; 0x194e <ShiftingLeftEvery250ms+0x8a>
		__ticks = 1;
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	9e 83       	std	Y+6, r25	; 0x06
    194a:	8d 83       	std	Y+5, r24	; 0x05
    194c:	3f c0       	rjmp	.+126    	; 0x19cc <ShiftingLeftEvery250ms+0x108>
	else if (__tmp > 65535)
    194e:	6f 81       	ldd	r22, Y+7	; 0x07
    1950:	78 85       	ldd	r23, Y+8	; 0x08
    1952:	89 85       	ldd	r24, Y+9	; 0x09
    1954:	9a 85       	ldd	r25, Y+10	; 0x0a
    1956:	20 e0       	ldi	r18, 0x00	; 0
    1958:	3f ef       	ldi	r19, 0xFF	; 255
    195a:	4f e7       	ldi	r20, 0x7F	; 127
    195c:	57 e4       	ldi	r21, 0x47	; 71
    195e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1962:	18 16       	cp	r1, r24
    1964:	4c f5       	brge	.+82     	; 0x19b8 <ShiftingLeftEvery250ms+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1966:	6b 85       	ldd	r22, Y+11	; 0x0b
    1968:	7c 85       	ldd	r23, Y+12	; 0x0c
    196a:	8d 85       	ldd	r24, Y+13	; 0x0d
    196c:	9e 85       	ldd	r25, Y+14	; 0x0e
    196e:	20 e0       	ldi	r18, 0x00	; 0
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	40 e2       	ldi	r20, 0x20	; 32
    1974:	51 e4       	ldi	r21, 0x41	; 65
    1976:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    197a:	dc 01       	movw	r26, r24
    197c:	cb 01       	movw	r24, r22
    197e:	bc 01       	movw	r22, r24
    1980:	cd 01       	movw	r24, r26
    1982:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1986:	dc 01       	movw	r26, r24
    1988:	cb 01       	movw	r24, r22
    198a:	9e 83       	std	Y+6, r25	; 0x06
    198c:	8d 83       	std	Y+5, r24	; 0x05
    198e:	0f c0       	rjmp	.+30     	; 0x19ae <ShiftingLeftEvery250ms+0xea>
    1990:	88 ec       	ldi	r24, 0xC8	; 200
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	9c 83       	std	Y+4, r25	; 0x04
    1996:	8b 83       	std	Y+3, r24	; 0x03
    1998:	8b 81       	ldd	r24, Y+3	; 0x03
    199a:	9c 81       	ldd	r25, Y+4	; 0x04
    199c:	01 97       	sbiw	r24, 0x01	; 1
    199e:	f1 f7       	brne	.-4      	; 0x199c <ShiftingLeftEvery250ms+0xd8>
    19a0:	9c 83       	std	Y+4, r25	; 0x04
    19a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a4:	8d 81       	ldd	r24, Y+5	; 0x05
    19a6:	9e 81       	ldd	r25, Y+6	; 0x06
    19a8:	01 97       	sbiw	r24, 0x01	; 1
    19aa:	9e 83       	std	Y+6, r25	; 0x06
    19ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ae:	8d 81       	ldd	r24, Y+5	; 0x05
    19b0:	9e 81       	ldd	r25, Y+6	; 0x06
    19b2:	00 97       	sbiw	r24, 0x00	; 0
    19b4:	69 f7       	brne	.-38     	; 0x1990 <ShiftingLeftEvery250ms+0xcc>
    19b6:	14 c0       	rjmp	.+40     	; 0x19e0 <ShiftingLeftEvery250ms+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b8:	6f 81       	ldd	r22, Y+7	; 0x07
    19ba:	78 85       	ldd	r23, Y+8	; 0x08
    19bc:	89 85       	ldd	r24, Y+9	; 0x09
    19be:	9a 85       	ldd	r25, Y+10	; 0x0a
    19c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19c4:	dc 01       	movw	r26, r24
    19c6:	cb 01       	movw	r24, r22
    19c8:	9e 83       	std	Y+6, r25	; 0x06
    19ca:	8d 83       	std	Y+5, r24	; 0x05
    19cc:	8d 81       	ldd	r24, Y+5	; 0x05
    19ce:	9e 81       	ldd	r25, Y+6	; 0x06
    19d0:	9a 83       	std	Y+2, r25	; 0x02
    19d2:	89 83       	std	Y+1, r24	; 0x01
    19d4:	89 81       	ldd	r24, Y+1	; 0x01
    19d6:	9a 81       	ldd	r25, Y+2	; 0x02
    19d8:	01 97       	sbiw	r24, 0x01	; 1
    19da:	f1 f7       	brne	.-4      	; 0x19d8 <ShiftingLeftEvery250ms+0x114>
    19dc:	9a 83       	std	Y+2, r25	; 0x02
    19de:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);
		LED_voidOff(Leds[i]);
    19e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    19e2:	28 2f       	mov	r18, r24
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	c9 01       	movw	r24, r18
    19e8:	88 0f       	add	r24, r24
    19ea:	99 1f       	adc	r25, r25
    19ec:	82 0f       	add	r24, r18
    19ee:	93 1f       	adc	r25, r19
    19f0:	fc 01       	movw	r30, r24
    19f2:	e8 59       	subi	r30, 0x98	; 152
    19f4:	ff 4f       	sbci	r31, 0xFF	; 255
    19f6:	60 81       	ld	r22, Z
    19f8:	71 81       	ldd	r23, Z+1	; 0x01
    19fa:	82 81       	ldd	r24, Z+2	; 0x02
    19fc:	0e 94 2f 06 	call	0xc5e	; 0xc5e <LED_voidOff>
		LED_voidOff(Leds[i]);
	}
	_delay_ms(1000);
}
void ShiftingLeftEvery250ms(){
	for(u8 i=0;i<8;i++)
    1a00:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a02:	8f 5f       	subi	r24, 0xFF	; 255
    1a04:	8f 87       	std	Y+15, r24	; 0x0f
    1a06:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a08:	88 30       	cpi	r24, 0x08	; 8
    1a0a:	08 f4       	brcc	.+2      	; 0x1a0e <ShiftingLeftEvery250ms+0x14a>
    1a0c:	67 cf       	rjmp	.-306    	; 0x18dc <ShiftingLeftEvery250ms+0x18>
	{
		LED_voidOn(Leds[i]);
		_delay_ms(250);
		LED_voidOff(Leds[i]);
	}
}
    1a0e:	2f 96       	adiw	r28, 0x0f	; 15
    1a10:	0f b6       	in	r0, 0x3f	; 63
    1a12:	f8 94       	cli
    1a14:	de bf       	out	0x3e, r29	; 62
    1a16:	0f be       	out	0x3f, r0	; 63
    1a18:	cd bf       	out	0x3d, r28	; 61
    1a1a:	cf 91       	pop	r28
    1a1c:	df 91       	pop	r29
    1a1e:	08 95       	ret

00001a20 <ShiftingRightEvery250ms>:

void ShiftingRightEvery250ms(){
    1a20:	df 93       	push	r29
    1a22:	cf 93       	push	r28
    1a24:	cd b7       	in	r28, 0x3d	; 61
    1a26:	de b7       	in	r29, 0x3e	; 62
    1a28:	2f 97       	sbiw	r28, 0x0f	; 15
    1a2a:	0f b6       	in	r0, 0x3f	; 63
    1a2c:	f8 94       	cli
    1a2e:	de bf       	out	0x3e, r29	; 62
    1a30:	0f be       	out	0x3f, r0	; 63
    1a32:	cd bf       	out	0x3d, r28	; 61
	for(u8 i=0;i<8;i++)
    1a34:	1f 86       	std	Y+15, r1	; 0x0f
    1a36:	a1 c0       	rjmp	.+322    	; 0x1b7a <ShiftingRightEvery250ms+0x15a>
	{
		LED_voidOn     (Leds[7 - i]);
    1a38:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a3a:	28 2f       	mov	r18, r24
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	87 e0       	ldi	r24, 0x07	; 7
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	ac 01       	movw	r20, r24
    1a44:	42 1b       	sub	r20, r18
    1a46:	53 0b       	sbc	r21, r19
    1a48:	9a 01       	movw	r18, r20
    1a4a:	c9 01       	movw	r24, r18
    1a4c:	88 0f       	add	r24, r24
    1a4e:	99 1f       	adc	r25, r25
    1a50:	82 0f       	add	r24, r18
    1a52:	93 1f       	adc	r25, r19
    1a54:	fc 01       	movw	r30, r24
    1a56:	e8 59       	subi	r30, 0x98	; 152
    1a58:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5a:	60 81       	ld	r22, Z
    1a5c:	71 81       	ldd	r23, Z+1	; 0x01
    1a5e:	82 81       	ldd	r24, Z+2	; 0x02
    1a60:	0e 94 0d 06 	call	0xc1a	; 0xc1a <LED_voidOn>
    1a64:	80 e0       	ldi	r24, 0x00	; 0
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	aa e7       	ldi	r26, 0x7A	; 122
    1a6a:	b3 e4       	ldi	r27, 0x43	; 67
    1a6c:	8b 87       	std	Y+11, r24	; 0x0b
    1a6e:	9c 87       	std	Y+12, r25	; 0x0c
    1a70:	ad 87       	std	Y+13, r26	; 0x0d
    1a72:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a74:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a76:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a78:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	4a ef       	ldi	r20, 0xFA	; 250
    1a82:	54 e4       	ldi	r21, 0x44	; 68
    1a84:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a88:	dc 01       	movw	r26, r24
    1a8a:	cb 01       	movw	r24, r22
    1a8c:	8f 83       	std	Y+7, r24	; 0x07
    1a8e:	98 87       	std	Y+8, r25	; 0x08
    1a90:	a9 87       	std	Y+9, r26	; 0x09
    1a92:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a94:	6f 81       	ldd	r22, Y+7	; 0x07
    1a96:	78 85       	ldd	r23, Y+8	; 0x08
    1a98:	89 85       	ldd	r24, Y+9	; 0x09
    1a9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	40 e8       	ldi	r20, 0x80	; 128
    1aa2:	5f e3       	ldi	r21, 0x3F	; 63
    1aa4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1aa8:	88 23       	and	r24, r24
    1aaa:	2c f4       	brge	.+10     	; 0x1ab6 <ShiftingRightEvery250ms+0x96>
		__ticks = 1;
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	9e 83       	std	Y+6, r25	; 0x06
    1ab2:	8d 83       	std	Y+5, r24	; 0x05
    1ab4:	3f c0       	rjmp	.+126    	; 0x1b34 <ShiftingRightEvery250ms+0x114>
	else if (__tmp > 65535)
    1ab6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ab8:	78 85       	ldd	r23, Y+8	; 0x08
    1aba:	89 85       	ldd	r24, Y+9	; 0x09
    1abc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	3f ef       	ldi	r19, 0xFF	; 255
    1ac2:	4f e7       	ldi	r20, 0x7F	; 127
    1ac4:	57 e4       	ldi	r21, 0x47	; 71
    1ac6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1aca:	18 16       	cp	r1, r24
    1acc:	4c f5       	brge	.+82     	; 0x1b20 <ShiftingRightEvery250ms+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ace:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ad0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ad2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ad4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ad6:	20 e0       	ldi	r18, 0x00	; 0
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	40 e2       	ldi	r20, 0x20	; 32
    1adc:	51 e4       	ldi	r21, 0x41	; 65
    1ade:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ae2:	dc 01       	movw	r26, r24
    1ae4:	cb 01       	movw	r24, r22
    1ae6:	bc 01       	movw	r22, r24
    1ae8:	cd 01       	movw	r24, r26
    1aea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aee:	dc 01       	movw	r26, r24
    1af0:	cb 01       	movw	r24, r22
    1af2:	9e 83       	std	Y+6, r25	; 0x06
    1af4:	8d 83       	std	Y+5, r24	; 0x05
    1af6:	0f c0       	rjmp	.+30     	; 0x1b16 <ShiftingRightEvery250ms+0xf6>
    1af8:	88 ec       	ldi	r24, 0xC8	; 200
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	9c 83       	std	Y+4, r25	; 0x04
    1afe:	8b 83       	std	Y+3, r24	; 0x03
    1b00:	8b 81       	ldd	r24, Y+3	; 0x03
    1b02:	9c 81       	ldd	r25, Y+4	; 0x04
    1b04:	01 97       	sbiw	r24, 0x01	; 1
    1b06:	f1 f7       	brne	.-4      	; 0x1b04 <ShiftingRightEvery250ms+0xe4>
    1b08:	9c 83       	std	Y+4, r25	; 0x04
    1b0a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b10:	01 97       	sbiw	r24, 0x01	; 1
    1b12:	9e 83       	std	Y+6, r25	; 0x06
    1b14:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b16:	8d 81       	ldd	r24, Y+5	; 0x05
    1b18:	9e 81       	ldd	r25, Y+6	; 0x06
    1b1a:	00 97       	sbiw	r24, 0x00	; 0
    1b1c:	69 f7       	brne	.-38     	; 0x1af8 <ShiftingRightEvery250ms+0xd8>
    1b1e:	14 c0       	rjmp	.+40     	; 0x1b48 <ShiftingRightEvery250ms+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b20:	6f 81       	ldd	r22, Y+7	; 0x07
    1b22:	78 85       	ldd	r23, Y+8	; 0x08
    1b24:	89 85       	ldd	r24, Y+9	; 0x09
    1b26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b28:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	9e 83       	std	Y+6, r25	; 0x06
    1b32:	8d 83       	std	Y+5, r24	; 0x05
    1b34:	8d 81       	ldd	r24, Y+5	; 0x05
    1b36:	9e 81       	ldd	r25, Y+6	; 0x06
    1b38:	9a 83       	std	Y+2, r25	; 0x02
    1b3a:	89 83       	std	Y+1, r24	; 0x01
    1b3c:	89 81       	ldd	r24, Y+1	; 0x01
    1b3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b40:	01 97       	sbiw	r24, 0x01	; 1
    1b42:	f1 f7       	brne	.-4      	; 0x1b40 <ShiftingRightEvery250ms+0x120>
    1b44:	9a 83       	std	Y+2, r25	; 0x02
    1b46:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);
		LED_voidOff     (Leds[7 - i]);
    1b48:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b4a:	28 2f       	mov	r18, r24
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	87 e0       	ldi	r24, 0x07	; 7
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	ac 01       	movw	r20, r24
    1b54:	42 1b       	sub	r20, r18
    1b56:	53 0b       	sbc	r21, r19
    1b58:	9a 01       	movw	r18, r20
    1b5a:	c9 01       	movw	r24, r18
    1b5c:	88 0f       	add	r24, r24
    1b5e:	99 1f       	adc	r25, r25
    1b60:	82 0f       	add	r24, r18
    1b62:	93 1f       	adc	r25, r19
    1b64:	fc 01       	movw	r30, r24
    1b66:	e8 59       	subi	r30, 0x98	; 152
    1b68:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6a:	60 81       	ld	r22, Z
    1b6c:	71 81       	ldd	r23, Z+1	; 0x01
    1b6e:	82 81       	ldd	r24, Z+2	; 0x02
    1b70:	0e 94 2f 06 	call	0xc5e	; 0xc5e <LED_voidOff>
		LED_voidOff(Leds[i]);
	}
}

void ShiftingRightEvery250ms(){
	for(u8 i=0;i<8;i++)
    1b74:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b76:	8f 5f       	subi	r24, 0xFF	; 255
    1b78:	8f 87       	std	Y+15, r24	; 0x0f
    1b7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b7c:	88 30       	cpi	r24, 0x08	; 8
    1b7e:	08 f4       	brcc	.+2      	; 0x1b82 <ShiftingRightEvery250ms+0x162>
    1b80:	5b cf       	rjmp	.-330    	; 0x1a38 <ShiftingRightEvery250ms+0x18>
	{
		LED_voidOn     (Leds[7 - i]);
		_delay_ms(250);
		LED_voidOff     (Leds[7 - i]);
	}
}
    1b82:	2f 96       	adiw	r28, 0x0f	; 15
    1b84:	0f b6       	in	r0, 0x3f	; 63
    1b86:	f8 94       	cli
    1b88:	de bf       	out	0x3e, r29	; 62
    1b8a:	0f be       	out	0x3f, r0	; 63
    1b8c:	cd bf       	out	0x3d, r28	; 61
    1b8e:	cf 91       	pop	r28
    1b90:	df 91       	pop	r29
    1b92:	08 95       	ret

00001b94 <TwoLedsConvergingEvery250ms>:

void TwoLedsConvergingEvery250ms(){
    1b94:	df 93       	push	r29
    1b96:	cf 93       	push	r28
    1b98:	cd b7       	in	r28, 0x3d	; 61
    1b9a:	de b7       	in	r29, 0x3e	; 62
    1b9c:	2f 97       	sbiw	r28, 0x0f	; 15
    1b9e:	0f b6       	in	r0, 0x3f	; 63
    1ba0:	f8 94       	cli
    1ba2:	de bf       	out	0x3e, r29	; 62
    1ba4:	0f be       	out	0x3f, r0	; 63
    1ba6:	cd bf       	out	0x3d, r28	; 61
	for(u8 i=0;i<4;i++)
    1ba8:	1f 86       	std	Y+15, r1	; 0x0f
    1baa:	c1 c0       	rjmp	.+386    	; 0x1d2e <TwoLedsConvergingEvery250ms+0x19a>
	{
		LED_voidOn(Leds[i]);
    1bac:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bae:	28 2f       	mov	r18, r24
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	c9 01       	movw	r24, r18
    1bb4:	88 0f       	add	r24, r24
    1bb6:	99 1f       	adc	r25, r25
    1bb8:	82 0f       	add	r24, r18
    1bba:	93 1f       	adc	r25, r19
    1bbc:	fc 01       	movw	r30, r24
    1bbe:	e8 59       	subi	r30, 0x98	; 152
    1bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc2:	60 81       	ld	r22, Z
    1bc4:	71 81       	ldd	r23, Z+1	; 0x01
    1bc6:	82 81       	ldd	r24, Z+2	; 0x02
    1bc8:	0e 94 0d 06 	call	0xc1a	; 0xc1a <LED_voidOn>
		LED_voidOn(Leds[7-i]);
    1bcc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bce:	28 2f       	mov	r18, r24
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	87 e0       	ldi	r24, 0x07	; 7
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	ac 01       	movw	r20, r24
    1bd8:	42 1b       	sub	r20, r18
    1bda:	53 0b       	sbc	r21, r19
    1bdc:	9a 01       	movw	r18, r20
    1bde:	c9 01       	movw	r24, r18
    1be0:	88 0f       	add	r24, r24
    1be2:	99 1f       	adc	r25, r25
    1be4:	82 0f       	add	r24, r18
    1be6:	93 1f       	adc	r25, r19
    1be8:	fc 01       	movw	r30, r24
    1bea:	e8 59       	subi	r30, 0x98	; 152
    1bec:	ff 4f       	sbci	r31, 0xFF	; 255
    1bee:	60 81       	ld	r22, Z
    1bf0:	71 81       	ldd	r23, Z+1	; 0x01
    1bf2:	82 81       	ldd	r24, Z+2	; 0x02
    1bf4:	0e 94 0d 06 	call	0xc1a	; 0xc1a <LED_voidOn>
    1bf8:	80 e0       	ldi	r24, 0x00	; 0
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	aa e7       	ldi	r26, 0x7A	; 122
    1bfe:	b3 e4       	ldi	r27, 0x43	; 67
    1c00:	8b 87       	std	Y+11, r24	; 0x0b
    1c02:	9c 87       	std	Y+12, r25	; 0x0c
    1c04:	ad 87       	std	Y+13, r26	; 0x0d
    1c06:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c08:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	4a ef       	ldi	r20, 0xFA	; 250
    1c16:	54 e4       	ldi	r21, 0x44	; 68
    1c18:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	cb 01       	movw	r24, r22
    1c20:	8f 83       	std	Y+7, r24	; 0x07
    1c22:	98 87       	std	Y+8, r25	; 0x08
    1c24:	a9 87       	std	Y+9, r26	; 0x09
    1c26:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c28:	6f 81       	ldd	r22, Y+7	; 0x07
    1c2a:	78 85       	ldd	r23, Y+8	; 0x08
    1c2c:	89 85       	ldd	r24, Y+9	; 0x09
    1c2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	40 e8       	ldi	r20, 0x80	; 128
    1c36:	5f e3       	ldi	r21, 0x3F	; 63
    1c38:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c3c:	88 23       	and	r24, r24
    1c3e:	2c f4       	brge	.+10     	; 0x1c4a <TwoLedsConvergingEvery250ms+0xb6>
		__ticks = 1;
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	9e 83       	std	Y+6, r25	; 0x06
    1c46:	8d 83       	std	Y+5, r24	; 0x05
    1c48:	3f c0       	rjmp	.+126    	; 0x1cc8 <TwoLedsConvergingEvery250ms+0x134>
	else if (__tmp > 65535)
    1c4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c4c:	78 85       	ldd	r23, Y+8	; 0x08
    1c4e:	89 85       	ldd	r24, Y+9	; 0x09
    1c50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	3f ef       	ldi	r19, 0xFF	; 255
    1c56:	4f e7       	ldi	r20, 0x7F	; 127
    1c58:	57 e4       	ldi	r21, 0x47	; 71
    1c5a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c5e:	18 16       	cp	r1, r24
    1c60:	4c f5       	brge	.+82     	; 0x1cb4 <TwoLedsConvergingEvery250ms+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c62:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c64:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	40 e2       	ldi	r20, 0x20	; 32
    1c70:	51 e4       	ldi	r21, 0x41	; 65
    1c72:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	bc 01       	movw	r22, r24
    1c7c:	cd 01       	movw	r24, r26
    1c7e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	9e 83       	std	Y+6, r25	; 0x06
    1c88:	8d 83       	std	Y+5, r24	; 0x05
    1c8a:	0f c0       	rjmp	.+30     	; 0x1caa <TwoLedsConvergingEvery250ms+0x116>
    1c8c:	88 ec       	ldi	r24, 0xC8	; 200
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	9c 83       	std	Y+4, r25	; 0x04
    1c92:	8b 83       	std	Y+3, r24	; 0x03
    1c94:	8b 81       	ldd	r24, Y+3	; 0x03
    1c96:	9c 81       	ldd	r25, Y+4	; 0x04
    1c98:	01 97       	sbiw	r24, 0x01	; 1
    1c9a:	f1 f7       	brne	.-4      	; 0x1c98 <TwoLedsConvergingEvery250ms+0x104>
    1c9c:	9c 83       	std	Y+4, r25	; 0x04
    1c9e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ca0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca4:	01 97       	sbiw	r24, 0x01	; 1
    1ca6:	9e 83       	std	Y+6, r25	; 0x06
    1ca8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1caa:	8d 81       	ldd	r24, Y+5	; 0x05
    1cac:	9e 81       	ldd	r25, Y+6	; 0x06
    1cae:	00 97       	sbiw	r24, 0x00	; 0
    1cb0:	69 f7       	brne	.-38     	; 0x1c8c <TwoLedsConvergingEvery250ms+0xf8>
    1cb2:	14 c0       	rjmp	.+40     	; 0x1cdc <TwoLedsConvergingEvery250ms+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cb4:	6f 81       	ldd	r22, Y+7	; 0x07
    1cb6:	78 85       	ldd	r23, Y+8	; 0x08
    1cb8:	89 85       	ldd	r24, Y+9	; 0x09
    1cba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cbc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cc0:	dc 01       	movw	r26, r24
    1cc2:	cb 01       	movw	r24, r22
    1cc4:	9e 83       	std	Y+6, r25	; 0x06
    1cc6:	8d 83       	std	Y+5, r24	; 0x05
    1cc8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cca:	9e 81       	ldd	r25, Y+6	; 0x06
    1ccc:	9a 83       	std	Y+2, r25	; 0x02
    1cce:	89 83       	std	Y+1, r24	; 0x01
    1cd0:	89 81       	ldd	r24, Y+1	; 0x01
    1cd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd4:	01 97       	sbiw	r24, 0x01	; 1
    1cd6:	f1 f7       	brne	.-4      	; 0x1cd4 <TwoLedsConvergingEvery250ms+0x140>
    1cd8:	9a 83       	std	Y+2, r25	; 0x02
    1cda:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);
		LED_voidOff(Leds[i]);
    1cdc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cde:	28 2f       	mov	r18, r24
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	c9 01       	movw	r24, r18
    1ce4:	88 0f       	add	r24, r24
    1ce6:	99 1f       	adc	r25, r25
    1ce8:	82 0f       	add	r24, r18
    1cea:	93 1f       	adc	r25, r19
    1cec:	fc 01       	movw	r30, r24
    1cee:	e8 59       	subi	r30, 0x98	; 152
    1cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf2:	60 81       	ld	r22, Z
    1cf4:	71 81       	ldd	r23, Z+1	; 0x01
    1cf6:	82 81       	ldd	r24, Z+2	; 0x02
    1cf8:	0e 94 2f 06 	call	0xc5e	; 0xc5e <LED_voidOff>
		LED_voidOff(Leds[7-i]);
    1cfc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cfe:	28 2f       	mov	r18, r24
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	87 e0       	ldi	r24, 0x07	; 7
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	ac 01       	movw	r20, r24
    1d08:	42 1b       	sub	r20, r18
    1d0a:	53 0b       	sbc	r21, r19
    1d0c:	9a 01       	movw	r18, r20
    1d0e:	c9 01       	movw	r24, r18
    1d10:	88 0f       	add	r24, r24
    1d12:	99 1f       	adc	r25, r25
    1d14:	82 0f       	add	r24, r18
    1d16:	93 1f       	adc	r25, r19
    1d18:	fc 01       	movw	r30, r24
    1d1a:	e8 59       	subi	r30, 0x98	; 152
    1d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1e:	60 81       	ld	r22, Z
    1d20:	71 81       	ldd	r23, Z+1	; 0x01
    1d22:	82 81       	ldd	r24, Z+2	; 0x02
    1d24:	0e 94 2f 06 	call	0xc5e	; 0xc5e <LED_voidOff>
		LED_voidOff     (Leds[7 - i]);
	}
}

void TwoLedsConvergingEvery250ms(){
	for(u8 i=0;i<4;i++)
    1d28:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d2a:	8f 5f       	subi	r24, 0xFF	; 255
    1d2c:	8f 87       	std	Y+15, r24	; 0x0f
    1d2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d30:	84 30       	cpi	r24, 0x04	; 4
    1d32:	08 f4       	brcc	.+2      	; 0x1d36 <TwoLedsConvergingEvery250ms+0x1a2>
    1d34:	3b cf       	rjmp	.-394    	; 0x1bac <TwoLedsConvergingEvery250ms+0x18>
		LED_voidOn(Leds[7-i]);
		_delay_ms(250);
		LED_voidOff(Leds[i]);
		LED_voidOff(Leds[7-i]);
	}
}
    1d36:	2f 96       	adiw	r28, 0x0f	; 15
    1d38:	0f b6       	in	r0, 0x3f	; 63
    1d3a:	f8 94       	cli
    1d3c:	de bf       	out	0x3e, r29	; 62
    1d3e:	0f be       	out	0x3f, r0	; 63
    1d40:	cd bf       	out	0x3d, r28	; 61
    1d42:	cf 91       	pop	r28
    1d44:	df 91       	pop	r29
    1d46:	08 95       	ret

00001d48 <TwoLedsDivergingEvery250ms>:

void TwoLedsDivergingEvery250ms(){
    1d48:	df 93       	push	r29
    1d4a:	cf 93       	push	r28
    1d4c:	cd b7       	in	r28, 0x3d	; 61
    1d4e:	de b7       	in	r29, 0x3e	; 62
    1d50:	2f 97       	sbiw	r28, 0x0f	; 15
    1d52:	0f b6       	in	r0, 0x3f	; 63
    1d54:	f8 94       	cli
    1d56:	de bf       	out	0x3e, r29	; 62
    1d58:	0f be       	out	0x3f, r0	; 63
    1d5a:	cd bf       	out	0x3d, r28	; 61
	for(u8 i=0;i<4;i++)
    1d5c:	1f 86       	std	Y+15, r1	; 0x0f
    1d5e:	c7 c0       	rjmp	.+398    	; 0x1eee <TwoLedsDivergingEvery250ms+0x1a6>
	{
		LED_voidOn(Leds[3-i]);
    1d60:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d62:	28 2f       	mov	r18, r24
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	83 e0       	ldi	r24, 0x03	; 3
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	ac 01       	movw	r20, r24
    1d6c:	42 1b       	sub	r20, r18
    1d6e:	53 0b       	sbc	r21, r19
    1d70:	9a 01       	movw	r18, r20
    1d72:	c9 01       	movw	r24, r18
    1d74:	88 0f       	add	r24, r24
    1d76:	99 1f       	adc	r25, r25
    1d78:	82 0f       	add	r24, r18
    1d7a:	93 1f       	adc	r25, r19
    1d7c:	fc 01       	movw	r30, r24
    1d7e:	e8 59       	subi	r30, 0x98	; 152
    1d80:	ff 4f       	sbci	r31, 0xFF	; 255
    1d82:	60 81       	ld	r22, Z
    1d84:	71 81       	ldd	r23, Z+1	; 0x01
    1d86:	82 81       	ldd	r24, Z+2	; 0x02
    1d88:	0e 94 0d 06 	call	0xc1a	; 0xc1a <LED_voidOn>
		LED_voidOn(Leds[4+i]);
    1d8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d8e:	88 2f       	mov	r24, r24
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	9c 01       	movw	r18, r24
    1d94:	2c 5f       	subi	r18, 0xFC	; 252
    1d96:	3f 4f       	sbci	r19, 0xFF	; 255
    1d98:	c9 01       	movw	r24, r18
    1d9a:	88 0f       	add	r24, r24
    1d9c:	99 1f       	adc	r25, r25
    1d9e:	82 0f       	add	r24, r18
    1da0:	93 1f       	adc	r25, r19
    1da2:	fc 01       	movw	r30, r24
    1da4:	e8 59       	subi	r30, 0x98	; 152
    1da6:	ff 4f       	sbci	r31, 0xFF	; 255
    1da8:	60 81       	ld	r22, Z
    1daa:	71 81       	ldd	r23, Z+1	; 0x01
    1dac:	82 81       	ldd	r24, Z+2	; 0x02
    1dae:	0e 94 0d 06 	call	0xc1a	; 0xc1a <LED_voidOn>
    1db2:	80 e0       	ldi	r24, 0x00	; 0
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	aa e7       	ldi	r26, 0x7A	; 122
    1db8:	b3 e4       	ldi	r27, 0x43	; 67
    1dba:	8b 87       	std	Y+11, r24	; 0x0b
    1dbc:	9c 87       	std	Y+12, r25	; 0x0c
    1dbe:	ad 87       	std	Y+13, r26	; 0x0d
    1dc0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dc2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dc4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	4a ef       	ldi	r20, 0xFA	; 250
    1dd0:	54 e4       	ldi	r21, 0x44	; 68
    1dd2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dd6:	dc 01       	movw	r26, r24
    1dd8:	cb 01       	movw	r24, r22
    1dda:	8f 83       	std	Y+7, r24	; 0x07
    1ddc:	98 87       	std	Y+8, r25	; 0x08
    1dde:	a9 87       	std	Y+9, r26	; 0x09
    1de0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1de2:	6f 81       	ldd	r22, Y+7	; 0x07
    1de4:	78 85       	ldd	r23, Y+8	; 0x08
    1de6:	89 85       	ldd	r24, Y+9	; 0x09
    1de8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	40 e8       	ldi	r20, 0x80	; 128
    1df0:	5f e3       	ldi	r21, 0x3F	; 63
    1df2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1df6:	88 23       	and	r24, r24
    1df8:	2c f4       	brge	.+10     	; 0x1e04 <TwoLedsDivergingEvery250ms+0xbc>
		__ticks = 1;
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	9e 83       	std	Y+6, r25	; 0x06
    1e00:	8d 83       	std	Y+5, r24	; 0x05
    1e02:	3f c0       	rjmp	.+126    	; 0x1e82 <TwoLedsDivergingEvery250ms+0x13a>
	else if (__tmp > 65535)
    1e04:	6f 81       	ldd	r22, Y+7	; 0x07
    1e06:	78 85       	ldd	r23, Y+8	; 0x08
    1e08:	89 85       	ldd	r24, Y+9	; 0x09
    1e0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	3f ef       	ldi	r19, 0xFF	; 255
    1e10:	4f e7       	ldi	r20, 0x7F	; 127
    1e12:	57 e4       	ldi	r21, 0x47	; 71
    1e14:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e18:	18 16       	cp	r1, r24
    1e1a:	4c f5       	brge	.+82     	; 0x1e6e <TwoLedsDivergingEvery250ms+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e20:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e22:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e24:	20 e0       	ldi	r18, 0x00	; 0
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	40 e2       	ldi	r20, 0x20	; 32
    1e2a:	51 e4       	ldi	r21, 0x41	; 65
    1e2c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	bc 01       	movw	r22, r24
    1e36:	cd 01       	movw	r24, r26
    1e38:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	9e 83       	std	Y+6, r25	; 0x06
    1e42:	8d 83       	std	Y+5, r24	; 0x05
    1e44:	0f c0       	rjmp	.+30     	; 0x1e64 <TwoLedsDivergingEvery250ms+0x11c>
    1e46:	88 ec       	ldi	r24, 0xC8	; 200
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	9c 83       	std	Y+4, r25	; 0x04
    1e4c:	8b 83       	std	Y+3, r24	; 0x03
    1e4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e50:	9c 81       	ldd	r25, Y+4	; 0x04
    1e52:	01 97       	sbiw	r24, 0x01	; 1
    1e54:	f1 f7       	brne	.-4      	; 0x1e52 <TwoLedsDivergingEvery250ms+0x10a>
    1e56:	9c 83       	std	Y+4, r25	; 0x04
    1e58:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5e:	01 97       	sbiw	r24, 0x01	; 1
    1e60:	9e 83       	std	Y+6, r25	; 0x06
    1e62:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e64:	8d 81       	ldd	r24, Y+5	; 0x05
    1e66:	9e 81       	ldd	r25, Y+6	; 0x06
    1e68:	00 97       	sbiw	r24, 0x00	; 0
    1e6a:	69 f7       	brne	.-38     	; 0x1e46 <TwoLedsDivergingEvery250ms+0xfe>
    1e6c:	14 c0       	rjmp	.+40     	; 0x1e96 <TwoLedsDivergingEvery250ms+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e6e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e70:	78 85       	ldd	r23, Y+8	; 0x08
    1e72:	89 85       	ldd	r24, Y+9	; 0x09
    1e74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e7a:	dc 01       	movw	r26, r24
    1e7c:	cb 01       	movw	r24, r22
    1e7e:	9e 83       	std	Y+6, r25	; 0x06
    1e80:	8d 83       	std	Y+5, r24	; 0x05
    1e82:	8d 81       	ldd	r24, Y+5	; 0x05
    1e84:	9e 81       	ldd	r25, Y+6	; 0x06
    1e86:	9a 83       	std	Y+2, r25	; 0x02
    1e88:	89 83       	std	Y+1, r24	; 0x01
    1e8a:	89 81       	ldd	r24, Y+1	; 0x01
    1e8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e8e:	01 97       	sbiw	r24, 0x01	; 1
    1e90:	f1 f7       	brne	.-4      	; 0x1e8e <TwoLedsDivergingEvery250ms+0x146>
    1e92:	9a 83       	std	Y+2, r25	; 0x02
    1e94:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);
		LED_voidOff(Leds[3-i]);
    1e96:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e98:	28 2f       	mov	r18, r24
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	83 e0       	ldi	r24, 0x03	; 3
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	ac 01       	movw	r20, r24
    1ea2:	42 1b       	sub	r20, r18
    1ea4:	53 0b       	sbc	r21, r19
    1ea6:	9a 01       	movw	r18, r20
    1ea8:	c9 01       	movw	r24, r18
    1eaa:	88 0f       	add	r24, r24
    1eac:	99 1f       	adc	r25, r25
    1eae:	82 0f       	add	r24, r18
    1eb0:	93 1f       	adc	r25, r19
    1eb2:	fc 01       	movw	r30, r24
    1eb4:	e8 59       	subi	r30, 0x98	; 152
    1eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb8:	60 81       	ld	r22, Z
    1eba:	71 81       	ldd	r23, Z+1	; 0x01
    1ebc:	82 81       	ldd	r24, Z+2	; 0x02
    1ebe:	0e 94 2f 06 	call	0xc5e	; 0xc5e <LED_voidOff>
		LED_voidOff(Leds[4+i]);
    1ec2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ec4:	88 2f       	mov	r24, r24
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	9c 01       	movw	r18, r24
    1eca:	2c 5f       	subi	r18, 0xFC	; 252
    1ecc:	3f 4f       	sbci	r19, 0xFF	; 255
    1ece:	c9 01       	movw	r24, r18
    1ed0:	88 0f       	add	r24, r24
    1ed2:	99 1f       	adc	r25, r25
    1ed4:	82 0f       	add	r24, r18
    1ed6:	93 1f       	adc	r25, r19
    1ed8:	fc 01       	movw	r30, r24
    1eda:	e8 59       	subi	r30, 0x98	; 152
    1edc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ede:	60 81       	ld	r22, Z
    1ee0:	71 81       	ldd	r23, Z+1	; 0x01
    1ee2:	82 81       	ldd	r24, Z+2	; 0x02
    1ee4:	0e 94 2f 06 	call	0xc5e	; 0xc5e <LED_voidOff>
		LED_voidOff(Leds[7-i]);
	}
}

void TwoLedsDivergingEvery250ms(){
	for(u8 i=0;i<4;i++)
    1ee8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1eea:	8f 5f       	subi	r24, 0xFF	; 255
    1eec:	8f 87       	std	Y+15, r24	; 0x0f
    1eee:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ef0:	84 30       	cpi	r24, 0x04	; 4
    1ef2:	08 f4       	brcc	.+2      	; 0x1ef6 <TwoLedsDivergingEvery250ms+0x1ae>
    1ef4:	35 cf       	rjmp	.-406    	; 0x1d60 <TwoLedsDivergingEvery250ms+0x18>
		LED_voidOn(Leds[4+i]);
		_delay_ms(250);
		LED_voidOff(Leds[3-i]);
		LED_voidOff(Leds[4+i]);
	}
}
    1ef6:	2f 96       	adiw	r28, 0x0f	; 15
    1ef8:	0f b6       	in	r0, 0x3f	; 63
    1efa:	f8 94       	cli
    1efc:	de bf       	out	0x3e, r29	; 62
    1efe:	0f be       	out	0x3f, r0	; 63
    1f00:	cd bf       	out	0x3d, r28	; 61
    1f02:	cf 91       	pop	r28
    1f04:	df 91       	pop	r29
    1f06:	08 95       	ret

00001f08 <PingPongEffectEvery250ms>:

void PingPongEffectEvery250ms(){
    1f08:	df 93       	push	r29
    1f0a:	cf 93       	push	r28
    1f0c:	cd b7       	in	r28, 0x3d	; 61
    1f0e:	de b7       	in	r29, 0x3e	; 62
    1f10:	ac 97       	sbiw	r28, 0x2c	; 44
    1f12:	0f b6       	in	r0, 0x3f	; 63
    1f14:	f8 94       	cli
    1f16:	de bf       	out	0x3e, r29	; 62
    1f18:	0f be       	out	0x3f, r0	; 63
    1f1a:	cd bf       	out	0x3d, r28	; 61
	for(u8 i=0;i<8;i++)
    1f1c:	1c a6       	std	Y+44, r1	; 0x2c
    1f1e:	95 c0       	rjmp	.+298    	; 0x204a <PingPongEffectEvery250ms+0x142>
	{
		LED_voidOn(Leds[i]);
    1f20:	8c a5       	ldd	r24, Y+44	; 0x2c
    1f22:	28 2f       	mov	r18, r24
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	c9 01       	movw	r24, r18
    1f28:	88 0f       	add	r24, r24
    1f2a:	99 1f       	adc	r25, r25
    1f2c:	82 0f       	add	r24, r18
    1f2e:	93 1f       	adc	r25, r19
    1f30:	fc 01       	movw	r30, r24
    1f32:	e8 59       	subi	r30, 0x98	; 152
    1f34:	ff 4f       	sbci	r31, 0xFF	; 255
    1f36:	60 81       	ld	r22, Z
    1f38:	71 81       	ldd	r23, Z+1	; 0x01
    1f3a:	82 81       	ldd	r24, Z+2	; 0x02
    1f3c:	0e 94 0d 06 	call	0xc1a	; 0xc1a <LED_voidOn>
    1f40:	80 e0       	ldi	r24, 0x00	; 0
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	a8 ec       	ldi	r26, 0xC8	; 200
    1f46:	b2 e4       	ldi	r27, 0x42	; 66
    1f48:	8f a3       	std	Y+39, r24	; 0x27
    1f4a:	98 a7       	std	Y+40, r25	; 0x28
    1f4c:	a9 a7       	std	Y+41, r26	; 0x29
    1f4e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f50:	6f a1       	ldd	r22, Y+39	; 0x27
    1f52:	78 a5       	ldd	r23, Y+40	; 0x28
    1f54:	89 a5       	ldd	r24, Y+41	; 0x29
    1f56:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	4a ef       	ldi	r20, 0xFA	; 250
    1f5e:	54 e4       	ldi	r21, 0x44	; 68
    1f60:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f64:	dc 01       	movw	r26, r24
    1f66:	cb 01       	movw	r24, r22
    1f68:	8b a3       	std	Y+35, r24	; 0x23
    1f6a:	9c a3       	std	Y+36, r25	; 0x24
    1f6c:	ad a3       	std	Y+37, r26	; 0x25
    1f6e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f70:	6b a1       	ldd	r22, Y+35	; 0x23
    1f72:	7c a1       	ldd	r23, Y+36	; 0x24
    1f74:	8d a1       	ldd	r24, Y+37	; 0x25
    1f76:	9e a1       	ldd	r25, Y+38	; 0x26
    1f78:	20 e0       	ldi	r18, 0x00	; 0
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	40 e8       	ldi	r20, 0x80	; 128
    1f7e:	5f e3       	ldi	r21, 0x3F	; 63
    1f80:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f84:	88 23       	and	r24, r24
    1f86:	2c f4       	brge	.+10     	; 0x1f92 <PingPongEffectEvery250ms+0x8a>
		__ticks = 1;
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	9a a3       	std	Y+34, r25	; 0x22
    1f8e:	89 a3       	std	Y+33, r24	; 0x21
    1f90:	3f c0       	rjmp	.+126    	; 0x2010 <PingPongEffectEvery250ms+0x108>
	else if (__tmp > 65535)
    1f92:	6b a1       	ldd	r22, Y+35	; 0x23
    1f94:	7c a1       	ldd	r23, Y+36	; 0x24
    1f96:	8d a1       	ldd	r24, Y+37	; 0x25
    1f98:	9e a1       	ldd	r25, Y+38	; 0x26
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	3f ef       	ldi	r19, 0xFF	; 255
    1f9e:	4f e7       	ldi	r20, 0x7F	; 127
    1fa0:	57 e4       	ldi	r21, 0x47	; 71
    1fa2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1fa6:	18 16       	cp	r1, r24
    1fa8:	4c f5       	brge	.+82     	; 0x1ffc <PingPongEffectEvery250ms+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1faa:	6f a1       	ldd	r22, Y+39	; 0x27
    1fac:	78 a5       	ldd	r23, Y+40	; 0x28
    1fae:	89 a5       	ldd	r24, Y+41	; 0x29
    1fb0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	40 e2       	ldi	r20, 0x20	; 32
    1fb8:	51 e4       	ldi	r21, 0x41	; 65
    1fba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	cb 01       	movw	r24, r22
    1fc2:	bc 01       	movw	r22, r24
    1fc4:	cd 01       	movw	r24, r26
    1fc6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	9a a3       	std	Y+34, r25	; 0x22
    1fd0:	89 a3       	std	Y+33, r24	; 0x21
    1fd2:	0f c0       	rjmp	.+30     	; 0x1ff2 <PingPongEffectEvery250ms+0xea>
    1fd4:	88 ec       	ldi	r24, 0xC8	; 200
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	98 a3       	std	Y+32, r25	; 0x20
    1fda:	8f 8f       	std	Y+31, r24	; 0x1f
    1fdc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fde:	98 a1       	ldd	r25, Y+32	; 0x20
    1fe0:	01 97       	sbiw	r24, 0x01	; 1
    1fe2:	f1 f7       	brne	.-4      	; 0x1fe0 <PingPongEffectEvery250ms+0xd8>
    1fe4:	98 a3       	std	Y+32, r25	; 0x20
    1fe6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe8:	89 a1       	ldd	r24, Y+33	; 0x21
    1fea:	9a a1       	ldd	r25, Y+34	; 0x22
    1fec:	01 97       	sbiw	r24, 0x01	; 1
    1fee:	9a a3       	std	Y+34, r25	; 0x22
    1ff0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ff2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ff4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ff6:	00 97       	sbiw	r24, 0x00	; 0
    1ff8:	69 f7       	brne	.-38     	; 0x1fd4 <PingPongEffectEvery250ms+0xcc>
    1ffa:	14 c0       	rjmp	.+40     	; 0x2024 <PingPongEffectEvery250ms+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ffc:	6b a1       	ldd	r22, Y+35	; 0x23
    1ffe:	7c a1       	ldd	r23, Y+36	; 0x24
    2000:	8d a1       	ldd	r24, Y+37	; 0x25
    2002:	9e a1       	ldd	r25, Y+38	; 0x26
    2004:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2008:	dc 01       	movw	r26, r24
    200a:	cb 01       	movw	r24, r22
    200c:	9a a3       	std	Y+34, r25	; 0x22
    200e:	89 a3       	std	Y+33, r24	; 0x21
    2010:	89 a1       	ldd	r24, Y+33	; 0x21
    2012:	9a a1       	ldd	r25, Y+34	; 0x22
    2014:	9e 8f       	std	Y+30, r25	; 0x1e
    2016:	8d 8f       	std	Y+29, r24	; 0x1d
    2018:	8d 8d       	ldd	r24, Y+29	; 0x1d
    201a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    201c:	01 97       	sbiw	r24, 0x01	; 1
    201e:	f1 f7       	brne	.-4      	; 0x201c <PingPongEffectEvery250ms+0x114>
    2020:	9e 8f       	std	Y+30, r25	; 0x1e
    2022:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(100);
		LED_voidOff(Leds[i]);
    2024:	8c a5       	ldd	r24, Y+44	; 0x2c
    2026:	28 2f       	mov	r18, r24
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	c9 01       	movw	r24, r18
    202c:	88 0f       	add	r24, r24
    202e:	99 1f       	adc	r25, r25
    2030:	82 0f       	add	r24, r18
    2032:	93 1f       	adc	r25, r19
    2034:	fc 01       	movw	r30, r24
    2036:	e8 59       	subi	r30, 0x98	; 152
    2038:	ff 4f       	sbci	r31, 0xFF	; 255
    203a:	60 81       	ld	r22, Z
    203c:	71 81       	ldd	r23, Z+1	; 0x01
    203e:	82 81       	ldd	r24, Z+2	; 0x02
    2040:	0e 94 2f 06 	call	0xc5e	; 0xc5e <LED_voidOff>
		LED_voidOff(Leds[4+i]);
	}
}

void PingPongEffectEvery250ms(){
	for(u8 i=0;i<8;i++)
    2044:	8c a5       	ldd	r24, Y+44	; 0x2c
    2046:	8f 5f       	subi	r24, 0xFF	; 255
    2048:	8c a7       	std	Y+44, r24	; 0x2c
    204a:	8c a5       	ldd	r24, Y+44	; 0x2c
    204c:	88 30       	cpi	r24, 0x08	; 8
    204e:	08 f4       	brcc	.+2      	; 0x2052 <PingPongEffectEvery250ms+0x14a>
    2050:	67 cf       	rjmp	.-306    	; 0x1f20 <PingPongEffectEvery250ms+0x18>
	{
		LED_voidOn(Leds[i]);
		_delay_ms(100);
		LED_voidOff(Leds[i]);
	}
	for(u8 i=0;i<8;i++)
    2052:	1b a6       	std	Y+43, r1	; 0x2b
    2054:	a1 c0       	rjmp	.+322    	; 0x2198 <PingPongEffectEvery250ms+0x290>
		{
			LED_voidOn     (Leds[7 - i]);
    2056:	8b a5       	ldd	r24, Y+43	; 0x2b
    2058:	28 2f       	mov	r18, r24
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	87 e0       	ldi	r24, 0x07	; 7
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	ac 01       	movw	r20, r24
    2062:	42 1b       	sub	r20, r18
    2064:	53 0b       	sbc	r21, r19
    2066:	9a 01       	movw	r18, r20
    2068:	c9 01       	movw	r24, r18
    206a:	88 0f       	add	r24, r24
    206c:	99 1f       	adc	r25, r25
    206e:	82 0f       	add	r24, r18
    2070:	93 1f       	adc	r25, r19
    2072:	fc 01       	movw	r30, r24
    2074:	e8 59       	subi	r30, 0x98	; 152
    2076:	ff 4f       	sbci	r31, 0xFF	; 255
    2078:	60 81       	ld	r22, Z
    207a:	71 81       	ldd	r23, Z+1	; 0x01
    207c:	82 81       	ldd	r24, Z+2	; 0x02
    207e:	0e 94 0d 06 	call	0xc1a	; 0xc1a <LED_voidOn>
    2082:	80 e0       	ldi	r24, 0x00	; 0
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	a8 ec       	ldi	r26, 0xC8	; 200
    2088:	b2 e4       	ldi	r27, 0x42	; 66
    208a:	89 8f       	std	Y+25, r24	; 0x19
    208c:	9a 8f       	std	Y+26, r25	; 0x1a
    208e:	ab 8f       	std	Y+27, r26	; 0x1b
    2090:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2092:	69 8d       	ldd	r22, Y+25	; 0x19
    2094:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2096:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2098:	9c 8d       	ldd	r25, Y+28	; 0x1c
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	4a ef       	ldi	r20, 0xFA	; 250
    20a0:	54 e4       	ldi	r21, 0x44	; 68
    20a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	8d 8b       	std	Y+21, r24	; 0x15
    20ac:	9e 8b       	std	Y+22, r25	; 0x16
    20ae:	af 8b       	std	Y+23, r26	; 0x17
    20b0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20b2:	6d 89       	ldd	r22, Y+21	; 0x15
    20b4:	7e 89       	ldd	r23, Y+22	; 0x16
    20b6:	8f 89       	ldd	r24, Y+23	; 0x17
    20b8:	98 8d       	ldd	r25, Y+24	; 0x18
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	40 e8       	ldi	r20, 0x80	; 128
    20c0:	5f e3       	ldi	r21, 0x3F	; 63
    20c2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20c6:	88 23       	and	r24, r24
    20c8:	2c f4       	brge	.+10     	; 0x20d4 <PingPongEffectEvery250ms+0x1cc>
		__ticks = 1;
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	9c 8b       	std	Y+20, r25	; 0x14
    20d0:	8b 8b       	std	Y+19, r24	; 0x13
    20d2:	3f c0       	rjmp	.+126    	; 0x2152 <PingPongEffectEvery250ms+0x24a>
	else if (__tmp > 65535)
    20d4:	6d 89       	ldd	r22, Y+21	; 0x15
    20d6:	7e 89       	ldd	r23, Y+22	; 0x16
    20d8:	8f 89       	ldd	r24, Y+23	; 0x17
    20da:	98 8d       	ldd	r25, Y+24	; 0x18
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	3f ef       	ldi	r19, 0xFF	; 255
    20e0:	4f e7       	ldi	r20, 0x7F	; 127
    20e2:	57 e4       	ldi	r21, 0x47	; 71
    20e4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20e8:	18 16       	cp	r1, r24
    20ea:	4c f5       	brge	.+82     	; 0x213e <PingPongEffectEvery250ms+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ec:	69 8d       	ldd	r22, Y+25	; 0x19
    20ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	40 e2       	ldi	r20, 0x20	; 32
    20fa:	51 e4       	ldi	r21, 0x41	; 65
    20fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	bc 01       	movw	r22, r24
    2106:	cd 01       	movw	r24, r26
    2108:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    210c:	dc 01       	movw	r26, r24
    210e:	cb 01       	movw	r24, r22
    2110:	9c 8b       	std	Y+20, r25	; 0x14
    2112:	8b 8b       	std	Y+19, r24	; 0x13
    2114:	0f c0       	rjmp	.+30     	; 0x2134 <PingPongEffectEvery250ms+0x22c>
    2116:	88 ec       	ldi	r24, 0xC8	; 200
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	9a 8b       	std	Y+18, r25	; 0x12
    211c:	89 8b       	std	Y+17, r24	; 0x11
    211e:	89 89       	ldd	r24, Y+17	; 0x11
    2120:	9a 89       	ldd	r25, Y+18	; 0x12
    2122:	01 97       	sbiw	r24, 0x01	; 1
    2124:	f1 f7       	brne	.-4      	; 0x2122 <PingPongEffectEvery250ms+0x21a>
    2126:	9a 8b       	std	Y+18, r25	; 0x12
    2128:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    212a:	8b 89       	ldd	r24, Y+19	; 0x13
    212c:	9c 89       	ldd	r25, Y+20	; 0x14
    212e:	01 97       	sbiw	r24, 0x01	; 1
    2130:	9c 8b       	std	Y+20, r25	; 0x14
    2132:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2134:	8b 89       	ldd	r24, Y+19	; 0x13
    2136:	9c 89       	ldd	r25, Y+20	; 0x14
    2138:	00 97       	sbiw	r24, 0x00	; 0
    213a:	69 f7       	brne	.-38     	; 0x2116 <PingPongEffectEvery250ms+0x20e>
    213c:	14 c0       	rjmp	.+40     	; 0x2166 <PingPongEffectEvery250ms+0x25e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    213e:	6d 89       	ldd	r22, Y+21	; 0x15
    2140:	7e 89       	ldd	r23, Y+22	; 0x16
    2142:	8f 89       	ldd	r24, Y+23	; 0x17
    2144:	98 8d       	ldd	r25, Y+24	; 0x18
    2146:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	9c 8b       	std	Y+20, r25	; 0x14
    2150:	8b 8b       	std	Y+19, r24	; 0x13
    2152:	8b 89       	ldd	r24, Y+19	; 0x13
    2154:	9c 89       	ldd	r25, Y+20	; 0x14
    2156:	98 8b       	std	Y+16, r25	; 0x10
    2158:	8f 87       	std	Y+15, r24	; 0x0f
    215a:	8f 85       	ldd	r24, Y+15	; 0x0f
    215c:	98 89       	ldd	r25, Y+16	; 0x10
    215e:	01 97       	sbiw	r24, 0x01	; 1
    2160:	f1 f7       	brne	.-4      	; 0x215e <PingPongEffectEvery250ms+0x256>
    2162:	98 8b       	std	Y+16, r25	; 0x10
    2164:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(100);
			LED_voidOff     (Leds[7 - i]);
    2166:	8b a5       	ldd	r24, Y+43	; 0x2b
    2168:	28 2f       	mov	r18, r24
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	87 e0       	ldi	r24, 0x07	; 7
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	ac 01       	movw	r20, r24
    2172:	42 1b       	sub	r20, r18
    2174:	53 0b       	sbc	r21, r19
    2176:	9a 01       	movw	r18, r20
    2178:	c9 01       	movw	r24, r18
    217a:	88 0f       	add	r24, r24
    217c:	99 1f       	adc	r25, r25
    217e:	82 0f       	add	r24, r18
    2180:	93 1f       	adc	r25, r19
    2182:	fc 01       	movw	r30, r24
    2184:	e8 59       	subi	r30, 0x98	; 152
    2186:	ff 4f       	sbci	r31, 0xFF	; 255
    2188:	60 81       	ld	r22, Z
    218a:	71 81       	ldd	r23, Z+1	; 0x01
    218c:	82 81       	ldd	r24, Z+2	; 0x02
    218e:	0e 94 2f 06 	call	0xc5e	; 0xc5e <LED_voidOff>
	{
		LED_voidOn(Leds[i]);
		_delay_ms(100);
		LED_voidOff(Leds[i]);
	}
	for(u8 i=0;i<8;i++)
    2192:	8b a5       	ldd	r24, Y+43	; 0x2b
    2194:	8f 5f       	subi	r24, 0xFF	; 255
    2196:	8b a7       	std	Y+43, r24	; 0x2b
    2198:	8b a5       	ldd	r24, Y+43	; 0x2b
    219a:	88 30       	cpi	r24, 0x08	; 8
    219c:	08 f4       	brcc	.+2      	; 0x21a0 <PingPongEffectEvery250ms+0x298>
    219e:	5b cf       	rjmp	.-330    	; 0x2056 <PingPongEffectEvery250ms+0x14e>
    21a0:	80 e0       	ldi	r24, 0x00	; 0
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	aa e7       	ldi	r26, 0x7A	; 122
    21a6:	b3 e4       	ldi	r27, 0x43	; 67
    21a8:	8b 87       	std	Y+11, r24	; 0x0b
    21aa:	9c 87       	std	Y+12, r25	; 0x0c
    21ac:	ad 87       	std	Y+13, r26	; 0x0d
    21ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    21b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    21b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    21b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    21b8:	20 e0       	ldi	r18, 0x00	; 0
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	4a ef       	ldi	r20, 0xFA	; 250
    21be:	54 e4       	ldi	r21, 0x44	; 68
    21c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21c4:	dc 01       	movw	r26, r24
    21c6:	cb 01       	movw	r24, r22
    21c8:	8f 83       	std	Y+7, r24	; 0x07
    21ca:	98 87       	std	Y+8, r25	; 0x08
    21cc:	a9 87       	std	Y+9, r26	; 0x09
    21ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21d0:	6f 81       	ldd	r22, Y+7	; 0x07
    21d2:	78 85       	ldd	r23, Y+8	; 0x08
    21d4:	89 85       	ldd	r24, Y+9	; 0x09
    21d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d8:	20 e0       	ldi	r18, 0x00	; 0
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	40 e8       	ldi	r20, 0x80	; 128
    21de:	5f e3       	ldi	r21, 0x3F	; 63
    21e0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21e4:	88 23       	and	r24, r24
    21e6:	2c f4       	brge	.+10     	; 0x21f2 <PingPongEffectEvery250ms+0x2ea>
		__ticks = 1;
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	9e 83       	std	Y+6, r25	; 0x06
    21ee:	8d 83       	std	Y+5, r24	; 0x05
    21f0:	3f c0       	rjmp	.+126    	; 0x2270 <PingPongEffectEvery250ms+0x368>
	else if (__tmp > 65535)
    21f2:	6f 81       	ldd	r22, Y+7	; 0x07
    21f4:	78 85       	ldd	r23, Y+8	; 0x08
    21f6:	89 85       	ldd	r24, Y+9	; 0x09
    21f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21fa:	20 e0       	ldi	r18, 0x00	; 0
    21fc:	3f ef       	ldi	r19, 0xFF	; 255
    21fe:	4f e7       	ldi	r20, 0x7F	; 127
    2200:	57 e4       	ldi	r21, 0x47	; 71
    2202:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2206:	18 16       	cp	r1, r24
    2208:	4c f5       	brge	.+82     	; 0x225c <PingPongEffectEvery250ms+0x354>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    220a:	6b 85       	ldd	r22, Y+11	; 0x0b
    220c:	7c 85       	ldd	r23, Y+12	; 0x0c
    220e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2210:	9e 85       	ldd	r25, Y+14	; 0x0e
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	40 e2       	ldi	r20, 0x20	; 32
    2218:	51 e4       	ldi	r21, 0x41	; 65
    221a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    221e:	dc 01       	movw	r26, r24
    2220:	cb 01       	movw	r24, r22
    2222:	bc 01       	movw	r22, r24
    2224:	cd 01       	movw	r24, r26
    2226:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    222a:	dc 01       	movw	r26, r24
    222c:	cb 01       	movw	r24, r22
    222e:	9e 83       	std	Y+6, r25	; 0x06
    2230:	8d 83       	std	Y+5, r24	; 0x05
    2232:	0f c0       	rjmp	.+30     	; 0x2252 <PingPongEffectEvery250ms+0x34a>
    2234:	88 ec       	ldi	r24, 0xC8	; 200
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	9c 83       	std	Y+4, r25	; 0x04
    223a:	8b 83       	std	Y+3, r24	; 0x03
    223c:	8b 81       	ldd	r24, Y+3	; 0x03
    223e:	9c 81       	ldd	r25, Y+4	; 0x04
    2240:	01 97       	sbiw	r24, 0x01	; 1
    2242:	f1 f7       	brne	.-4      	; 0x2240 <PingPongEffectEvery250ms+0x338>
    2244:	9c 83       	std	Y+4, r25	; 0x04
    2246:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2248:	8d 81       	ldd	r24, Y+5	; 0x05
    224a:	9e 81       	ldd	r25, Y+6	; 0x06
    224c:	01 97       	sbiw	r24, 0x01	; 1
    224e:	9e 83       	std	Y+6, r25	; 0x06
    2250:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2252:	8d 81       	ldd	r24, Y+5	; 0x05
    2254:	9e 81       	ldd	r25, Y+6	; 0x06
    2256:	00 97       	sbiw	r24, 0x00	; 0
    2258:	69 f7       	brne	.-38     	; 0x2234 <PingPongEffectEvery250ms+0x32c>
    225a:	14 c0       	rjmp	.+40     	; 0x2284 <PingPongEffectEvery250ms+0x37c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    225c:	6f 81       	ldd	r22, Y+7	; 0x07
    225e:	78 85       	ldd	r23, Y+8	; 0x08
    2260:	89 85       	ldd	r24, Y+9	; 0x09
    2262:	9a 85       	ldd	r25, Y+10	; 0x0a
    2264:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2268:	dc 01       	movw	r26, r24
    226a:	cb 01       	movw	r24, r22
    226c:	9e 83       	std	Y+6, r25	; 0x06
    226e:	8d 83       	std	Y+5, r24	; 0x05
    2270:	8d 81       	ldd	r24, Y+5	; 0x05
    2272:	9e 81       	ldd	r25, Y+6	; 0x06
    2274:	9a 83       	std	Y+2, r25	; 0x02
    2276:	89 83       	std	Y+1, r24	; 0x01
    2278:	89 81       	ldd	r24, Y+1	; 0x01
    227a:	9a 81       	ldd	r25, Y+2	; 0x02
    227c:	01 97       	sbiw	r24, 0x01	; 1
    227e:	f1 f7       	brne	.-4      	; 0x227c <PingPongEffectEvery250ms+0x374>
    2280:	9a 83       	std	Y+2, r25	; 0x02
    2282:	89 83       	std	Y+1, r24	; 0x01
			LED_voidOn     (Leds[7 - i]);
			_delay_ms(100);
			LED_voidOff     (Leds[7 - i]);
		}
	_delay_ms(250);
}
    2284:	ac 96       	adiw	r28, 0x2c	; 44
    2286:	0f b6       	in	r0, 0x3f	; 63
    2288:	f8 94       	cli
    228a:	de bf       	out	0x3e, r29	; 62
    228c:	0f be       	out	0x3f, r0	; 63
    228e:	cd bf       	out	0x3d, r28	; 61
    2290:	cf 91       	pop	r28
    2292:	df 91       	pop	r29
    2294:	08 95       	ret

00002296 <Incrementing_SnakeEffect_Every250>:


void Incrementing_SnakeEffect_Every250(){
    2296:	df 93       	push	r29
    2298:	cf 93       	push	r28
    229a:	cd b7       	in	r28, 0x3d	; 61
    229c:	de b7       	in	r29, 0x3e	; 62
    229e:	6e 97       	sbiw	r28, 0x1e	; 30
    22a0:	0f b6       	in	r0, 0x3f	; 63
    22a2:	f8 94       	cli
    22a4:	de bf       	out	0x3e, r29	; 62
    22a6:	0f be       	out	0x3f, r0	; 63
    22a8:	cd bf       	out	0x3d, r28	; 61
	for(u8 i=0;i<8;i++)
    22aa:	1e 8e       	std	Y+30, r1	; 0x1e
    22ac:	85 c0       	rjmp	.+266    	; 0x23b8 <Incrementing_SnakeEffect_Every250+0x122>
	{
		LED_voidOn(Leds[i]);
    22ae:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22b0:	28 2f       	mov	r18, r24
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	c9 01       	movw	r24, r18
    22b6:	88 0f       	add	r24, r24
    22b8:	99 1f       	adc	r25, r25
    22ba:	82 0f       	add	r24, r18
    22bc:	93 1f       	adc	r25, r19
    22be:	fc 01       	movw	r30, r24
    22c0:	e8 59       	subi	r30, 0x98	; 152
    22c2:	ff 4f       	sbci	r31, 0xFF	; 255
    22c4:	60 81       	ld	r22, Z
    22c6:	71 81       	ldd	r23, Z+1	; 0x01
    22c8:	82 81       	ldd	r24, Z+2	; 0x02
    22ca:	0e 94 0d 06 	call	0xc1a	; 0xc1a <LED_voidOn>
    22ce:	80 e0       	ldi	r24, 0x00	; 0
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	aa e7       	ldi	r26, 0x7A	; 122
    22d4:	b3 e4       	ldi	r27, 0x43	; 67
    22d6:	89 8f       	std	Y+25, r24	; 0x19
    22d8:	9a 8f       	std	Y+26, r25	; 0x1a
    22da:	ab 8f       	std	Y+27, r26	; 0x1b
    22dc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22de:	69 8d       	ldd	r22, Y+25	; 0x19
    22e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	4a ef       	ldi	r20, 0xFA	; 250
    22ec:	54 e4       	ldi	r21, 0x44	; 68
    22ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22f2:	dc 01       	movw	r26, r24
    22f4:	cb 01       	movw	r24, r22
    22f6:	8d 8b       	std	Y+21, r24	; 0x15
    22f8:	9e 8b       	std	Y+22, r25	; 0x16
    22fa:	af 8b       	std	Y+23, r26	; 0x17
    22fc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22fe:	6d 89       	ldd	r22, Y+21	; 0x15
    2300:	7e 89       	ldd	r23, Y+22	; 0x16
    2302:	8f 89       	ldd	r24, Y+23	; 0x17
    2304:	98 8d       	ldd	r25, Y+24	; 0x18
    2306:	20 e0       	ldi	r18, 0x00	; 0
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	40 e8       	ldi	r20, 0x80	; 128
    230c:	5f e3       	ldi	r21, 0x3F	; 63
    230e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2312:	88 23       	and	r24, r24
    2314:	2c f4       	brge	.+10     	; 0x2320 <Incrementing_SnakeEffect_Every250+0x8a>
		__ticks = 1;
    2316:	81 e0       	ldi	r24, 0x01	; 1
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	9c 8b       	std	Y+20, r25	; 0x14
    231c:	8b 8b       	std	Y+19, r24	; 0x13
    231e:	3f c0       	rjmp	.+126    	; 0x239e <Incrementing_SnakeEffect_Every250+0x108>
	else if (__tmp > 65535)
    2320:	6d 89       	ldd	r22, Y+21	; 0x15
    2322:	7e 89       	ldd	r23, Y+22	; 0x16
    2324:	8f 89       	ldd	r24, Y+23	; 0x17
    2326:	98 8d       	ldd	r25, Y+24	; 0x18
    2328:	20 e0       	ldi	r18, 0x00	; 0
    232a:	3f ef       	ldi	r19, 0xFF	; 255
    232c:	4f e7       	ldi	r20, 0x7F	; 127
    232e:	57 e4       	ldi	r21, 0x47	; 71
    2330:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2334:	18 16       	cp	r1, r24
    2336:	4c f5       	brge	.+82     	; 0x238a <Incrementing_SnakeEffect_Every250+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2338:	69 8d       	ldd	r22, Y+25	; 0x19
    233a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    233c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    233e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2340:	20 e0       	ldi	r18, 0x00	; 0
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	40 e2       	ldi	r20, 0x20	; 32
    2346:	51 e4       	ldi	r21, 0x41	; 65
    2348:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    234c:	dc 01       	movw	r26, r24
    234e:	cb 01       	movw	r24, r22
    2350:	bc 01       	movw	r22, r24
    2352:	cd 01       	movw	r24, r26
    2354:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2358:	dc 01       	movw	r26, r24
    235a:	cb 01       	movw	r24, r22
    235c:	9c 8b       	std	Y+20, r25	; 0x14
    235e:	8b 8b       	std	Y+19, r24	; 0x13
    2360:	0f c0       	rjmp	.+30     	; 0x2380 <Incrementing_SnakeEffect_Every250+0xea>
    2362:	88 ec       	ldi	r24, 0xC8	; 200
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	9a 8b       	std	Y+18, r25	; 0x12
    2368:	89 8b       	std	Y+17, r24	; 0x11
    236a:	89 89       	ldd	r24, Y+17	; 0x11
    236c:	9a 89       	ldd	r25, Y+18	; 0x12
    236e:	01 97       	sbiw	r24, 0x01	; 1
    2370:	f1 f7       	brne	.-4      	; 0x236e <Incrementing_SnakeEffect_Every250+0xd8>
    2372:	9a 8b       	std	Y+18, r25	; 0x12
    2374:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2376:	8b 89       	ldd	r24, Y+19	; 0x13
    2378:	9c 89       	ldd	r25, Y+20	; 0x14
    237a:	01 97       	sbiw	r24, 0x01	; 1
    237c:	9c 8b       	std	Y+20, r25	; 0x14
    237e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2380:	8b 89       	ldd	r24, Y+19	; 0x13
    2382:	9c 89       	ldd	r25, Y+20	; 0x14
    2384:	00 97       	sbiw	r24, 0x00	; 0
    2386:	69 f7       	brne	.-38     	; 0x2362 <Incrementing_SnakeEffect_Every250+0xcc>
    2388:	14 c0       	rjmp	.+40     	; 0x23b2 <Incrementing_SnakeEffect_Every250+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    238a:	6d 89       	ldd	r22, Y+21	; 0x15
    238c:	7e 89       	ldd	r23, Y+22	; 0x16
    238e:	8f 89       	ldd	r24, Y+23	; 0x17
    2390:	98 8d       	ldd	r25, Y+24	; 0x18
    2392:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2396:	dc 01       	movw	r26, r24
    2398:	cb 01       	movw	r24, r22
    239a:	9c 8b       	std	Y+20, r25	; 0x14
    239c:	8b 8b       	std	Y+19, r24	; 0x13
    239e:	8b 89       	ldd	r24, Y+19	; 0x13
    23a0:	9c 89       	ldd	r25, Y+20	; 0x14
    23a2:	98 8b       	std	Y+16, r25	; 0x10
    23a4:	8f 87       	std	Y+15, r24	; 0x0f
    23a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    23a8:	98 89       	ldd	r25, Y+16	; 0x10
    23aa:	01 97       	sbiw	r24, 0x01	; 1
    23ac:	f1 f7       	brne	.-4      	; 0x23aa <Incrementing_SnakeEffect_Every250+0x114>
    23ae:	98 8b       	std	Y+16, r25	; 0x10
    23b0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(250);
}


void Incrementing_SnakeEffect_Every250(){
	for(u8 i=0;i<8;i++)
    23b2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23b4:	8f 5f       	subi	r24, 0xFF	; 255
    23b6:	8e 8f       	std	Y+30, r24	; 0x1e
    23b8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23ba:	88 30       	cpi	r24, 0x08	; 8
    23bc:	08 f4       	brcc	.+2      	; 0x23c0 <Incrementing_SnakeEffect_Every250+0x12a>
    23be:	77 cf       	rjmp	.-274    	; 0x22ae <Incrementing_SnakeEffect_Every250+0x18>
	{
		LED_voidOn(Leds[i]);
		_delay_ms(250);
	}
	for(u8 i=0;i<8;i++)
    23c0:	1d 8e       	std	Y+29, r1	; 0x1d
    23c2:	13 c0       	rjmp	.+38     	; 0x23ea <Incrementing_SnakeEffect_Every250+0x154>
	{
		LED_voidOff(Leds[i]);
    23c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23c6:	28 2f       	mov	r18, r24
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	c9 01       	movw	r24, r18
    23cc:	88 0f       	add	r24, r24
    23ce:	99 1f       	adc	r25, r25
    23d0:	82 0f       	add	r24, r18
    23d2:	93 1f       	adc	r25, r19
    23d4:	fc 01       	movw	r30, r24
    23d6:	e8 59       	subi	r30, 0x98	; 152
    23d8:	ff 4f       	sbci	r31, 0xFF	; 255
    23da:	60 81       	ld	r22, Z
    23dc:	71 81       	ldd	r23, Z+1	; 0x01
    23de:	82 81       	ldd	r24, Z+2	; 0x02
    23e0:	0e 94 2f 06 	call	0xc5e	; 0xc5e <LED_voidOff>
	for(u8 i=0;i<8;i++)
	{
		LED_voidOn(Leds[i]);
		_delay_ms(250);
	}
	for(u8 i=0;i<8;i++)
    23e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23e6:	8f 5f       	subi	r24, 0xFF	; 255
    23e8:	8d 8f       	std	Y+29, r24	; 0x1d
    23ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23ec:	88 30       	cpi	r24, 0x08	; 8
    23ee:	50 f3       	brcs	.-44     	; 0x23c4 <Incrementing_SnakeEffect_Every250+0x12e>
    23f0:	80 e0       	ldi	r24, 0x00	; 0
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	aa e7       	ldi	r26, 0x7A	; 122
    23f6:	b3 e4       	ldi	r27, 0x43	; 67
    23f8:	8b 87       	std	Y+11, r24	; 0x0b
    23fa:	9c 87       	std	Y+12, r25	; 0x0c
    23fc:	ad 87       	std	Y+13, r26	; 0x0d
    23fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2400:	6b 85       	ldd	r22, Y+11	; 0x0b
    2402:	7c 85       	ldd	r23, Y+12	; 0x0c
    2404:	8d 85       	ldd	r24, Y+13	; 0x0d
    2406:	9e 85       	ldd	r25, Y+14	; 0x0e
    2408:	20 e0       	ldi	r18, 0x00	; 0
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	4a ef       	ldi	r20, 0xFA	; 250
    240e:	54 e4       	ldi	r21, 0x44	; 68
    2410:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2414:	dc 01       	movw	r26, r24
    2416:	cb 01       	movw	r24, r22
    2418:	8f 83       	std	Y+7, r24	; 0x07
    241a:	98 87       	std	Y+8, r25	; 0x08
    241c:	a9 87       	std	Y+9, r26	; 0x09
    241e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2420:	6f 81       	ldd	r22, Y+7	; 0x07
    2422:	78 85       	ldd	r23, Y+8	; 0x08
    2424:	89 85       	ldd	r24, Y+9	; 0x09
    2426:	9a 85       	ldd	r25, Y+10	; 0x0a
    2428:	20 e0       	ldi	r18, 0x00	; 0
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	40 e8       	ldi	r20, 0x80	; 128
    242e:	5f e3       	ldi	r21, 0x3F	; 63
    2430:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2434:	88 23       	and	r24, r24
    2436:	2c f4       	brge	.+10     	; 0x2442 <Incrementing_SnakeEffect_Every250+0x1ac>
		__ticks = 1;
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	9e 83       	std	Y+6, r25	; 0x06
    243e:	8d 83       	std	Y+5, r24	; 0x05
    2440:	3f c0       	rjmp	.+126    	; 0x24c0 <Incrementing_SnakeEffect_Every250+0x22a>
	else if (__tmp > 65535)
    2442:	6f 81       	ldd	r22, Y+7	; 0x07
    2444:	78 85       	ldd	r23, Y+8	; 0x08
    2446:	89 85       	ldd	r24, Y+9	; 0x09
    2448:	9a 85       	ldd	r25, Y+10	; 0x0a
    244a:	20 e0       	ldi	r18, 0x00	; 0
    244c:	3f ef       	ldi	r19, 0xFF	; 255
    244e:	4f e7       	ldi	r20, 0x7F	; 127
    2450:	57 e4       	ldi	r21, 0x47	; 71
    2452:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2456:	18 16       	cp	r1, r24
    2458:	4c f5       	brge	.+82     	; 0x24ac <Incrementing_SnakeEffect_Every250+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    245a:	6b 85       	ldd	r22, Y+11	; 0x0b
    245c:	7c 85       	ldd	r23, Y+12	; 0x0c
    245e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2460:	9e 85       	ldd	r25, Y+14	; 0x0e
    2462:	20 e0       	ldi	r18, 0x00	; 0
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	40 e2       	ldi	r20, 0x20	; 32
    2468:	51 e4       	ldi	r21, 0x41	; 65
    246a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    246e:	dc 01       	movw	r26, r24
    2470:	cb 01       	movw	r24, r22
    2472:	bc 01       	movw	r22, r24
    2474:	cd 01       	movw	r24, r26
    2476:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    247a:	dc 01       	movw	r26, r24
    247c:	cb 01       	movw	r24, r22
    247e:	9e 83       	std	Y+6, r25	; 0x06
    2480:	8d 83       	std	Y+5, r24	; 0x05
    2482:	0f c0       	rjmp	.+30     	; 0x24a2 <Incrementing_SnakeEffect_Every250+0x20c>
    2484:	88 ec       	ldi	r24, 0xC8	; 200
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	9c 83       	std	Y+4, r25	; 0x04
    248a:	8b 83       	std	Y+3, r24	; 0x03
    248c:	8b 81       	ldd	r24, Y+3	; 0x03
    248e:	9c 81       	ldd	r25, Y+4	; 0x04
    2490:	01 97       	sbiw	r24, 0x01	; 1
    2492:	f1 f7       	brne	.-4      	; 0x2490 <Incrementing_SnakeEffect_Every250+0x1fa>
    2494:	9c 83       	std	Y+4, r25	; 0x04
    2496:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2498:	8d 81       	ldd	r24, Y+5	; 0x05
    249a:	9e 81       	ldd	r25, Y+6	; 0x06
    249c:	01 97       	sbiw	r24, 0x01	; 1
    249e:	9e 83       	std	Y+6, r25	; 0x06
    24a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24a2:	8d 81       	ldd	r24, Y+5	; 0x05
    24a4:	9e 81       	ldd	r25, Y+6	; 0x06
    24a6:	00 97       	sbiw	r24, 0x00	; 0
    24a8:	69 f7       	brne	.-38     	; 0x2484 <Incrementing_SnakeEffect_Every250+0x1ee>
    24aa:	14 c0       	rjmp	.+40     	; 0x24d4 <Incrementing_SnakeEffect_Every250+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ac:	6f 81       	ldd	r22, Y+7	; 0x07
    24ae:	78 85       	ldd	r23, Y+8	; 0x08
    24b0:	89 85       	ldd	r24, Y+9	; 0x09
    24b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24b8:	dc 01       	movw	r26, r24
    24ba:	cb 01       	movw	r24, r22
    24bc:	9e 83       	std	Y+6, r25	; 0x06
    24be:	8d 83       	std	Y+5, r24	; 0x05
    24c0:	8d 81       	ldd	r24, Y+5	; 0x05
    24c2:	9e 81       	ldd	r25, Y+6	; 0x06
    24c4:	9a 83       	std	Y+2, r25	; 0x02
    24c6:	89 83       	std	Y+1, r24	; 0x01
    24c8:	89 81       	ldd	r24, Y+1	; 0x01
    24ca:	9a 81       	ldd	r25, Y+2	; 0x02
    24cc:	01 97       	sbiw	r24, 0x01	; 1
    24ce:	f1 f7       	brne	.-4      	; 0x24cc <Incrementing_SnakeEffect_Every250+0x236>
    24d0:	9a 83       	std	Y+2, r25	; 0x02
    24d2:	89 83       	std	Y+1, r24	; 0x01
	{
		LED_voidOff(Leds[i]);
	}
	_delay_ms(250);
}
    24d4:	6e 96       	adiw	r28, 0x1e	; 30
    24d6:	0f b6       	in	r0, 0x3f	; 63
    24d8:	f8 94       	cli
    24da:	de bf       	out	0x3e, r29	; 62
    24dc:	0f be       	out	0x3f, r0	; 63
    24de:	cd bf       	out	0x3d, r28	; 61
    24e0:	cf 91       	pop	r28
    24e2:	df 91       	pop	r29
    24e4:	08 95       	ret

000024e6 <TwoLedsConvergeDivergeEvery250ms>:
void TwoLedsConvergeDivergeEvery250ms () {
    24e6:	df 93       	push	r29
    24e8:	cf 93       	push	r28
    24ea:	cd b7       	in	r28, 0x3d	; 61
    24ec:	de b7       	in	r29, 0x3e	; 62
    24ee:	ac 97       	sbiw	r28, 0x2c	; 44
    24f0:	0f b6       	in	r0, 0x3f	; 63
    24f2:	f8 94       	cli
    24f4:	de bf       	out	0x3e, r29	; 62
    24f6:	0f be       	out	0x3f, r0	; 63
    24f8:	cd bf       	out	0x3d, r28	; 61
	for(u8 i=0;i<4;i++)
    24fa:	1c a6       	std	Y+44, r1	; 0x2c
    24fc:	c1 c0       	rjmp	.+386    	; 0x2680 <TwoLedsConvergeDivergeEvery250ms+0x19a>
		{
			LED_voidOn(Leds[i]);
    24fe:	8c a5       	ldd	r24, Y+44	; 0x2c
    2500:	28 2f       	mov	r18, r24
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	c9 01       	movw	r24, r18
    2506:	88 0f       	add	r24, r24
    2508:	99 1f       	adc	r25, r25
    250a:	82 0f       	add	r24, r18
    250c:	93 1f       	adc	r25, r19
    250e:	fc 01       	movw	r30, r24
    2510:	e8 59       	subi	r30, 0x98	; 152
    2512:	ff 4f       	sbci	r31, 0xFF	; 255
    2514:	60 81       	ld	r22, Z
    2516:	71 81       	ldd	r23, Z+1	; 0x01
    2518:	82 81       	ldd	r24, Z+2	; 0x02
    251a:	0e 94 0d 06 	call	0xc1a	; 0xc1a <LED_voidOn>
			LED_voidOn(Leds[7-i]);
    251e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2520:	28 2f       	mov	r18, r24
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	87 e0       	ldi	r24, 0x07	; 7
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	ac 01       	movw	r20, r24
    252a:	42 1b       	sub	r20, r18
    252c:	53 0b       	sbc	r21, r19
    252e:	9a 01       	movw	r18, r20
    2530:	c9 01       	movw	r24, r18
    2532:	88 0f       	add	r24, r24
    2534:	99 1f       	adc	r25, r25
    2536:	82 0f       	add	r24, r18
    2538:	93 1f       	adc	r25, r19
    253a:	fc 01       	movw	r30, r24
    253c:	e8 59       	subi	r30, 0x98	; 152
    253e:	ff 4f       	sbci	r31, 0xFF	; 255
    2540:	60 81       	ld	r22, Z
    2542:	71 81       	ldd	r23, Z+1	; 0x01
    2544:	82 81       	ldd	r24, Z+2	; 0x02
    2546:	0e 94 0d 06 	call	0xc1a	; 0xc1a <LED_voidOn>
    254a:	80 e0       	ldi	r24, 0x00	; 0
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	aa e7       	ldi	r26, 0x7A	; 122
    2550:	b3 e4       	ldi	r27, 0x43	; 67
    2552:	8f a3       	std	Y+39, r24	; 0x27
    2554:	98 a7       	std	Y+40, r25	; 0x28
    2556:	a9 a7       	std	Y+41, r26	; 0x29
    2558:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    255a:	6f a1       	ldd	r22, Y+39	; 0x27
    255c:	78 a5       	ldd	r23, Y+40	; 0x28
    255e:	89 a5       	ldd	r24, Y+41	; 0x29
    2560:	9a a5       	ldd	r25, Y+42	; 0x2a
    2562:	20 e0       	ldi	r18, 0x00	; 0
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	4a ef       	ldi	r20, 0xFA	; 250
    2568:	54 e4       	ldi	r21, 0x44	; 68
    256a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    256e:	dc 01       	movw	r26, r24
    2570:	cb 01       	movw	r24, r22
    2572:	8b a3       	std	Y+35, r24	; 0x23
    2574:	9c a3       	std	Y+36, r25	; 0x24
    2576:	ad a3       	std	Y+37, r26	; 0x25
    2578:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    257a:	6b a1       	ldd	r22, Y+35	; 0x23
    257c:	7c a1       	ldd	r23, Y+36	; 0x24
    257e:	8d a1       	ldd	r24, Y+37	; 0x25
    2580:	9e a1       	ldd	r25, Y+38	; 0x26
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	30 e0       	ldi	r19, 0x00	; 0
    2586:	40 e8       	ldi	r20, 0x80	; 128
    2588:	5f e3       	ldi	r21, 0x3F	; 63
    258a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    258e:	88 23       	and	r24, r24
    2590:	2c f4       	brge	.+10     	; 0x259c <TwoLedsConvergeDivergeEvery250ms+0xb6>
		__ticks = 1;
    2592:	81 e0       	ldi	r24, 0x01	; 1
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	9a a3       	std	Y+34, r25	; 0x22
    2598:	89 a3       	std	Y+33, r24	; 0x21
    259a:	3f c0       	rjmp	.+126    	; 0x261a <TwoLedsConvergeDivergeEvery250ms+0x134>
	else if (__tmp > 65535)
    259c:	6b a1       	ldd	r22, Y+35	; 0x23
    259e:	7c a1       	ldd	r23, Y+36	; 0x24
    25a0:	8d a1       	ldd	r24, Y+37	; 0x25
    25a2:	9e a1       	ldd	r25, Y+38	; 0x26
    25a4:	20 e0       	ldi	r18, 0x00	; 0
    25a6:	3f ef       	ldi	r19, 0xFF	; 255
    25a8:	4f e7       	ldi	r20, 0x7F	; 127
    25aa:	57 e4       	ldi	r21, 0x47	; 71
    25ac:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    25b0:	18 16       	cp	r1, r24
    25b2:	4c f5       	brge	.+82     	; 0x2606 <TwoLedsConvergeDivergeEvery250ms+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25b4:	6f a1       	ldd	r22, Y+39	; 0x27
    25b6:	78 a5       	ldd	r23, Y+40	; 0x28
    25b8:	89 a5       	ldd	r24, Y+41	; 0x29
    25ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    25bc:	20 e0       	ldi	r18, 0x00	; 0
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	40 e2       	ldi	r20, 0x20	; 32
    25c2:	51 e4       	ldi	r21, 0x41	; 65
    25c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25c8:	dc 01       	movw	r26, r24
    25ca:	cb 01       	movw	r24, r22
    25cc:	bc 01       	movw	r22, r24
    25ce:	cd 01       	movw	r24, r26
    25d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25d4:	dc 01       	movw	r26, r24
    25d6:	cb 01       	movw	r24, r22
    25d8:	9a a3       	std	Y+34, r25	; 0x22
    25da:	89 a3       	std	Y+33, r24	; 0x21
    25dc:	0f c0       	rjmp	.+30     	; 0x25fc <TwoLedsConvergeDivergeEvery250ms+0x116>
    25de:	88 ec       	ldi	r24, 0xC8	; 200
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	98 a3       	std	Y+32, r25	; 0x20
    25e4:	8f 8f       	std	Y+31, r24	; 0x1f
    25e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25e8:	98 a1       	ldd	r25, Y+32	; 0x20
    25ea:	01 97       	sbiw	r24, 0x01	; 1
    25ec:	f1 f7       	brne	.-4      	; 0x25ea <TwoLedsConvergeDivergeEvery250ms+0x104>
    25ee:	98 a3       	std	Y+32, r25	; 0x20
    25f0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25f2:	89 a1       	ldd	r24, Y+33	; 0x21
    25f4:	9a a1       	ldd	r25, Y+34	; 0x22
    25f6:	01 97       	sbiw	r24, 0x01	; 1
    25f8:	9a a3       	std	Y+34, r25	; 0x22
    25fa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25fc:	89 a1       	ldd	r24, Y+33	; 0x21
    25fe:	9a a1       	ldd	r25, Y+34	; 0x22
    2600:	00 97       	sbiw	r24, 0x00	; 0
    2602:	69 f7       	brne	.-38     	; 0x25de <TwoLedsConvergeDivergeEvery250ms+0xf8>
    2604:	14 c0       	rjmp	.+40     	; 0x262e <TwoLedsConvergeDivergeEvery250ms+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2606:	6b a1       	ldd	r22, Y+35	; 0x23
    2608:	7c a1       	ldd	r23, Y+36	; 0x24
    260a:	8d a1       	ldd	r24, Y+37	; 0x25
    260c:	9e a1       	ldd	r25, Y+38	; 0x26
    260e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2612:	dc 01       	movw	r26, r24
    2614:	cb 01       	movw	r24, r22
    2616:	9a a3       	std	Y+34, r25	; 0x22
    2618:	89 a3       	std	Y+33, r24	; 0x21
    261a:	89 a1       	ldd	r24, Y+33	; 0x21
    261c:	9a a1       	ldd	r25, Y+34	; 0x22
    261e:	9e 8f       	std	Y+30, r25	; 0x1e
    2620:	8d 8f       	std	Y+29, r24	; 0x1d
    2622:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2624:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2626:	01 97       	sbiw	r24, 0x01	; 1
    2628:	f1 f7       	brne	.-4      	; 0x2626 <TwoLedsConvergeDivergeEvery250ms+0x140>
    262a:	9e 8f       	std	Y+30, r25	; 0x1e
    262c:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(250);
			LED_voidOff(Leds[i]);
    262e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2630:	28 2f       	mov	r18, r24
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	c9 01       	movw	r24, r18
    2636:	88 0f       	add	r24, r24
    2638:	99 1f       	adc	r25, r25
    263a:	82 0f       	add	r24, r18
    263c:	93 1f       	adc	r25, r19
    263e:	fc 01       	movw	r30, r24
    2640:	e8 59       	subi	r30, 0x98	; 152
    2642:	ff 4f       	sbci	r31, 0xFF	; 255
    2644:	60 81       	ld	r22, Z
    2646:	71 81       	ldd	r23, Z+1	; 0x01
    2648:	82 81       	ldd	r24, Z+2	; 0x02
    264a:	0e 94 2f 06 	call	0xc5e	; 0xc5e <LED_voidOff>
			LED_voidOff(Leds[7-i]);
    264e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2650:	28 2f       	mov	r18, r24
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	87 e0       	ldi	r24, 0x07	; 7
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	ac 01       	movw	r20, r24
    265a:	42 1b       	sub	r20, r18
    265c:	53 0b       	sbc	r21, r19
    265e:	9a 01       	movw	r18, r20
    2660:	c9 01       	movw	r24, r18
    2662:	88 0f       	add	r24, r24
    2664:	99 1f       	adc	r25, r25
    2666:	82 0f       	add	r24, r18
    2668:	93 1f       	adc	r25, r19
    266a:	fc 01       	movw	r30, r24
    266c:	e8 59       	subi	r30, 0x98	; 152
    266e:	ff 4f       	sbci	r31, 0xFF	; 255
    2670:	60 81       	ld	r22, Z
    2672:	71 81       	ldd	r23, Z+1	; 0x01
    2674:	82 81       	ldd	r24, Z+2	; 0x02
    2676:	0e 94 2f 06 	call	0xc5e	; 0xc5e <LED_voidOff>
		LED_voidOff(Leds[i]);
	}
	_delay_ms(250);
}
void TwoLedsConvergeDivergeEvery250ms () {
	for(u8 i=0;i<4;i++)
    267a:	8c a5       	ldd	r24, Y+44	; 0x2c
    267c:	8f 5f       	subi	r24, 0xFF	; 255
    267e:	8c a7       	std	Y+44, r24	; 0x2c
    2680:	8c a5       	ldd	r24, Y+44	; 0x2c
    2682:	84 30       	cpi	r24, 0x04	; 4
    2684:	08 f4       	brcc	.+2      	; 0x2688 <TwoLedsConvergeDivergeEvery250ms+0x1a2>
    2686:	3b cf       	rjmp	.-394    	; 0x24fe <TwoLedsConvergeDivergeEvery250ms+0x18>
			LED_voidOn(Leds[7-i]);
			_delay_ms(250);
			LED_voidOff(Leds[i]);
			LED_voidOff(Leds[7-i]);
		}
	for(u8 i=0;i<4;i++)
    2688:	1b a6       	std	Y+43, r1	; 0x2b
    268a:	c7 c0       	rjmp	.+398    	; 0x281a <TwoLedsConvergeDivergeEvery250ms+0x334>
		{
			LED_voidOn(Leds[3-i]);
    268c:	8b a5       	ldd	r24, Y+43	; 0x2b
    268e:	28 2f       	mov	r18, r24
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	83 e0       	ldi	r24, 0x03	; 3
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	ac 01       	movw	r20, r24
    2698:	42 1b       	sub	r20, r18
    269a:	53 0b       	sbc	r21, r19
    269c:	9a 01       	movw	r18, r20
    269e:	c9 01       	movw	r24, r18
    26a0:	88 0f       	add	r24, r24
    26a2:	99 1f       	adc	r25, r25
    26a4:	82 0f       	add	r24, r18
    26a6:	93 1f       	adc	r25, r19
    26a8:	fc 01       	movw	r30, r24
    26aa:	e8 59       	subi	r30, 0x98	; 152
    26ac:	ff 4f       	sbci	r31, 0xFF	; 255
    26ae:	60 81       	ld	r22, Z
    26b0:	71 81       	ldd	r23, Z+1	; 0x01
    26b2:	82 81       	ldd	r24, Z+2	; 0x02
    26b4:	0e 94 0d 06 	call	0xc1a	; 0xc1a <LED_voidOn>
			LED_voidOn(Leds[4+i]);
    26b8:	8b a5       	ldd	r24, Y+43	; 0x2b
    26ba:	88 2f       	mov	r24, r24
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	9c 01       	movw	r18, r24
    26c0:	2c 5f       	subi	r18, 0xFC	; 252
    26c2:	3f 4f       	sbci	r19, 0xFF	; 255
    26c4:	c9 01       	movw	r24, r18
    26c6:	88 0f       	add	r24, r24
    26c8:	99 1f       	adc	r25, r25
    26ca:	82 0f       	add	r24, r18
    26cc:	93 1f       	adc	r25, r19
    26ce:	fc 01       	movw	r30, r24
    26d0:	e8 59       	subi	r30, 0x98	; 152
    26d2:	ff 4f       	sbci	r31, 0xFF	; 255
    26d4:	60 81       	ld	r22, Z
    26d6:	71 81       	ldd	r23, Z+1	; 0x01
    26d8:	82 81       	ldd	r24, Z+2	; 0x02
    26da:	0e 94 0d 06 	call	0xc1a	; 0xc1a <LED_voidOn>
    26de:	80 e0       	ldi	r24, 0x00	; 0
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	aa e7       	ldi	r26, 0x7A	; 122
    26e4:	b3 e4       	ldi	r27, 0x43	; 67
    26e6:	89 8f       	std	Y+25, r24	; 0x19
    26e8:	9a 8f       	std	Y+26, r25	; 0x1a
    26ea:	ab 8f       	std	Y+27, r26	; 0x1b
    26ec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ee:	69 8d       	ldd	r22, Y+25	; 0x19
    26f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26f6:	20 e0       	ldi	r18, 0x00	; 0
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	4a ef       	ldi	r20, 0xFA	; 250
    26fc:	54 e4       	ldi	r21, 0x44	; 68
    26fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2702:	dc 01       	movw	r26, r24
    2704:	cb 01       	movw	r24, r22
    2706:	8d 8b       	std	Y+21, r24	; 0x15
    2708:	9e 8b       	std	Y+22, r25	; 0x16
    270a:	af 8b       	std	Y+23, r26	; 0x17
    270c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    270e:	6d 89       	ldd	r22, Y+21	; 0x15
    2710:	7e 89       	ldd	r23, Y+22	; 0x16
    2712:	8f 89       	ldd	r24, Y+23	; 0x17
    2714:	98 8d       	ldd	r25, Y+24	; 0x18
    2716:	20 e0       	ldi	r18, 0x00	; 0
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	40 e8       	ldi	r20, 0x80	; 128
    271c:	5f e3       	ldi	r21, 0x3F	; 63
    271e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2722:	88 23       	and	r24, r24
    2724:	2c f4       	brge	.+10     	; 0x2730 <TwoLedsConvergeDivergeEvery250ms+0x24a>
		__ticks = 1;
    2726:	81 e0       	ldi	r24, 0x01	; 1
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	9c 8b       	std	Y+20, r25	; 0x14
    272c:	8b 8b       	std	Y+19, r24	; 0x13
    272e:	3f c0       	rjmp	.+126    	; 0x27ae <TwoLedsConvergeDivergeEvery250ms+0x2c8>
	else if (__tmp > 65535)
    2730:	6d 89       	ldd	r22, Y+21	; 0x15
    2732:	7e 89       	ldd	r23, Y+22	; 0x16
    2734:	8f 89       	ldd	r24, Y+23	; 0x17
    2736:	98 8d       	ldd	r25, Y+24	; 0x18
    2738:	20 e0       	ldi	r18, 0x00	; 0
    273a:	3f ef       	ldi	r19, 0xFF	; 255
    273c:	4f e7       	ldi	r20, 0x7F	; 127
    273e:	57 e4       	ldi	r21, 0x47	; 71
    2740:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2744:	18 16       	cp	r1, r24
    2746:	4c f5       	brge	.+82     	; 0x279a <TwoLedsConvergeDivergeEvery250ms+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2748:	69 8d       	ldd	r22, Y+25	; 0x19
    274a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    274c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    274e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2750:	20 e0       	ldi	r18, 0x00	; 0
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	40 e2       	ldi	r20, 0x20	; 32
    2756:	51 e4       	ldi	r21, 0x41	; 65
    2758:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    275c:	dc 01       	movw	r26, r24
    275e:	cb 01       	movw	r24, r22
    2760:	bc 01       	movw	r22, r24
    2762:	cd 01       	movw	r24, r26
    2764:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2768:	dc 01       	movw	r26, r24
    276a:	cb 01       	movw	r24, r22
    276c:	9c 8b       	std	Y+20, r25	; 0x14
    276e:	8b 8b       	std	Y+19, r24	; 0x13
    2770:	0f c0       	rjmp	.+30     	; 0x2790 <TwoLedsConvergeDivergeEvery250ms+0x2aa>
    2772:	88 ec       	ldi	r24, 0xC8	; 200
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	9a 8b       	std	Y+18, r25	; 0x12
    2778:	89 8b       	std	Y+17, r24	; 0x11
    277a:	89 89       	ldd	r24, Y+17	; 0x11
    277c:	9a 89       	ldd	r25, Y+18	; 0x12
    277e:	01 97       	sbiw	r24, 0x01	; 1
    2780:	f1 f7       	brne	.-4      	; 0x277e <TwoLedsConvergeDivergeEvery250ms+0x298>
    2782:	9a 8b       	std	Y+18, r25	; 0x12
    2784:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2786:	8b 89       	ldd	r24, Y+19	; 0x13
    2788:	9c 89       	ldd	r25, Y+20	; 0x14
    278a:	01 97       	sbiw	r24, 0x01	; 1
    278c:	9c 8b       	std	Y+20, r25	; 0x14
    278e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2790:	8b 89       	ldd	r24, Y+19	; 0x13
    2792:	9c 89       	ldd	r25, Y+20	; 0x14
    2794:	00 97       	sbiw	r24, 0x00	; 0
    2796:	69 f7       	brne	.-38     	; 0x2772 <TwoLedsConvergeDivergeEvery250ms+0x28c>
    2798:	14 c0       	rjmp	.+40     	; 0x27c2 <TwoLedsConvergeDivergeEvery250ms+0x2dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    279a:	6d 89       	ldd	r22, Y+21	; 0x15
    279c:	7e 89       	ldd	r23, Y+22	; 0x16
    279e:	8f 89       	ldd	r24, Y+23	; 0x17
    27a0:	98 8d       	ldd	r25, Y+24	; 0x18
    27a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27a6:	dc 01       	movw	r26, r24
    27a8:	cb 01       	movw	r24, r22
    27aa:	9c 8b       	std	Y+20, r25	; 0x14
    27ac:	8b 8b       	std	Y+19, r24	; 0x13
    27ae:	8b 89       	ldd	r24, Y+19	; 0x13
    27b0:	9c 89       	ldd	r25, Y+20	; 0x14
    27b2:	98 8b       	std	Y+16, r25	; 0x10
    27b4:	8f 87       	std	Y+15, r24	; 0x0f
    27b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    27b8:	98 89       	ldd	r25, Y+16	; 0x10
    27ba:	01 97       	sbiw	r24, 0x01	; 1
    27bc:	f1 f7       	brne	.-4      	; 0x27ba <TwoLedsConvergeDivergeEvery250ms+0x2d4>
    27be:	98 8b       	std	Y+16, r25	; 0x10
    27c0:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(250);
			LED_voidOff(Leds[3-i]);
    27c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    27c4:	28 2f       	mov	r18, r24
    27c6:	30 e0       	ldi	r19, 0x00	; 0
    27c8:	83 e0       	ldi	r24, 0x03	; 3
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	ac 01       	movw	r20, r24
    27ce:	42 1b       	sub	r20, r18
    27d0:	53 0b       	sbc	r21, r19
    27d2:	9a 01       	movw	r18, r20
    27d4:	c9 01       	movw	r24, r18
    27d6:	88 0f       	add	r24, r24
    27d8:	99 1f       	adc	r25, r25
    27da:	82 0f       	add	r24, r18
    27dc:	93 1f       	adc	r25, r19
    27de:	fc 01       	movw	r30, r24
    27e0:	e8 59       	subi	r30, 0x98	; 152
    27e2:	ff 4f       	sbci	r31, 0xFF	; 255
    27e4:	60 81       	ld	r22, Z
    27e6:	71 81       	ldd	r23, Z+1	; 0x01
    27e8:	82 81       	ldd	r24, Z+2	; 0x02
    27ea:	0e 94 2f 06 	call	0xc5e	; 0xc5e <LED_voidOff>
			LED_voidOff(Leds[4+i]);
    27ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    27f0:	88 2f       	mov	r24, r24
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	9c 01       	movw	r18, r24
    27f6:	2c 5f       	subi	r18, 0xFC	; 252
    27f8:	3f 4f       	sbci	r19, 0xFF	; 255
    27fa:	c9 01       	movw	r24, r18
    27fc:	88 0f       	add	r24, r24
    27fe:	99 1f       	adc	r25, r25
    2800:	82 0f       	add	r24, r18
    2802:	93 1f       	adc	r25, r19
    2804:	fc 01       	movw	r30, r24
    2806:	e8 59       	subi	r30, 0x98	; 152
    2808:	ff 4f       	sbci	r31, 0xFF	; 255
    280a:	60 81       	ld	r22, Z
    280c:	71 81       	ldd	r23, Z+1	; 0x01
    280e:	82 81       	ldd	r24, Z+2	; 0x02
    2810:	0e 94 2f 06 	call	0xc5e	; 0xc5e <LED_voidOff>
			LED_voidOn(Leds[7-i]);
			_delay_ms(250);
			LED_voidOff(Leds[i]);
			LED_voidOff(Leds[7-i]);
		}
	for(u8 i=0;i<4;i++)
    2814:	8b a5       	ldd	r24, Y+43	; 0x2b
    2816:	8f 5f       	subi	r24, 0xFF	; 255
    2818:	8b a7       	std	Y+43, r24	; 0x2b
    281a:	8b a5       	ldd	r24, Y+43	; 0x2b
    281c:	84 30       	cpi	r24, 0x04	; 4
    281e:	08 f4       	brcc	.+2      	; 0x2822 <TwoLedsConvergeDivergeEvery250ms+0x33c>
    2820:	35 cf       	rjmp	.-406    	; 0x268c <TwoLedsConvergeDivergeEvery250ms+0x1a6>
    2822:	80 e0       	ldi	r24, 0x00	; 0
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	aa e7       	ldi	r26, 0x7A	; 122
    2828:	b3 e4       	ldi	r27, 0x43	; 67
    282a:	8b 87       	std	Y+11, r24	; 0x0b
    282c:	9c 87       	std	Y+12, r25	; 0x0c
    282e:	ad 87       	std	Y+13, r26	; 0x0d
    2830:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2832:	6b 85       	ldd	r22, Y+11	; 0x0b
    2834:	7c 85       	ldd	r23, Y+12	; 0x0c
    2836:	8d 85       	ldd	r24, Y+13	; 0x0d
    2838:	9e 85       	ldd	r25, Y+14	; 0x0e
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	4a ef       	ldi	r20, 0xFA	; 250
    2840:	54 e4       	ldi	r21, 0x44	; 68
    2842:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2846:	dc 01       	movw	r26, r24
    2848:	cb 01       	movw	r24, r22
    284a:	8f 83       	std	Y+7, r24	; 0x07
    284c:	98 87       	std	Y+8, r25	; 0x08
    284e:	a9 87       	std	Y+9, r26	; 0x09
    2850:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2852:	6f 81       	ldd	r22, Y+7	; 0x07
    2854:	78 85       	ldd	r23, Y+8	; 0x08
    2856:	89 85       	ldd	r24, Y+9	; 0x09
    2858:	9a 85       	ldd	r25, Y+10	; 0x0a
    285a:	20 e0       	ldi	r18, 0x00	; 0
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	40 e8       	ldi	r20, 0x80	; 128
    2860:	5f e3       	ldi	r21, 0x3F	; 63
    2862:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2866:	88 23       	and	r24, r24
    2868:	2c f4       	brge	.+10     	; 0x2874 <TwoLedsConvergeDivergeEvery250ms+0x38e>
		__ticks = 1;
    286a:	81 e0       	ldi	r24, 0x01	; 1
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	9e 83       	std	Y+6, r25	; 0x06
    2870:	8d 83       	std	Y+5, r24	; 0x05
    2872:	3f c0       	rjmp	.+126    	; 0x28f2 <TwoLedsConvergeDivergeEvery250ms+0x40c>
	else if (__tmp > 65535)
    2874:	6f 81       	ldd	r22, Y+7	; 0x07
    2876:	78 85       	ldd	r23, Y+8	; 0x08
    2878:	89 85       	ldd	r24, Y+9	; 0x09
    287a:	9a 85       	ldd	r25, Y+10	; 0x0a
    287c:	20 e0       	ldi	r18, 0x00	; 0
    287e:	3f ef       	ldi	r19, 0xFF	; 255
    2880:	4f e7       	ldi	r20, 0x7F	; 127
    2882:	57 e4       	ldi	r21, 0x47	; 71
    2884:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2888:	18 16       	cp	r1, r24
    288a:	4c f5       	brge	.+82     	; 0x28de <TwoLedsConvergeDivergeEvery250ms+0x3f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    288c:	6b 85       	ldd	r22, Y+11	; 0x0b
    288e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2890:	8d 85       	ldd	r24, Y+13	; 0x0d
    2892:	9e 85       	ldd	r25, Y+14	; 0x0e
    2894:	20 e0       	ldi	r18, 0x00	; 0
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	40 e2       	ldi	r20, 0x20	; 32
    289a:	51 e4       	ldi	r21, 0x41	; 65
    289c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28a0:	dc 01       	movw	r26, r24
    28a2:	cb 01       	movw	r24, r22
    28a4:	bc 01       	movw	r22, r24
    28a6:	cd 01       	movw	r24, r26
    28a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28ac:	dc 01       	movw	r26, r24
    28ae:	cb 01       	movw	r24, r22
    28b0:	9e 83       	std	Y+6, r25	; 0x06
    28b2:	8d 83       	std	Y+5, r24	; 0x05
    28b4:	0f c0       	rjmp	.+30     	; 0x28d4 <TwoLedsConvergeDivergeEvery250ms+0x3ee>
    28b6:	88 ec       	ldi	r24, 0xC8	; 200
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	9c 83       	std	Y+4, r25	; 0x04
    28bc:	8b 83       	std	Y+3, r24	; 0x03
    28be:	8b 81       	ldd	r24, Y+3	; 0x03
    28c0:	9c 81       	ldd	r25, Y+4	; 0x04
    28c2:	01 97       	sbiw	r24, 0x01	; 1
    28c4:	f1 f7       	brne	.-4      	; 0x28c2 <TwoLedsConvergeDivergeEvery250ms+0x3dc>
    28c6:	9c 83       	std	Y+4, r25	; 0x04
    28c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ca:	8d 81       	ldd	r24, Y+5	; 0x05
    28cc:	9e 81       	ldd	r25, Y+6	; 0x06
    28ce:	01 97       	sbiw	r24, 0x01	; 1
    28d0:	9e 83       	std	Y+6, r25	; 0x06
    28d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28d4:	8d 81       	ldd	r24, Y+5	; 0x05
    28d6:	9e 81       	ldd	r25, Y+6	; 0x06
    28d8:	00 97       	sbiw	r24, 0x00	; 0
    28da:	69 f7       	brne	.-38     	; 0x28b6 <TwoLedsConvergeDivergeEvery250ms+0x3d0>
    28dc:	14 c0       	rjmp	.+40     	; 0x2906 <TwoLedsConvergeDivergeEvery250ms+0x420>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28de:	6f 81       	ldd	r22, Y+7	; 0x07
    28e0:	78 85       	ldd	r23, Y+8	; 0x08
    28e2:	89 85       	ldd	r24, Y+9	; 0x09
    28e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28ea:	dc 01       	movw	r26, r24
    28ec:	cb 01       	movw	r24, r22
    28ee:	9e 83       	std	Y+6, r25	; 0x06
    28f0:	8d 83       	std	Y+5, r24	; 0x05
    28f2:	8d 81       	ldd	r24, Y+5	; 0x05
    28f4:	9e 81       	ldd	r25, Y+6	; 0x06
    28f6:	9a 83       	std	Y+2, r25	; 0x02
    28f8:	89 83       	std	Y+1, r24	; 0x01
    28fa:	89 81       	ldd	r24, Y+1	; 0x01
    28fc:	9a 81       	ldd	r25, Y+2	; 0x02
    28fe:	01 97       	sbiw	r24, 0x01	; 1
    2900:	f1 f7       	brne	.-4      	; 0x28fe <TwoLedsConvergeDivergeEvery250ms+0x418>
    2902:	9a 83       	std	Y+2, r25	; 0x02
    2904:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(250);
			LED_voidOff(Leds[3-i]);
			LED_voidOff(Leds[4+i]);
		}
	_delay_ms(250);
}
    2906:	ac 96       	adiw	r28, 0x2c	; 44
    2908:	0f b6       	in	r0, 0x3f	; 63
    290a:	f8 94       	cli
    290c:	de bf       	out	0x3e, r29	; 62
    290e:	0f be       	out	0x3f, r0	; 63
    2910:	cd bf       	out	0x3d, r28	; 61
    2912:	cf 91       	pop	r28
    2914:	df 91       	pop	r29
    2916:	08 95       	ret

00002918 <__prologue_saves__>:
    2918:	2f 92       	push	r2
    291a:	3f 92       	push	r3
    291c:	4f 92       	push	r4
    291e:	5f 92       	push	r5
    2920:	6f 92       	push	r6
    2922:	7f 92       	push	r7
    2924:	8f 92       	push	r8
    2926:	9f 92       	push	r9
    2928:	af 92       	push	r10
    292a:	bf 92       	push	r11
    292c:	cf 92       	push	r12
    292e:	df 92       	push	r13
    2930:	ef 92       	push	r14
    2932:	ff 92       	push	r15
    2934:	0f 93       	push	r16
    2936:	1f 93       	push	r17
    2938:	cf 93       	push	r28
    293a:	df 93       	push	r29
    293c:	cd b7       	in	r28, 0x3d	; 61
    293e:	de b7       	in	r29, 0x3e	; 62
    2940:	ca 1b       	sub	r28, r26
    2942:	db 0b       	sbc	r29, r27
    2944:	0f b6       	in	r0, 0x3f	; 63
    2946:	f8 94       	cli
    2948:	de bf       	out	0x3e, r29	; 62
    294a:	0f be       	out	0x3f, r0	; 63
    294c:	cd bf       	out	0x3d, r28	; 61
    294e:	09 94       	ijmp

00002950 <__epilogue_restores__>:
    2950:	2a 88       	ldd	r2, Y+18	; 0x12
    2952:	39 88       	ldd	r3, Y+17	; 0x11
    2954:	48 88       	ldd	r4, Y+16	; 0x10
    2956:	5f 84       	ldd	r5, Y+15	; 0x0f
    2958:	6e 84       	ldd	r6, Y+14	; 0x0e
    295a:	7d 84       	ldd	r7, Y+13	; 0x0d
    295c:	8c 84       	ldd	r8, Y+12	; 0x0c
    295e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2960:	aa 84       	ldd	r10, Y+10	; 0x0a
    2962:	b9 84       	ldd	r11, Y+9	; 0x09
    2964:	c8 84       	ldd	r12, Y+8	; 0x08
    2966:	df 80       	ldd	r13, Y+7	; 0x07
    2968:	ee 80       	ldd	r14, Y+6	; 0x06
    296a:	fd 80       	ldd	r15, Y+5	; 0x05
    296c:	0c 81       	ldd	r16, Y+4	; 0x04
    296e:	1b 81       	ldd	r17, Y+3	; 0x03
    2970:	aa 81       	ldd	r26, Y+2	; 0x02
    2972:	b9 81       	ldd	r27, Y+1	; 0x01
    2974:	ce 0f       	add	r28, r30
    2976:	d1 1d       	adc	r29, r1
    2978:	0f b6       	in	r0, 0x3f	; 63
    297a:	f8 94       	cli
    297c:	de bf       	out	0x3e, r29	; 62
    297e:	0f be       	out	0x3f, r0	; 63
    2980:	cd bf       	out	0x3d, r28	; 61
    2982:	ed 01       	movw	r28, r26
    2984:	08 95       	ret

00002986 <_exit>:
    2986:	f8 94       	cli

00002988 <__stop_program>:
    2988:	ff cf       	rjmp	.-2      	; 0x2988 <__stop_program>
