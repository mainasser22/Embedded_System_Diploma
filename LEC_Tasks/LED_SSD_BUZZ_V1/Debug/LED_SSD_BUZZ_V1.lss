
LED_SSD_BUZZ_V1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000025e4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003a  00800060  000025e4  00002658  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001b90  00000000  00000000  00002694  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d1d  00000000  00000000  00004224  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00004f41  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005081  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000051f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00006e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00007d25  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008ad4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00008c34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00008ec1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000968f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ee       	ldi	r30, 0xE4	; 228
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 39       	cpi	r26, 0x9A	; 154
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 8c 0b 	call	0x1718	; 0x1718 <main>
      7a:	0c 94 f0 12 	jmp	0x25e0	; 0x25e0 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 b9 12 	jmp	0x2572	; 0x2572 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 d5 12 	jmp	0x25aa	; 0x25aa <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 c5 12 	jmp	0x258a	; 0x258a <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 e1 12 	jmp	0x25c2	; 0x25c2 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 c5 12 	jmp	0x258a	; 0x258a <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 e1 12 	jmp	0x25c2	; 0x25c2 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 b9 12 	jmp	0x2572	; 0x2572 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 d5 12 	jmp	0x25aa	; 0x25aa <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 c5 12 	jmp	0x258a	; 0x258a <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 e1 12 	jmp	0x25c2	; 0x25c2 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 c5 12 	jmp	0x258a	; 0x258a <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 e1 12 	jmp	0x25c2	; 0x25c2 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 c5 12 	jmp	0x258a	; 0x258a <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 e1 12 	jmp	0x25c2	; 0x25c2 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 c9 12 	jmp	0x2592	; 0x2592 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 e5 12 	jmp	0x25ca	; 0x25ca <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <SSD_voidInitialDataPort>:
static u8 Local_u8SSDNumbers[10] = SSD_NUMBER_ARR ;
static u8 Local_u8SegmentNum[8] = SSD_SegmentNum_ARR;


void SSD_voidInitialDataPort  (SSD_Type Copy_structConfig )
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <SSD_voidInitialDataPort+0x6>
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <SSD_voidInitialDataPort+0x8>
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
     b42:	69 83       	std	Y+1, r22	; 0x01
     b44:	7a 83       	std	Y+2, r23	; 0x02
     b46:	8b 83       	std	Y+3, r24	; 0x03
     b48:	9c 83       	std	Y+4, r25	; 0x04
	DIO_VoidSetPortDirection( Copy_structConfig.DataPort , 0xFF );
     b4a:	8a 81       	ldd	r24, Y+2	; 0x02
     b4c:	6f ef       	ldi	r22, 0xFF	; 255
     b4e:	0e 94 10 0a 	call	0x1420	; 0x1420 <DIO_VoidSetPortDirection>
}
     b52:	0f 90       	pop	r0
     b54:	0f 90       	pop	r0
     b56:	0f 90       	pop	r0
     b58:	0f 90       	pop	r0
     b5a:	cf 91       	pop	r28
     b5c:	df 91       	pop	r29
     b5e:	08 95       	ret

00000b60 <SSD_voidSendNumber>:


void SSD_voidSendNumber( SSD_Type Copy_structConfig , u8 Copy_u8Number ){
     b60:	df 93       	push	r29
     b62:	cf 93       	push	r28
     b64:	00 d0       	rcall	.+0      	; 0xb66 <SSD_voidSendNumber+0x6>
     b66:	00 d0       	rcall	.+0      	; 0xb68 <SSD_voidSendNumber+0x8>
     b68:	0f 92       	push	r0
     b6a:	cd b7       	in	r28, 0x3d	; 61
     b6c:	de b7       	in	r29, 0x3e	; 62
     b6e:	69 83       	std	Y+1, r22	; 0x01
     b70:	7a 83       	std	Y+2, r23	; 0x02
     b72:	8b 83       	std	Y+3, r24	; 0x03
     b74:	9c 83       	std	Y+4, r25	; 0x04
     b76:	4d 83       	std	Y+5, r20	; 0x05

	if( Copy_structConfig.Type == SSD_COMMON_CATHODE ){
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	88 23       	and	r24, r24
     b7c:	69 f4       	brne	.+26     	; 0xb98 <SSD_voidSendNumber+0x38>

		DIO_VoidSetPortValue( Copy_structConfig.DataPort , Local_u8SSDNumbers[ Copy_u8Number ] );
     b7e:	2a 81       	ldd	r18, Y+2	; 0x02
     b80:	8d 81       	ldd	r24, Y+5	; 0x05
     b82:	88 2f       	mov	r24, r24
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	fc 01       	movw	r30, r24
     b88:	e8 59       	subi	r30, 0x98	; 152
     b8a:	ff 4f       	sbci	r31, 0xFF	; 255
     b8c:	90 81       	ld	r25, Z
     b8e:	82 2f       	mov	r24, r18
     b90:	69 2f       	mov	r22, r25
     b92:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <DIO_VoidSetPortValue>
     b96:	11 c0       	rjmp	.+34     	; 0xbba <SSD_voidSendNumber+0x5a>

	}else if( Copy_structConfig.Type == SSD_COMMON_ANODE ){
     b98:	89 81       	ldd	r24, Y+1	; 0x01
     b9a:	81 30       	cpi	r24, 0x01	; 1
     b9c:	71 f4       	brne	.+28     	; 0xbba <SSD_voidSendNumber+0x5a>

		DIO_VoidSetPortValue( Copy_structConfig.DataPort , ~( Local_u8SSDNumbers[ Copy_u8Number ] ) );
     b9e:	2a 81       	ldd	r18, Y+2	; 0x02
     ba0:	8d 81       	ldd	r24, Y+5	; 0x05
     ba2:	88 2f       	mov	r24, r24
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	fc 01       	movw	r30, r24
     ba8:	e8 59       	subi	r30, 0x98	; 152
     baa:	ff 4f       	sbci	r31, 0xFF	; 255
     bac:	80 81       	ld	r24, Z
     bae:	98 2f       	mov	r25, r24
     bb0:	90 95       	com	r25
     bb2:	82 2f       	mov	r24, r18
     bb4:	69 2f       	mov	r22, r25
     bb6:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <DIO_VoidSetPortValue>

	}

}
     bba:	0f 90       	pop	r0
     bbc:	0f 90       	pop	r0
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	0f 90       	pop	r0
     bc4:	cf 91       	pop	r28
     bc6:	df 91       	pop	r29
     bc8:	08 95       	ret

00000bca <SSD_voidTurnSegment>:

void SSD_voidTurnSegment      ( SSD_Type Copy_structConfig , u8 Copy_u8SegNumber )
{
     bca:	df 93       	push	r29
     bcc:	cf 93       	push	r28
     bce:	00 d0       	rcall	.+0      	; 0xbd0 <SSD_voidTurnSegment+0x6>
     bd0:	00 d0       	rcall	.+0      	; 0xbd2 <SSD_voidTurnSegment+0x8>
     bd2:	0f 92       	push	r0
     bd4:	cd b7       	in	r28, 0x3d	; 61
     bd6:	de b7       	in	r29, 0x3e	; 62
     bd8:	69 83       	std	Y+1, r22	; 0x01
     bda:	7a 83       	std	Y+2, r23	; 0x02
     bdc:	8b 83       	std	Y+3, r24	; 0x03
     bde:	9c 83       	std	Y+4, r25	; 0x04
     be0:	4d 83       	std	Y+5, r20	; 0x05

	if( Copy_structConfig.Type == SSD_COMMON_CATHODE ){
     be2:	89 81       	ldd	r24, Y+1	; 0x01
     be4:	88 23       	and	r24, r24
     be6:	69 f4       	brne	.+26     	; 0xc02 <SSD_voidTurnSegment+0x38>

		DIO_VoidSetPortValue( Copy_structConfig.DataPort , Local_u8SegmentNum[ Copy_u8SegNumber ] );
     be8:	2a 81       	ldd	r18, Y+2	; 0x02
     bea:	8d 81       	ldd	r24, Y+5	; 0x05
     bec:	88 2f       	mov	r24, r24
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	fc 01       	movw	r30, r24
     bf2:	ee 58       	subi	r30, 0x8E	; 142
     bf4:	ff 4f       	sbci	r31, 0xFF	; 255
     bf6:	90 81       	ld	r25, Z
     bf8:	82 2f       	mov	r24, r18
     bfa:	69 2f       	mov	r22, r25
     bfc:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <DIO_VoidSetPortValue>
     c00:	11 c0       	rjmp	.+34     	; 0xc24 <SSD_voidTurnSegment+0x5a>

	}else if( Copy_structConfig.Type == SSD_COMMON_ANODE ){
     c02:	89 81       	ldd	r24, Y+1	; 0x01
     c04:	81 30       	cpi	r24, 0x01	; 1
     c06:	71 f4       	brne	.+28     	; 0xc24 <SSD_voidTurnSegment+0x5a>

		DIO_VoidSetPortValue( Copy_structConfig.DataPort , ~( Local_u8SegmentNum[ Copy_u8SegNumber ] ) );
     c08:	2a 81       	ldd	r18, Y+2	; 0x02
     c0a:	8d 81       	ldd	r24, Y+5	; 0x05
     c0c:	88 2f       	mov	r24, r24
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	fc 01       	movw	r30, r24
     c12:	ee 58       	subi	r30, 0x8E	; 142
     c14:	ff 4f       	sbci	r31, 0xFF	; 255
     c16:	80 81       	ld	r24, Z
     c18:	98 2f       	mov	r25, r24
     c1a:	90 95       	com	r25
     c1c:	82 2f       	mov	r24, r18
     c1e:	69 2f       	mov	r22, r25
     c20:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <DIO_VoidSetPortValue>

	}
}
     c24:	0f 90       	pop	r0
     c26:	0f 90       	pop	r0
     c28:	0f 90       	pop	r0
     c2a:	0f 90       	pop	r0
     c2c:	0f 90       	pop	r0
     c2e:	cf 91       	pop	r28
     c30:	df 91       	pop	r29
     c32:	08 95       	ret

00000c34 <SSD_voidEnable>:

void SSD_voidEnable    ( SSD_Type Copy_structConfig ){
     c34:	df 93       	push	r29
     c36:	cf 93       	push	r28
     c38:	00 d0       	rcall	.+0      	; 0xc3a <SSD_voidEnable+0x6>
     c3a:	00 d0       	rcall	.+0      	; 0xc3c <SSD_voidEnable+0x8>
     c3c:	cd b7       	in	r28, 0x3d	; 61
     c3e:	de b7       	in	r29, 0x3e	; 62
     c40:	69 83       	std	Y+1, r22	; 0x01
     c42:	7a 83       	std	Y+2, r23	; 0x02
     c44:	8b 83       	std	Y+3, r24	; 0x03
     c46:	9c 83       	std	Y+4, r25	; 0x04

	if( Copy_structConfig.Type == SSD_COMMON_CATHODE ){
     c48:	89 81       	ldd	r24, Y+1	; 0x01
     c4a:	88 23       	and	r24, r24
     c4c:	69 f4       	brne	.+26     	; 0xc68 <SSD_voidEnable+0x34>

		DIO_VoidSetPinDirection( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_HIGH );
     c4e:	8b 81       	ldd	r24, Y+3	; 0x03
     c50:	9c 81       	ldd	r25, Y+4	; 0x04
     c52:	69 2f       	mov	r22, r25
     c54:	41 e0       	ldi	r20, 0x01	; 1
     c56:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_VoidSetPinDirection>
		DIO_VoidSetPinValue( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_LOW );
     c5a:	8b 81       	ldd	r24, Y+3	; 0x03
     c5c:	9c 81       	ldd	r25, Y+4	; 0x04
     c5e:	69 2f       	mov	r22, r25
     c60:	40 e0       	ldi	r20, 0x00	; 0
     c62:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_VoidSetPinValue>
     c66:	0f c0       	rjmp	.+30     	; 0xc86 <SSD_voidEnable+0x52>

	}else if( Copy_structConfig.Type == SSD_COMMON_ANODE ){
     c68:	89 81       	ldd	r24, Y+1	; 0x01
     c6a:	81 30       	cpi	r24, 0x01	; 1
     c6c:	61 f4       	brne	.+24     	; 0xc86 <SSD_voidEnable+0x52>

		DIO_VoidSetPinDirection( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_HIGH );
     c6e:	8b 81       	ldd	r24, Y+3	; 0x03
     c70:	9c 81       	ldd	r25, Y+4	; 0x04
     c72:	69 2f       	mov	r22, r25
     c74:	41 e0       	ldi	r20, 0x01	; 1
     c76:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_VoidSetPinDirection>
		DIO_VoidSetPinValue( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_HIGH );
     c7a:	8b 81       	ldd	r24, Y+3	; 0x03
     c7c:	9c 81       	ldd	r25, Y+4	; 0x04
     c7e:	69 2f       	mov	r22, r25
     c80:	41 e0       	ldi	r20, 0x01	; 1
     c82:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_VoidSetPinValue>

	}

}
     c86:	0f 90       	pop	r0
     c88:	0f 90       	pop	r0
     c8a:	0f 90       	pop	r0
     c8c:	0f 90       	pop	r0
     c8e:	cf 91       	pop	r28
     c90:	df 91       	pop	r29
     c92:	08 95       	ret

00000c94 <SSD_voidDisable>:


void SSD_voidDisable   ( SSD_Type Copy_structConfig ){
     c94:	df 93       	push	r29
     c96:	cf 93       	push	r28
     c98:	00 d0       	rcall	.+0      	; 0xc9a <SSD_voidDisable+0x6>
     c9a:	00 d0       	rcall	.+0      	; 0xc9c <SSD_voidDisable+0x8>
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
     ca0:	69 83       	std	Y+1, r22	; 0x01
     ca2:	7a 83       	std	Y+2, r23	; 0x02
     ca4:	8b 83       	std	Y+3, r24	; 0x03
     ca6:	9c 83       	std	Y+4, r25	; 0x04

	if( Copy_structConfig.Type == SSD_COMMON_CATHODE ){
     ca8:	89 81       	ldd	r24, Y+1	; 0x01
     caa:	88 23       	and	r24, r24
     cac:	69 f4       	brne	.+26     	; 0xcc8 <SSD_voidDisable+0x34>

		DIO_VoidSetPinDirection( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_HIGH );
     cae:	8b 81       	ldd	r24, Y+3	; 0x03
     cb0:	9c 81       	ldd	r25, Y+4	; 0x04
     cb2:	69 2f       	mov	r22, r25
     cb4:	41 e0       	ldi	r20, 0x01	; 1
     cb6:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_VoidSetPinDirection>
		DIO_VoidSetPinValue( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_HIGH );
     cba:	8b 81       	ldd	r24, Y+3	; 0x03
     cbc:	9c 81       	ldd	r25, Y+4	; 0x04
     cbe:	69 2f       	mov	r22, r25
     cc0:	41 e0       	ldi	r20, 0x01	; 1
     cc2:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_VoidSetPinValue>
     cc6:	0f c0       	rjmp	.+30     	; 0xce6 <SSD_voidDisable+0x52>

	}
	else if( Copy_structConfig.Type == SSD_COMMON_ANODE ){
     cc8:	89 81       	ldd	r24, Y+1	; 0x01
     cca:	81 30       	cpi	r24, 0x01	; 1
     ccc:	61 f4       	brne	.+24     	; 0xce6 <SSD_voidDisable+0x52>

		DIO_VoidSetPinDirection( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_HIGH );
     cce:	8b 81       	ldd	r24, Y+3	; 0x03
     cd0:	9c 81       	ldd	r25, Y+4	; 0x04
     cd2:	69 2f       	mov	r22, r25
     cd4:	41 e0       	ldi	r20, 0x01	; 1
     cd6:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_VoidSetPinDirection>
		DIO_VoidSetPinValue( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_LOW );
     cda:	8b 81       	ldd	r24, Y+3	; 0x03
     cdc:	9c 81       	ldd	r25, Y+4	; 0x04
     cde:	69 2f       	mov	r22, r25
     ce0:	40 e0       	ldi	r20, 0x00	; 0
     ce2:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_VoidSetPinValue>

	}

}
     ce6:	0f 90       	pop	r0
     ce8:	0f 90       	pop	r0
     cea:	0f 90       	pop	r0
     cec:	0f 90       	pop	r0
     cee:	cf 91       	pop	r28
     cf0:	df 91       	pop	r29
     cf2:	08 95       	ret

00000cf4 <LED_voidInit>:

#include "../DIO/DIO_interface.h"
#include "LED_interface.h"

void LED_voidInit(LED_Type LED_Config)
{
     cf4:	df 93       	push	r29
     cf6:	cf 93       	push	r28
     cf8:	00 d0       	rcall	.+0      	; 0xcfa <LED_voidInit+0x6>
     cfa:	0f 92       	push	r0
     cfc:	cd b7       	in	r28, 0x3d	; 61
     cfe:	de b7       	in	r29, 0x3e	; 62
     d00:	69 83       	std	Y+1, r22	; 0x01
     d02:	7a 83       	std	Y+2, r23	; 0x02
     d04:	8b 83       	std	Y+3, r24	; 0x03

	DIO_VoidSetPinDirection( LED_Config.Port , LED_Config.Pin , DIO_PIN_OUTPUT);
     d06:	89 81       	ldd	r24, Y+1	; 0x01
     d08:	9a 81       	ldd	r25, Y+2	; 0x02
     d0a:	69 2f       	mov	r22, r25
     d0c:	41 e0       	ldi	r20, 0x01	; 1
     d0e:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_VoidSetPinDirection>

}
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	0f 90       	pop	r0
     d18:	cf 91       	pop	r28
     d1a:	df 91       	pop	r29
     d1c:	08 95       	ret

00000d1e <LED_voidOn>:

void LED_voidOn(LED_Type LED_Config)
{
     d1e:	df 93       	push	r29
     d20:	cf 93       	push	r28
     d22:	00 d0       	rcall	.+0      	; 0xd24 <LED_voidOn+0x6>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	69 83       	std	Y+1, r22	; 0x01
     d2c:	7a 83       	std	Y+2, r23	; 0x02
     d2e:	8b 83       	std	Y+3, r24	; 0x03

	if(LED_Config.Active_State == ACTIVE_HIGH ){
     d30:	8b 81       	ldd	r24, Y+3	; 0x03
     d32:	81 30       	cpi	r24, 0x01	; 1
     d34:	39 f4       	brne	.+14     	; 0xd44 <LED_voidOn+0x26>

		DIO_VoidSetPinValue(LED_Config.Port ,LED_Config.Pin ,DIO_PIN_HIGH);
     d36:	89 81       	ldd	r24, Y+1	; 0x01
     d38:	9a 81       	ldd	r25, Y+2	; 0x02
     d3a:	69 2f       	mov	r22, r25
     d3c:	41 e0       	ldi	r20, 0x01	; 1
     d3e:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_VoidSetPinValue>
     d42:	09 c0       	rjmp	.+18     	; 0xd56 <LED_voidOn+0x38>

	}else if(LED_Config.Active_State == ACTIVE_LOW ){
     d44:	8b 81       	ldd	r24, Y+3	; 0x03
     d46:	88 23       	and	r24, r24
     d48:	31 f4       	brne	.+12     	; 0xd56 <LED_voidOn+0x38>

		DIO_VoidSetPinValue(LED_Config.Port ,LED_Config.Pin ,DIO_PIN_LOW);
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	9a 81       	ldd	r25, Y+2	; 0x02
     d4e:	69 2f       	mov	r22, r25
     d50:	40 e0       	ldi	r20, 0x00	; 0
     d52:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_VoidSetPinValue>

	}

}
     d56:	0f 90       	pop	r0
     d58:	0f 90       	pop	r0
     d5a:	0f 90       	pop	r0
     d5c:	cf 91       	pop	r28
     d5e:	df 91       	pop	r29
     d60:	08 95       	ret

00000d62 <LED_voidOff>:

void LED_voidOff(LED_Type LED_Config)
{
     d62:	df 93       	push	r29
     d64:	cf 93       	push	r28
     d66:	00 d0       	rcall	.+0      	; 0xd68 <LED_voidOff+0x6>
     d68:	0f 92       	push	r0
     d6a:	cd b7       	in	r28, 0x3d	; 61
     d6c:	de b7       	in	r29, 0x3e	; 62
     d6e:	69 83       	std	Y+1, r22	; 0x01
     d70:	7a 83       	std	Y+2, r23	; 0x02
     d72:	8b 83       	std	Y+3, r24	; 0x03

	if(LED_Config.Active_State == ACTIVE_HIGH ){
     d74:	8b 81       	ldd	r24, Y+3	; 0x03
     d76:	81 30       	cpi	r24, 0x01	; 1
     d78:	39 f4       	brne	.+14     	; 0xd88 <LED_voidOff+0x26>

		DIO_VoidSetPinValue(LED_Config.Port ,LED_Config.Pin ,DIO_PIN_LOW);
     d7a:	89 81       	ldd	r24, Y+1	; 0x01
     d7c:	9a 81       	ldd	r25, Y+2	; 0x02
     d7e:	69 2f       	mov	r22, r25
     d80:	40 e0       	ldi	r20, 0x00	; 0
     d82:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_VoidSetPinValue>
     d86:	09 c0       	rjmp	.+18     	; 0xd9a <LED_voidOff+0x38>

	}else if(LED_Config.Active_State == ACTIVE_LOW ){
     d88:	8b 81       	ldd	r24, Y+3	; 0x03
     d8a:	88 23       	and	r24, r24
     d8c:	31 f4       	brne	.+12     	; 0xd9a <LED_voidOff+0x38>

		DIO_VoidSetPinValue(LED_Config.Port ,LED_Config.Pin ,DIO_PIN_HIGH);
     d8e:	89 81       	ldd	r24, Y+1	; 0x01
     d90:	9a 81       	ldd	r25, Y+2	; 0x02
     d92:	69 2f       	mov	r22, r25
     d94:	41 e0       	ldi	r20, 0x01	; 1
     d96:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_VoidSetPinValue>

	}

}
     d9a:	0f 90       	pop	r0
     d9c:	0f 90       	pop	r0
     d9e:	0f 90       	pop	r0
     da0:	cf 91       	pop	r28
     da2:	df 91       	pop	r29
     da4:	08 95       	ret

00000da6 <LED_voidToggle>:

void LED_voidToggle( LED_Type LED_Config)
{
     da6:	df 93       	push	r29
     da8:	cf 93       	push	r28
     daa:	00 d0       	rcall	.+0      	; 0xdac <LED_voidToggle+0x6>
     dac:	0f 92       	push	r0
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
     db2:	69 83       	std	Y+1, r22	; 0x01
     db4:	7a 83       	std	Y+2, r23	; 0x02
     db6:	8b 83       	std	Y+3, r24	; 0x03
	DIO_VoidTogglePinValue( LED_Config.Port , LED_Config.Pin );
     db8:	89 81       	ldd	r24, Y+1	; 0x01
     dba:	9a 81       	ldd	r25, Y+2	; 0x02
     dbc:	69 2f       	mov	r22, r25
     dbe:	0e 94 e7 08 	call	0x11ce	; 0x11ce <DIO_VoidTogglePinValue>
}
     dc2:	0f 90       	pop	r0
     dc4:	0f 90       	pop	r0
     dc6:	0f 90       	pop	r0
     dc8:	cf 91       	pop	r28
     dca:	df 91       	pop	r29
     dcc:	08 95       	ret

00000dce <DIO_VoidSetPinDirection>:
#include "DIO_config.h"
#include "DIO_interface.h"
#include "DIO_private.h"

void DIO_VoidSetPinDirection(u8 Copy_u8PORT,u8 Copy_u8PIN,u8 Copy_u8Direction)
{
     dce:	df 93       	push	r29
     dd0:	cf 93       	push	r28
     dd2:	cd b7       	in	r28, 0x3d	; 61
     dd4:	de b7       	in	r29, 0x3e	; 62
     dd6:	27 97       	sbiw	r28, 0x07	; 7
     dd8:	0f b6       	in	r0, 0x3f	; 63
     dda:	f8 94       	cli
     ddc:	de bf       	out	0x3e, r29	; 62
     dde:	0f be       	out	0x3f, r0	; 63
     de0:	cd bf       	out	0x3d, r28	; 61
     de2:	89 83       	std	Y+1, r24	; 0x01
     de4:	6a 83       	std	Y+2, r22	; 0x02
     de6:	4b 83       	std	Y+3, r20	; 0x03
  if(Copy_u8Direction== DIO_PIN_OUTPUT )
     de8:	8b 81       	ldd	r24, Y+3	; 0x03
     dea:	81 30       	cpi	r24, 0x01	; 1
     dec:	09 f0       	breq	.+2      	; 0xdf0 <DIO_VoidSetPinDirection+0x22>
     dee:	6f c0       	rjmp	.+222    	; 0xece <DIO_VoidSetPinDirection+0x100>
  {
	  switch (Copy_u8PORT)
     df0:	89 81       	ldd	r24, Y+1	; 0x01
     df2:	28 2f       	mov	r18, r24
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	3f 83       	std	Y+7, r19	; 0x07
     df8:	2e 83       	std	Y+6, r18	; 0x06
     dfa:	8e 81       	ldd	r24, Y+6	; 0x06
     dfc:	9f 81       	ldd	r25, Y+7	; 0x07
     dfe:	81 30       	cpi	r24, 0x01	; 1
     e00:	91 05       	cpc	r25, r1
     e02:	a9 f0       	breq	.+42     	; 0xe2e <DIO_VoidSetPinDirection+0x60>
     e04:	2e 81       	ldd	r18, Y+6	; 0x06
     e06:	3f 81       	ldd	r19, Y+7	; 0x07
     e08:	22 30       	cpi	r18, 0x02	; 2
     e0a:	31 05       	cpc	r19, r1
     e0c:	2c f4       	brge	.+10     	; 0xe18 <DIO_VoidSetPinDirection+0x4a>
     e0e:	8e 81       	ldd	r24, Y+6	; 0x06
     e10:	9f 81       	ldd	r25, Y+7	; 0x07
     e12:	00 97       	sbiw	r24, 0x00	; 0
     e14:	01 f1       	breq	.+64     	; 0xe56 <DIO_VoidSetPinDirection+0x88>
     e16:	d2 c0       	rjmp	.+420    	; 0xfbc <DIO_VoidSetPinDirection+0x1ee>
     e18:	2e 81       	ldd	r18, Y+6	; 0x06
     e1a:	3f 81       	ldd	r19, Y+7	; 0x07
     e1c:	22 30       	cpi	r18, 0x02	; 2
     e1e:	31 05       	cpc	r19, r1
     e20:	71 f1       	breq	.+92     	; 0xe7e <DIO_VoidSetPinDirection+0xb0>
     e22:	8e 81       	ldd	r24, Y+6	; 0x06
     e24:	9f 81       	ldd	r25, Y+7	; 0x07
     e26:	83 30       	cpi	r24, 0x03	; 3
     e28:	91 05       	cpc	r25, r1
     e2a:	e9 f1       	breq	.+122    	; 0xea6 <DIO_VoidSetPinDirection+0xd8>
     e2c:	c7 c0       	rjmp	.+398    	; 0xfbc <DIO_VoidSetPinDirection+0x1ee>
	  {
	  case DIO_PORTB: SET_BIT(DDRB,Copy_u8PIN); break;
     e2e:	a7 e3       	ldi	r26, 0x37	; 55
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	e7 e3       	ldi	r30, 0x37	; 55
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	48 2f       	mov	r20, r24
     e3a:	8a 81       	ldd	r24, Y+2	; 0x02
     e3c:	28 2f       	mov	r18, r24
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	02 2e       	mov	r0, r18
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <DIO_VoidSetPinDirection+0x7e>
     e48:	88 0f       	add	r24, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	0a 94       	dec	r0
     e4e:	e2 f7       	brpl	.-8      	; 0xe48 <DIO_VoidSetPinDirection+0x7a>
     e50:	84 2b       	or	r24, r20
     e52:	8c 93       	st	X, r24
     e54:	b3 c0       	rjmp	.+358    	; 0xfbc <DIO_VoidSetPinDirection+0x1ee>
	  case DIO_PORTA: SET_BIT(DDRA,Copy_u8PIN); break;
     e56:	aa e3       	ldi	r26, 0x3A	; 58
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	ea e3       	ldi	r30, 0x3A	; 58
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	48 2f       	mov	r20, r24
     e62:	8a 81       	ldd	r24, Y+2	; 0x02
     e64:	28 2f       	mov	r18, r24
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	02 2e       	mov	r0, r18
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <DIO_VoidSetPinDirection+0xa6>
     e70:	88 0f       	add	r24, r24
     e72:	99 1f       	adc	r25, r25
     e74:	0a 94       	dec	r0
     e76:	e2 f7       	brpl	.-8      	; 0xe70 <DIO_VoidSetPinDirection+0xa2>
     e78:	84 2b       	or	r24, r20
     e7a:	8c 93       	st	X, r24
     e7c:	9f c0       	rjmp	.+318    	; 0xfbc <DIO_VoidSetPinDirection+0x1ee>
	  case DIO_PORTC: SET_BIT(DDRC,Copy_u8PIN); break;
     e7e:	a4 e3       	ldi	r26, 0x34	; 52
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e4 e3       	ldi	r30, 0x34	; 52
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	48 2f       	mov	r20, r24
     e8a:	8a 81       	ldd	r24, Y+2	; 0x02
     e8c:	28 2f       	mov	r18, r24
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	02 2e       	mov	r0, r18
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <DIO_VoidSetPinDirection+0xce>
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	0a 94       	dec	r0
     e9e:	e2 f7       	brpl	.-8      	; 0xe98 <DIO_VoidSetPinDirection+0xca>
     ea0:	84 2b       	or	r24, r20
     ea2:	8c 93       	st	X, r24
     ea4:	8b c0       	rjmp	.+278    	; 0xfbc <DIO_VoidSetPinDirection+0x1ee>
	  case DIO_PORTD: SET_BIT(DDRD,Copy_u8PIN); break;
     ea6:	a1 e3       	ldi	r26, 0x31	; 49
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e1 e3       	ldi	r30, 0x31	; 49
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	48 2f       	mov	r20, r24
     eb2:	8a 81       	ldd	r24, Y+2	; 0x02
     eb4:	28 2f       	mov	r18, r24
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	02 2e       	mov	r0, r18
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <DIO_VoidSetPinDirection+0xf6>
     ec0:	88 0f       	add	r24, r24
     ec2:	99 1f       	adc	r25, r25
     ec4:	0a 94       	dec	r0
     ec6:	e2 f7       	brpl	.-8      	; 0xec0 <DIO_VoidSetPinDirection+0xf2>
     ec8:	84 2b       	or	r24, r20
     eca:	8c 93       	st	X, r24
     ecc:	77 c0       	rjmp	.+238    	; 0xfbc <DIO_VoidSetPinDirection+0x1ee>
	  }
  }
  else if(Copy_u8Direction== DIO_PIN_INPUT)
     ece:	8b 81       	ldd	r24, Y+3	; 0x03
     ed0:	88 23       	and	r24, r24
     ed2:	09 f0       	breq	.+2      	; 0xed6 <DIO_VoidSetPinDirection+0x108>
     ed4:	73 c0       	rjmp	.+230    	; 0xfbc <DIO_VoidSetPinDirection+0x1ee>
  {
	  switch (Copy_u8PORT)
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	3d 83       	std	Y+5, r19	; 0x05
     ede:	2c 83       	std	Y+4, r18	; 0x04
     ee0:	8c 81       	ldd	r24, Y+4	; 0x04
     ee2:	9d 81       	ldd	r25, Y+5	; 0x05
     ee4:	81 30       	cpi	r24, 0x01	; 1
     ee6:	91 05       	cpc	r25, r1
     ee8:	b1 f0       	breq	.+44     	; 0xf16 <DIO_VoidSetPinDirection+0x148>
     eea:	2c 81       	ldd	r18, Y+4	; 0x04
     eec:	3d 81       	ldd	r19, Y+5	; 0x05
     eee:	22 30       	cpi	r18, 0x02	; 2
     ef0:	31 05       	cpc	r19, r1
     ef2:	2c f4       	brge	.+10     	; 0xefe <DIO_VoidSetPinDirection+0x130>
     ef4:	8c 81       	ldd	r24, Y+4	; 0x04
     ef6:	9d 81       	ldd	r25, Y+5	; 0x05
     ef8:	00 97       	sbiw	r24, 0x00	; 0
     efa:	11 f1       	breq	.+68     	; 0xf40 <DIO_VoidSetPinDirection+0x172>
     efc:	5f c0       	rjmp	.+190    	; 0xfbc <DIO_VoidSetPinDirection+0x1ee>
     efe:	2c 81       	ldd	r18, Y+4	; 0x04
     f00:	3d 81       	ldd	r19, Y+5	; 0x05
     f02:	22 30       	cpi	r18, 0x02	; 2
     f04:	31 05       	cpc	r19, r1
     f06:	89 f1       	breq	.+98     	; 0xf6a <DIO_VoidSetPinDirection+0x19c>
     f08:	8c 81       	ldd	r24, Y+4	; 0x04
     f0a:	9d 81       	ldd	r25, Y+5	; 0x05
     f0c:	83 30       	cpi	r24, 0x03	; 3
     f0e:	91 05       	cpc	r25, r1
     f10:	09 f4       	brne	.+2      	; 0xf14 <DIO_VoidSetPinDirection+0x146>
     f12:	40 c0       	rjmp	.+128    	; 0xf94 <DIO_VoidSetPinDirection+0x1c6>
     f14:	53 c0       	rjmp	.+166    	; 0xfbc <DIO_VoidSetPinDirection+0x1ee>
	  {
	  	case DIO_PORTB: CLR_BIT(DDRB,Copy_u8PIN); break;
     f16:	a7 e3       	ldi	r26, 0x37	; 55
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e7 e3       	ldi	r30, 0x37	; 55
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	48 2f       	mov	r20, r24
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 2e       	mov	r0, r18
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <DIO_VoidSetPinDirection+0x166>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	0a 94       	dec	r0
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <DIO_VoidSetPinDirection+0x162>
     f38:	80 95       	com	r24
     f3a:	84 23       	and	r24, r20
     f3c:	8c 93       	st	X, r24
     f3e:	3e c0       	rjmp	.+124    	; 0xfbc <DIO_VoidSetPinDirection+0x1ee>
	    case DIO_PORTA: CLR_BIT(DDRA,Copy_u8PIN); break;
     f40:	aa e3       	ldi	r26, 0x3A	; 58
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	ea e3       	ldi	r30, 0x3A	; 58
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	48 2f       	mov	r20, r24
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	02 2e       	mov	r0, r18
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <DIO_VoidSetPinDirection+0x190>
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	0a 94       	dec	r0
     f60:	e2 f7       	brpl	.-8      	; 0xf5a <DIO_VoidSetPinDirection+0x18c>
     f62:	80 95       	com	r24
     f64:	84 23       	and	r24, r20
     f66:	8c 93       	st	X, r24
     f68:	29 c0       	rjmp	.+82     	; 0xfbc <DIO_VoidSetPinDirection+0x1ee>
	  	case DIO_PORTC: CLR_BIT(DDRC,Copy_u8PIN); break;
     f6a:	a4 e3       	ldi	r26, 0x34	; 52
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e4 e3       	ldi	r30, 0x34	; 52
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	48 2f       	mov	r20, r24
     f76:	8a 81       	ldd	r24, Y+2	; 0x02
     f78:	28 2f       	mov	r18, r24
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	02 2e       	mov	r0, r18
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <DIO_VoidSetPinDirection+0x1ba>
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	0a 94       	dec	r0
     f8a:	e2 f7       	brpl	.-8      	; 0xf84 <DIO_VoidSetPinDirection+0x1b6>
     f8c:	80 95       	com	r24
     f8e:	84 23       	and	r24, r20
     f90:	8c 93       	st	X, r24
     f92:	14 c0       	rjmp	.+40     	; 0xfbc <DIO_VoidSetPinDirection+0x1ee>
	  	case DIO_PORTD: CLR_BIT(DDRD,Copy_u8PIN); break;
     f94:	a1 e3       	ldi	r26, 0x31	; 49
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	e1 e3       	ldi	r30, 0x31	; 49
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	48 2f       	mov	r20, r24
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	02 2e       	mov	r0, r18
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <DIO_VoidSetPinDirection+0x1e4>
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	0a 94       	dec	r0
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <DIO_VoidSetPinDirection+0x1e0>
     fb6:	80 95       	com	r24
     fb8:	84 23       	and	r24, r20
     fba:	8c 93       	st	X, r24
	  }
  }
}
     fbc:	27 96       	adiw	r28, 0x07	; 7
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	f8 94       	cli
     fc2:	de bf       	out	0x3e, r29	; 62
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	cd bf       	out	0x3d, r28	; 61
     fc8:	cf 91       	pop	r28
     fca:	df 91       	pop	r29
     fcc:	08 95       	ret

00000fce <DIO_VoidSetPinValue>:
void DIO_VoidSetPinValue(u8 Copy_u8PORT,u8 Copy_u8PIN,u8 Copy_u8Value)
{
     fce:	df 93       	push	r29
     fd0:	cf 93       	push	r28
     fd2:	cd b7       	in	r28, 0x3d	; 61
     fd4:	de b7       	in	r29, 0x3e	; 62
     fd6:	27 97       	sbiw	r28, 0x07	; 7
     fd8:	0f b6       	in	r0, 0x3f	; 63
     fda:	f8 94       	cli
     fdc:	de bf       	out	0x3e, r29	; 62
     fde:	0f be       	out	0x3f, r0	; 63
     fe0:	cd bf       	out	0x3d, r28	; 61
     fe2:	89 83       	std	Y+1, r24	; 0x01
     fe4:	6a 83       	std	Y+2, r22	; 0x02
     fe6:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Value== DIO_PIN_HIGH )
     fe8:	8b 81       	ldd	r24, Y+3	; 0x03
     fea:	81 30       	cpi	r24, 0x01	; 1
     fec:	09 f0       	breq	.+2      	; 0xff0 <DIO_VoidSetPinValue+0x22>
     fee:	6f c0       	rjmp	.+222    	; 0x10ce <DIO_VoidSetPinValue+0x100>
	  {
		  switch (Copy_u8PORT)
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
     ff2:	28 2f       	mov	r18, r24
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	3f 83       	std	Y+7, r19	; 0x07
     ff8:	2e 83       	std	Y+6, r18	; 0x06
     ffa:	8e 81       	ldd	r24, Y+6	; 0x06
     ffc:	9f 81       	ldd	r25, Y+7	; 0x07
     ffe:	81 30       	cpi	r24, 0x01	; 1
    1000:	91 05       	cpc	r25, r1
    1002:	a9 f0       	breq	.+42     	; 0x102e <DIO_VoidSetPinValue+0x60>
    1004:	2e 81       	ldd	r18, Y+6	; 0x06
    1006:	3f 81       	ldd	r19, Y+7	; 0x07
    1008:	22 30       	cpi	r18, 0x02	; 2
    100a:	31 05       	cpc	r19, r1
    100c:	2c f4       	brge	.+10     	; 0x1018 <DIO_VoidSetPinValue+0x4a>
    100e:	8e 81       	ldd	r24, Y+6	; 0x06
    1010:	9f 81       	ldd	r25, Y+7	; 0x07
    1012:	00 97       	sbiw	r24, 0x00	; 0
    1014:	01 f1       	breq	.+64     	; 0x1056 <DIO_VoidSetPinValue+0x88>
    1016:	d2 c0       	rjmp	.+420    	; 0x11bc <DIO_VoidSetPinValue+0x1ee>
    1018:	2e 81       	ldd	r18, Y+6	; 0x06
    101a:	3f 81       	ldd	r19, Y+7	; 0x07
    101c:	22 30       	cpi	r18, 0x02	; 2
    101e:	31 05       	cpc	r19, r1
    1020:	71 f1       	breq	.+92     	; 0x107e <DIO_VoidSetPinValue+0xb0>
    1022:	8e 81       	ldd	r24, Y+6	; 0x06
    1024:	9f 81       	ldd	r25, Y+7	; 0x07
    1026:	83 30       	cpi	r24, 0x03	; 3
    1028:	91 05       	cpc	r25, r1
    102a:	e9 f1       	breq	.+122    	; 0x10a6 <DIO_VoidSetPinValue+0xd8>
    102c:	c7 c0       	rjmp	.+398    	; 0x11bc <DIO_VoidSetPinValue+0x1ee>
		  {
		  	case DIO_PORTB: SET_BIT(PORTB,Copy_u8PIN); break;
    102e:	a8 e3       	ldi	r26, 0x38	; 56
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	e8 e3       	ldi	r30, 0x38	; 56
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	48 2f       	mov	r20, r24
    103a:	8a 81       	ldd	r24, Y+2	; 0x02
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	02 2e       	mov	r0, r18
    1046:	02 c0       	rjmp	.+4      	; 0x104c <DIO_VoidSetPinValue+0x7e>
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	0a 94       	dec	r0
    104e:	e2 f7       	brpl	.-8      	; 0x1048 <DIO_VoidSetPinValue+0x7a>
    1050:	84 2b       	or	r24, r20
    1052:	8c 93       	st	X, r24
    1054:	b3 c0       	rjmp	.+358    	; 0x11bc <DIO_VoidSetPinValue+0x1ee>
		  	case DIO_PORTA: SET_BIT(PORTA,Copy_u8PIN); break;
    1056:	ab e3       	ldi	r26, 0x3B	; 59
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	eb e3       	ldi	r30, 0x3B	; 59
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	48 2f       	mov	r20, r24
    1062:	8a 81       	ldd	r24, Y+2	; 0x02
    1064:	28 2f       	mov	r18, r24
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	02 2e       	mov	r0, r18
    106e:	02 c0       	rjmp	.+4      	; 0x1074 <DIO_VoidSetPinValue+0xa6>
    1070:	88 0f       	add	r24, r24
    1072:	99 1f       	adc	r25, r25
    1074:	0a 94       	dec	r0
    1076:	e2 f7       	brpl	.-8      	; 0x1070 <DIO_VoidSetPinValue+0xa2>
    1078:	84 2b       	or	r24, r20
    107a:	8c 93       	st	X, r24
    107c:	9f c0       	rjmp	.+318    	; 0x11bc <DIO_VoidSetPinValue+0x1ee>
		    case DIO_PORTC: SET_BIT(PORTC,Copy_u8PIN); break;
    107e:	a5 e3       	ldi	r26, 0x35	; 53
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	e5 e3       	ldi	r30, 0x35	; 53
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	48 2f       	mov	r20, r24
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	28 2f       	mov	r18, r24
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	02 2e       	mov	r0, r18
    1096:	02 c0       	rjmp	.+4      	; 0x109c <DIO_VoidSetPinValue+0xce>
    1098:	88 0f       	add	r24, r24
    109a:	99 1f       	adc	r25, r25
    109c:	0a 94       	dec	r0
    109e:	e2 f7       	brpl	.-8      	; 0x1098 <DIO_VoidSetPinValue+0xca>
    10a0:	84 2b       	or	r24, r20
    10a2:	8c 93       	st	X, r24
    10a4:	8b c0       	rjmp	.+278    	; 0x11bc <DIO_VoidSetPinValue+0x1ee>
		  	case DIO_PORTD: SET_BIT(PORTD,Copy_u8PIN); break;
    10a6:	a2 e3       	ldi	r26, 0x32	; 50
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e2 e3       	ldi	r30, 0x32	; 50
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	48 2f       	mov	r20, r24
    10b2:	8a 81       	ldd	r24, Y+2	; 0x02
    10b4:	28 2f       	mov	r18, r24
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	02 2e       	mov	r0, r18
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <DIO_VoidSetPinValue+0xf6>
    10c0:	88 0f       	add	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	0a 94       	dec	r0
    10c6:	e2 f7       	brpl	.-8      	; 0x10c0 <DIO_VoidSetPinValue+0xf2>
    10c8:	84 2b       	or	r24, r20
    10ca:	8c 93       	st	X, r24
    10cc:	77 c0       	rjmp	.+238    	; 0x11bc <DIO_VoidSetPinValue+0x1ee>
		  }
	  }
	  else if(Copy_u8Value== DIO_PIN_LOW)
    10ce:	8b 81       	ldd	r24, Y+3	; 0x03
    10d0:	88 23       	and	r24, r24
    10d2:	09 f0       	breq	.+2      	; 0x10d6 <DIO_VoidSetPinValue+0x108>
    10d4:	73 c0       	rjmp	.+230    	; 0x11bc <DIO_VoidSetPinValue+0x1ee>
	  {
		  switch (Copy_u8PORT)
    10d6:	89 81       	ldd	r24, Y+1	; 0x01
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	3d 83       	std	Y+5, r19	; 0x05
    10de:	2c 83       	std	Y+4, r18	; 0x04
    10e0:	8c 81       	ldd	r24, Y+4	; 0x04
    10e2:	9d 81       	ldd	r25, Y+5	; 0x05
    10e4:	81 30       	cpi	r24, 0x01	; 1
    10e6:	91 05       	cpc	r25, r1
    10e8:	b1 f0       	breq	.+44     	; 0x1116 <DIO_VoidSetPinValue+0x148>
    10ea:	2c 81       	ldd	r18, Y+4	; 0x04
    10ec:	3d 81       	ldd	r19, Y+5	; 0x05
    10ee:	22 30       	cpi	r18, 0x02	; 2
    10f0:	31 05       	cpc	r19, r1
    10f2:	2c f4       	brge	.+10     	; 0x10fe <DIO_VoidSetPinValue+0x130>
    10f4:	8c 81       	ldd	r24, Y+4	; 0x04
    10f6:	9d 81       	ldd	r25, Y+5	; 0x05
    10f8:	00 97       	sbiw	r24, 0x00	; 0
    10fa:	11 f1       	breq	.+68     	; 0x1140 <DIO_VoidSetPinValue+0x172>
    10fc:	5f c0       	rjmp	.+190    	; 0x11bc <DIO_VoidSetPinValue+0x1ee>
    10fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1100:	3d 81       	ldd	r19, Y+5	; 0x05
    1102:	22 30       	cpi	r18, 0x02	; 2
    1104:	31 05       	cpc	r19, r1
    1106:	89 f1       	breq	.+98     	; 0x116a <DIO_VoidSetPinValue+0x19c>
    1108:	8c 81       	ldd	r24, Y+4	; 0x04
    110a:	9d 81       	ldd	r25, Y+5	; 0x05
    110c:	83 30       	cpi	r24, 0x03	; 3
    110e:	91 05       	cpc	r25, r1
    1110:	09 f4       	brne	.+2      	; 0x1114 <DIO_VoidSetPinValue+0x146>
    1112:	40 c0       	rjmp	.+128    	; 0x1194 <DIO_VoidSetPinValue+0x1c6>
    1114:	53 c0       	rjmp	.+166    	; 0x11bc <DIO_VoidSetPinValue+0x1ee>
		  {
		  	 case DIO_PORTB: CLR_BIT(PORTB,Copy_u8PIN); break;
    1116:	a8 e3       	ldi	r26, 0x38	; 56
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	e8 e3       	ldi	r30, 0x38	; 56
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	48 2f       	mov	r20, r24
    1122:	8a 81       	ldd	r24, Y+2	; 0x02
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	02 2e       	mov	r0, r18
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <DIO_VoidSetPinValue+0x166>
    1130:	88 0f       	add	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	0a 94       	dec	r0
    1136:	e2 f7       	brpl	.-8      	; 0x1130 <DIO_VoidSetPinValue+0x162>
    1138:	80 95       	com	r24
    113a:	84 23       	and	r24, r20
    113c:	8c 93       	st	X, r24
    113e:	3e c0       	rjmp	.+124    	; 0x11bc <DIO_VoidSetPinValue+0x1ee>
		  	 case DIO_PORTA: CLR_BIT(PORTA,Copy_u8PIN); break;
    1140:	ab e3       	ldi	r26, 0x3B	; 59
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	eb e3       	ldi	r30, 0x3B	; 59
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	48 2f       	mov	r20, r24
    114c:	8a 81       	ldd	r24, Y+2	; 0x02
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	02 2e       	mov	r0, r18
    1158:	02 c0       	rjmp	.+4      	; 0x115e <DIO_VoidSetPinValue+0x190>
    115a:	88 0f       	add	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	0a 94       	dec	r0
    1160:	e2 f7       	brpl	.-8      	; 0x115a <DIO_VoidSetPinValue+0x18c>
    1162:	80 95       	com	r24
    1164:	84 23       	and	r24, r20
    1166:	8c 93       	st	X, r24
    1168:	29 c0       	rjmp	.+82     	; 0x11bc <DIO_VoidSetPinValue+0x1ee>
		  	 case DIO_PORTC: CLR_BIT(PORTC,Copy_u8PIN); break;
    116a:	a5 e3       	ldi	r26, 0x35	; 53
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	e5 e3       	ldi	r30, 0x35	; 53
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	48 2f       	mov	r20, r24
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	02 2e       	mov	r0, r18
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <DIO_VoidSetPinValue+0x1ba>
    1184:	88 0f       	add	r24, r24
    1186:	99 1f       	adc	r25, r25
    1188:	0a 94       	dec	r0
    118a:	e2 f7       	brpl	.-8      	; 0x1184 <DIO_VoidSetPinValue+0x1b6>
    118c:	80 95       	com	r24
    118e:	84 23       	and	r24, r20
    1190:	8c 93       	st	X, r24
    1192:	14 c0       	rjmp	.+40     	; 0x11bc <DIO_VoidSetPinValue+0x1ee>
		  	 case DIO_PORTD: CLR_BIT(PORTD,Copy_u8PIN); break;
    1194:	a2 e3       	ldi	r26, 0x32	; 50
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	e2 e3       	ldi	r30, 0x32	; 50
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	48 2f       	mov	r20, r24
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	02 2e       	mov	r0, r18
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <DIO_VoidSetPinValue+0x1e4>
    11ae:	88 0f       	add	r24, r24
    11b0:	99 1f       	adc	r25, r25
    11b2:	0a 94       	dec	r0
    11b4:	e2 f7       	brpl	.-8      	; 0x11ae <DIO_VoidSetPinValue+0x1e0>
    11b6:	80 95       	com	r24
    11b8:	84 23       	and	r24, r20
    11ba:	8c 93       	st	X, r24
		  }
	  }

}
    11bc:	27 96       	adiw	r28, 0x07	; 7
    11be:	0f b6       	in	r0, 0x3f	; 63
    11c0:	f8 94       	cli
    11c2:	de bf       	out	0x3e, r29	; 62
    11c4:	0f be       	out	0x3f, r0	; 63
    11c6:	cd bf       	out	0x3d, r28	; 61
    11c8:	cf 91       	pop	r28
    11ca:	df 91       	pop	r29
    11cc:	08 95       	ret

000011ce <DIO_VoidTogglePinValue>:

void DIO_VoidTogglePinValue(u8 Copy_u8PORT,u8 Copy_u8PIN)
{
    11ce:	df 93       	push	r29
    11d0:	cf 93       	push	r28
    11d2:	00 d0       	rcall	.+0      	; 0x11d4 <DIO_VoidTogglePinValue+0x6>
    11d4:	00 d0       	rcall	.+0      	; 0x11d6 <DIO_VoidTogglePinValue+0x8>
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
    11da:	89 83       	std	Y+1, r24	; 0x01
    11dc:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PORT)
    11de:	89 81       	ldd	r24, Y+1	; 0x01
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	3c 83       	std	Y+4, r19	; 0x04
    11e6:	2b 83       	std	Y+3, r18	; 0x03
    11e8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ea:	9c 81       	ldd	r25, Y+4	; 0x04
    11ec:	81 30       	cpi	r24, 0x01	; 1
    11ee:	91 05       	cpc	r25, r1
    11f0:	a9 f0       	breq	.+42     	; 0x121c <DIO_VoidTogglePinValue+0x4e>
    11f2:	2b 81       	ldd	r18, Y+3	; 0x03
    11f4:	3c 81       	ldd	r19, Y+4	; 0x04
    11f6:	22 30       	cpi	r18, 0x02	; 2
    11f8:	31 05       	cpc	r19, r1
    11fa:	2c f4       	brge	.+10     	; 0x1206 <DIO_VoidTogglePinValue+0x38>
    11fc:	8b 81       	ldd	r24, Y+3	; 0x03
    11fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1200:	00 97       	sbiw	r24, 0x00	; 0
    1202:	01 f1       	breq	.+64     	; 0x1244 <DIO_VoidTogglePinValue+0x76>
    1204:	5a c0       	rjmp	.+180    	; 0x12ba <DIO_VoidTogglePinValue+0xec>
    1206:	2b 81       	ldd	r18, Y+3	; 0x03
    1208:	3c 81       	ldd	r19, Y+4	; 0x04
    120a:	22 30       	cpi	r18, 0x02	; 2
    120c:	31 05       	cpc	r19, r1
    120e:	71 f1       	breq	.+92     	; 0x126c <DIO_VoidTogglePinValue+0x9e>
    1210:	8b 81       	ldd	r24, Y+3	; 0x03
    1212:	9c 81       	ldd	r25, Y+4	; 0x04
    1214:	83 30       	cpi	r24, 0x03	; 3
    1216:	91 05       	cpc	r25, r1
    1218:	e9 f1       	breq	.+122    	; 0x1294 <DIO_VoidTogglePinValue+0xc6>
    121a:	4f c0       	rjmp	.+158    	; 0x12ba <DIO_VoidTogglePinValue+0xec>
    {
     case DIO_PORTB: TOG_BIT(PORTB,Copy_u8PIN); break;
    121c:	a8 e3       	ldi	r26, 0x38	; 56
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	e8 e3       	ldi	r30, 0x38	; 56
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	48 2f       	mov	r20, r24
    1228:	8a 81       	ldd	r24, Y+2	; 0x02
    122a:	28 2f       	mov	r18, r24
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	02 2e       	mov	r0, r18
    1234:	02 c0       	rjmp	.+4      	; 0x123a <DIO_VoidTogglePinValue+0x6c>
    1236:	88 0f       	add	r24, r24
    1238:	99 1f       	adc	r25, r25
    123a:	0a 94       	dec	r0
    123c:	e2 f7       	brpl	.-8      	; 0x1236 <DIO_VoidTogglePinValue+0x68>
    123e:	84 27       	eor	r24, r20
    1240:	8c 93       	st	X, r24
    1242:	3b c0       	rjmp	.+118    	; 0x12ba <DIO_VoidTogglePinValue+0xec>
	 case DIO_PORTA: TOG_BIT(PORTA,Copy_u8PIN); break;
    1244:	ab e3       	ldi	r26, 0x3B	; 59
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	eb e3       	ldi	r30, 0x3B	; 59
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	48 2f       	mov	r20, r24
    1250:	8a 81       	ldd	r24, Y+2	; 0x02
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	02 2e       	mov	r0, r18
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <DIO_VoidTogglePinValue+0x94>
    125e:	88 0f       	add	r24, r24
    1260:	99 1f       	adc	r25, r25
    1262:	0a 94       	dec	r0
    1264:	e2 f7       	brpl	.-8      	; 0x125e <DIO_VoidTogglePinValue+0x90>
    1266:	84 27       	eor	r24, r20
    1268:	8c 93       	st	X, r24
    126a:	27 c0       	rjmp	.+78     	; 0x12ba <DIO_VoidTogglePinValue+0xec>
	 case DIO_PORTC: TOG_BIT(PORTC,Copy_u8PIN); break;
    126c:	a5 e3       	ldi	r26, 0x35	; 53
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	e5 e3       	ldi	r30, 0x35	; 53
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	48 2f       	mov	r20, r24
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	28 2f       	mov	r18, r24
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	02 2e       	mov	r0, r18
    1284:	02 c0       	rjmp	.+4      	; 0x128a <DIO_VoidTogglePinValue+0xbc>
    1286:	88 0f       	add	r24, r24
    1288:	99 1f       	adc	r25, r25
    128a:	0a 94       	dec	r0
    128c:	e2 f7       	brpl	.-8      	; 0x1286 <DIO_VoidTogglePinValue+0xb8>
    128e:	84 27       	eor	r24, r20
    1290:	8c 93       	st	X, r24
    1292:	13 c0       	rjmp	.+38     	; 0x12ba <DIO_VoidTogglePinValue+0xec>
	 case DIO_PORTD: TOG_BIT(PORTD,Copy_u8PIN); break;
    1294:	a2 e3       	ldi	r26, 0x32	; 50
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	e2 e3       	ldi	r30, 0x32	; 50
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	48 2f       	mov	r20, r24
    12a0:	8a 81       	ldd	r24, Y+2	; 0x02
    12a2:	28 2f       	mov	r18, r24
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	02 2e       	mov	r0, r18
    12ac:	02 c0       	rjmp	.+4      	; 0x12b2 <DIO_VoidTogglePinValue+0xe4>
    12ae:	88 0f       	add	r24, r24
    12b0:	99 1f       	adc	r25, r25
    12b2:	0a 94       	dec	r0
    12b4:	e2 f7       	brpl	.-8      	; 0x12ae <DIO_VoidTogglePinValue+0xe0>
    12b6:	84 27       	eor	r24, r20
    12b8:	8c 93       	st	X, r24
	}
}
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	0f 90       	pop	r0
    12c2:	cf 91       	pop	r28
    12c4:	df 91       	pop	r29
    12c6:	08 95       	ret

000012c8 <DIO_VoidGetPinValue>:

u8 DIO_VoidGetPinValue(u8 Copy_u8PORT,u8 Copy_u8PIN)
{
    12c8:	df 93       	push	r29
    12ca:	cf 93       	push	r28
    12cc:	00 d0       	rcall	.+0      	; 0x12ce <DIO_VoidGetPinValue+0x6>
    12ce:	00 d0       	rcall	.+0      	; 0x12d0 <DIO_VoidGetPinValue+0x8>
    12d0:	0f 92       	push	r0
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62
    12d6:	8a 83       	std	Y+2, r24	; 0x02
    12d8:	6b 83       	std	Y+3, r22	; 0x03
	u8 PIN_u8Value=0;
    12da:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8PORT)
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	3d 83       	std	Y+5, r19	; 0x05
    12e4:	2c 83       	std	Y+4, r18	; 0x04
    12e6:	4c 81       	ldd	r20, Y+4	; 0x04
    12e8:	5d 81       	ldd	r21, Y+5	; 0x05
    12ea:	41 30       	cpi	r20, 0x01	; 1
    12ec:	51 05       	cpc	r21, r1
    12ee:	c1 f0       	breq	.+48     	; 0x1320 <DIO_VoidGetPinValue+0x58>
    12f0:	8c 81       	ldd	r24, Y+4	; 0x04
    12f2:	9d 81       	ldd	r25, Y+5	; 0x05
    12f4:	82 30       	cpi	r24, 0x02	; 2
    12f6:	91 05       	cpc	r25, r1
    12f8:	34 f4       	brge	.+12     	; 0x1306 <DIO_VoidGetPinValue+0x3e>
    12fa:	2c 81       	ldd	r18, Y+4	; 0x04
    12fc:	3d 81       	ldd	r19, Y+5	; 0x05
    12fe:	21 15       	cp	r18, r1
    1300:	31 05       	cpc	r19, r1
    1302:	61 f1       	breq	.+88     	; 0x135c <DIO_VoidGetPinValue+0x94>
    1304:	84 c0       	rjmp	.+264    	; 0x140e <DIO_VoidGetPinValue+0x146>
    1306:	4c 81       	ldd	r20, Y+4	; 0x04
    1308:	5d 81       	ldd	r21, Y+5	; 0x05
    130a:	42 30       	cpi	r20, 0x02	; 2
    130c:	51 05       	cpc	r21, r1
    130e:	09 f4       	brne	.+2      	; 0x1312 <DIO_VoidGetPinValue+0x4a>
    1310:	43 c0       	rjmp	.+134    	; 0x1398 <DIO_VoidGetPinValue+0xd0>
    1312:	8c 81       	ldd	r24, Y+4	; 0x04
    1314:	9d 81       	ldd	r25, Y+5	; 0x05
    1316:	83 30       	cpi	r24, 0x03	; 3
    1318:	91 05       	cpc	r25, r1
    131a:	09 f4       	brne	.+2      	; 0x131e <DIO_VoidGetPinValue+0x56>
    131c:	5b c0       	rjmp	.+182    	; 0x13d4 <DIO_VoidGetPinValue+0x10c>
    131e:	77 c0       	rjmp	.+238    	; 0x140e <DIO_VoidGetPinValue+0x146>
	{
	   case DIO_PORTB: PIN_u8Value=GET_BIT(PINB,Copy_u8PIN); break;
    1320:	e6 e3       	ldi	r30, 0x36	; 54
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	48 2f       	mov	r20, r24
    1328:	50 e0       	ldi	r21, 0x00	; 0
    132a:	8b 81       	ldd	r24, Y+3	; 0x03
    132c:	28 2f       	mov	r18, r24
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	02 c0       	rjmp	.+4      	; 0x133a <DIO_VoidGetPinValue+0x72>
    1336:	88 0f       	add	r24, r24
    1338:	99 1f       	adc	r25, r25
    133a:	2a 95       	dec	r18
    133c:	e2 f7       	brpl	.-8      	; 0x1336 <DIO_VoidGetPinValue+0x6e>
    133e:	9a 01       	movw	r18, r20
    1340:	28 23       	and	r18, r24
    1342:	39 23       	and	r19, r25
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	88 2f       	mov	r24, r24
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	a9 01       	movw	r20, r18
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <DIO_VoidGetPinValue+0x8a>
    134e:	55 95       	asr	r21
    1350:	47 95       	ror	r20
    1352:	8a 95       	dec	r24
    1354:	e2 f7       	brpl	.-8      	; 0x134e <DIO_VoidGetPinValue+0x86>
    1356:	ca 01       	movw	r24, r20
    1358:	89 83       	std	Y+1, r24	; 0x01
    135a:	59 c0       	rjmp	.+178    	; 0x140e <DIO_VoidGetPinValue+0x146>
	   case DIO_PORTA: PIN_u8Value=GET_BIT(PINA,Copy_u8PIN); break;
    135c:	e9 e3       	ldi	r30, 0x39	; 57
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	48 2f       	mov	r20, r24
    1364:	50 e0       	ldi	r21, 0x00	; 0
    1366:	8b 81       	ldd	r24, Y+3	; 0x03
    1368:	28 2f       	mov	r18, r24
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <DIO_VoidGetPinValue+0xae>
    1372:	88 0f       	add	r24, r24
    1374:	99 1f       	adc	r25, r25
    1376:	2a 95       	dec	r18
    1378:	e2 f7       	brpl	.-8      	; 0x1372 <DIO_VoidGetPinValue+0xaa>
    137a:	9a 01       	movw	r18, r20
    137c:	28 23       	and	r18, r24
    137e:	39 23       	and	r19, r25
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
    1382:	88 2f       	mov	r24, r24
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	a9 01       	movw	r20, r18
    1388:	02 c0       	rjmp	.+4      	; 0x138e <DIO_VoidGetPinValue+0xc6>
    138a:	55 95       	asr	r21
    138c:	47 95       	ror	r20
    138e:	8a 95       	dec	r24
    1390:	e2 f7       	brpl	.-8      	; 0x138a <DIO_VoidGetPinValue+0xc2>
    1392:	ca 01       	movw	r24, r20
    1394:	89 83       	std	Y+1, r24	; 0x01
    1396:	3b c0       	rjmp	.+118    	; 0x140e <DIO_VoidGetPinValue+0x146>
	   case DIO_PORTC: PIN_u8Value=GET_BIT(PINC,Copy_u8PIN); break;
    1398:	e3 e3       	ldi	r30, 0x33	; 51
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	48 2f       	mov	r20, r24
    13a0:	50 e0       	ldi	r21, 0x00	; 0
    13a2:	8b 81       	ldd	r24, Y+3	; 0x03
    13a4:	28 2f       	mov	r18, r24
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	02 c0       	rjmp	.+4      	; 0x13b2 <DIO_VoidGetPinValue+0xea>
    13ae:	88 0f       	add	r24, r24
    13b0:	99 1f       	adc	r25, r25
    13b2:	2a 95       	dec	r18
    13b4:	e2 f7       	brpl	.-8      	; 0x13ae <DIO_VoidGetPinValue+0xe6>
    13b6:	9a 01       	movw	r18, r20
    13b8:	28 23       	and	r18, r24
    13ba:	39 23       	and	r19, r25
    13bc:	8b 81       	ldd	r24, Y+3	; 0x03
    13be:	88 2f       	mov	r24, r24
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	a9 01       	movw	r20, r18
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <DIO_VoidGetPinValue+0x102>
    13c6:	55 95       	asr	r21
    13c8:	47 95       	ror	r20
    13ca:	8a 95       	dec	r24
    13cc:	e2 f7       	brpl	.-8      	; 0x13c6 <DIO_VoidGetPinValue+0xfe>
    13ce:	ca 01       	movw	r24, r20
    13d0:	89 83       	std	Y+1, r24	; 0x01
    13d2:	1d c0       	rjmp	.+58     	; 0x140e <DIO_VoidGetPinValue+0x146>
	   case DIO_PORTD: PIN_u8Value=GET_BIT(PIND,Copy_u8PIN); break;
    13d4:	e0 e3       	ldi	r30, 0x30	; 48
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	48 2f       	mov	r20, r24
    13dc:	50 e0       	ldi	r21, 0x00	; 0
    13de:	8b 81       	ldd	r24, Y+3	; 0x03
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <DIO_VoidGetPinValue+0x126>
    13ea:	88 0f       	add	r24, r24
    13ec:	99 1f       	adc	r25, r25
    13ee:	2a 95       	dec	r18
    13f0:	e2 f7       	brpl	.-8      	; 0x13ea <DIO_VoidGetPinValue+0x122>
    13f2:	9a 01       	movw	r18, r20
    13f4:	28 23       	and	r18, r24
    13f6:	39 23       	and	r19, r25
    13f8:	8b 81       	ldd	r24, Y+3	; 0x03
    13fa:	88 2f       	mov	r24, r24
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	a9 01       	movw	r20, r18
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <DIO_VoidGetPinValue+0x13e>
    1402:	55 95       	asr	r21
    1404:	47 95       	ror	r20
    1406:	8a 95       	dec	r24
    1408:	e2 f7       	brpl	.-8      	; 0x1402 <DIO_VoidGetPinValue+0x13a>
    140a:	ca 01       	movw	r24, r20
    140c:	89 83       	std	Y+1, r24	; 0x01
    }
	return PIN_u8Value;
    140e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1410:	0f 90       	pop	r0
    1412:	0f 90       	pop	r0
    1414:	0f 90       	pop	r0
    1416:	0f 90       	pop	r0
    1418:	0f 90       	pop	r0
    141a:	cf 91       	pop	r28
    141c:	df 91       	pop	r29
    141e:	08 95       	ret

00001420 <DIO_VoidSetPortDirection>:

void DIO_VoidSetPortDirection(u8 Copy_u8PORT,u8 Copy_u8Direction)
{
    1420:	df 93       	push	r29
    1422:	cf 93       	push	r28
    1424:	00 d0       	rcall	.+0      	; 0x1426 <DIO_VoidSetPortDirection+0x6>
    1426:	00 d0       	rcall	.+0      	; 0x1428 <DIO_VoidSetPortDirection+0x8>
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
    142c:	89 83       	std	Y+1, r24	; 0x01
    142e:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PORT)
    1430:	89 81       	ldd	r24, Y+1	; 0x01
    1432:	28 2f       	mov	r18, r24
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	3c 83       	std	Y+4, r19	; 0x04
    1438:	2b 83       	std	Y+3, r18	; 0x03
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	9c 81       	ldd	r25, Y+4	; 0x04
    143e:	81 30       	cpi	r24, 0x01	; 1
    1440:	91 05       	cpc	r25, r1
    1442:	a9 f0       	breq	.+42     	; 0x146e <DIO_VoidSetPortDirection+0x4e>
    1444:	2b 81       	ldd	r18, Y+3	; 0x03
    1446:	3c 81       	ldd	r19, Y+4	; 0x04
    1448:	22 30       	cpi	r18, 0x02	; 2
    144a:	31 05       	cpc	r19, r1
    144c:	2c f4       	brge	.+10     	; 0x1458 <DIO_VoidSetPortDirection+0x38>
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	9c 81       	ldd	r25, Y+4	; 0x04
    1452:	00 97       	sbiw	r24, 0x00	; 0
    1454:	89 f0       	breq	.+34     	; 0x1478 <DIO_VoidSetPortDirection+0x58>
    1456:	1e c0       	rjmp	.+60     	; 0x1494 <DIO_VoidSetPortDirection+0x74>
    1458:	2b 81       	ldd	r18, Y+3	; 0x03
    145a:	3c 81       	ldd	r19, Y+4	; 0x04
    145c:	22 30       	cpi	r18, 0x02	; 2
    145e:	31 05       	cpc	r19, r1
    1460:	81 f0       	breq	.+32     	; 0x1482 <DIO_VoidSetPortDirection+0x62>
    1462:	8b 81       	ldd	r24, Y+3	; 0x03
    1464:	9c 81       	ldd	r25, Y+4	; 0x04
    1466:	83 30       	cpi	r24, 0x03	; 3
    1468:	91 05       	cpc	r25, r1
    146a:	81 f0       	breq	.+32     	; 0x148c <DIO_VoidSetPortDirection+0x6c>
    146c:	13 c0       	rjmp	.+38     	; 0x1494 <DIO_VoidSetPortDirection+0x74>
		{
		   case DIO_PORTB: DDRB=Copy_u8Direction; break;
    146e:	e7 e3       	ldi	r30, 0x37	; 55
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	8a 81       	ldd	r24, Y+2	; 0x02
    1474:	80 83       	st	Z, r24
    1476:	0e c0       	rjmp	.+28     	; 0x1494 <DIO_VoidSetPortDirection+0x74>
		   case DIO_PORTA: DDRA=Copy_u8Direction; break;
    1478:	ea e3       	ldi	r30, 0x3A	; 58
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	8a 81       	ldd	r24, Y+2	; 0x02
    147e:	80 83       	st	Z, r24
    1480:	09 c0       	rjmp	.+18     	; 0x1494 <DIO_VoidSetPortDirection+0x74>
		   case DIO_PORTC: DDRC=Copy_u8Direction; break;
    1482:	e4 e3       	ldi	r30, 0x34	; 52
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	8a 81       	ldd	r24, Y+2	; 0x02
    1488:	80 83       	st	Z, r24
    148a:	04 c0       	rjmp	.+8      	; 0x1494 <DIO_VoidSetPortDirection+0x74>
		   case DIO_PORTD: DDRD=Copy_u8Direction; break;
    148c:	e1 e3       	ldi	r30, 0x31	; 49
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	8a 81       	ldd	r24, Y+2	; 0x02
    1492:	80 83       	st	Z, r24
	    }

}
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
    149c:	cf 91       	pop	r28
    149e:	df 91       	pop	r29
    14a0:	08 95       	ret

000014a2 <DIO_VoidSetPortValue>:
void DIO_VoidSetPortValue(u8 Copy_u8PORT,u8 Copy_u8Value)
{
    14a2:	df 93       	push	r29
    14a4:	cf 93       	push	r28
    14a6:	00 d0       	rcall	.+0      	; 0x14a8 <DIO_VoidSetPortValue+0x6>
    14a8:	00 d0       	rcall	.+0      	; 0x14aa <DIO_VoidSetPortValue+0x8>
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62
    14ae:	89 83       	std	Y+1, r24	; 0x01
    14b0:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PORT)
    14b2:	89 81       	ldd	r24, Y+1	; 0x01
    14b4:	28 2f       	mov	r18, r24
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	3c 83       	std	Y+4, r19	; 0x04
    14ba:	2b 83       	std	Y+3, r18	; 0x03
    14bc:	8b 81       	ldd	r24, Y+3	; 0x03
    14be:	9c 81       	ldd	r25, Y+4	; 0x04
    14c0:	81 30       	cpi	r24, 0x01	; 1
    14c2:	91 05       	cpc	r25, r1
    14c4:	a9 f0       	breq	.+42     	; 0x14f0 <DIO_VoidSetPortValue+0x4e>
    14c6:	2b 81       	ldd	r18, Y+3	; 0x03
    14c8:	3c 81       	ldd	r19, Y+4	; 0x04
    14ca:	22 30       	cpi	r18, 0x02	; 2
    14cc:	31 05       	cpc	r19, r1
    14ce:	2c f4       	brge	.+10     	; 0x14da <DIO_VoidSetPortValue+0x38>
    14d0:	8b 81       	ldd	r24, Y+3	; 0x03
    14d2:	9c 81       	ldd	r25, Y+4	; 0x04
    14d4:	00 97       	sbiw	r24, 0x00	; 0
    14d6:	89 f0       	breq	.+34     	; 0x14fa <DIO_VoidSetPortValue+0x58>
    14d8:	1e c0       	rjmp	.+60     	; 0x1516 <DIO_VoidSetPortValue+0x74>
    14da:	2b 81       	ldd	r18, Y+3	; 0x03
    14dc:	3c 81       	ldd	r19, Y+4	; 0x04
    14de:	22 30       	cpi	r18, 0x02	; 2
    14e0:	31 05       	cpc	r19, r1
    14e2:	81 f0       	breq	.+32     	; 0x1504 <DIO_VoidSetPortValue+0x62>
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
    14e6:	9c 81       	ldd	r25, Y+4	; 0x04
    14e8:	83 30       	cpi	r24, 0x03	; 3
    14ea:	91 05       	cpc	r25, r1
    14ec:	81 f0       	breq	.+32     	; 0x150e <DIO_VoidSetPortValue+0x6c>
    14ee:	13 c0       	rjmp	.+38     	; 0x1516 <DIO_VoidSetPortValue+0x74>
		{
			   case DIO_PORTB: PORTB=Copy_u8Value; break;
    14f0:	e8 e3       	ldi	r30, 0x38	; 56
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	8a 81       	ldd	r24, Y+2	; 0x02
    14f6:	80 83       	st	Z, r24
    14f8:	0e c0       	rjmp	.+28     	; 0x1516 <DIO_VoidSetPortValue+0x74>
			   case DIO_PORTA: PORTA=Copy_u8Value; break;
    14fa:	eb e3       	ldi	r30, 0x3B	; 59
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1500:	80 83       	st	Z, r24
    1502:	09 c0       	rjmp	.+18     	; 0x1516 <DIO_VoidSetPortValue+0x74>
			   case DIO_PORTC: PORTC=Copy_u8Value; break;
    1504:	e5 e3       	ldi	r30, 0x35	; 53
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	8a 81       	ldd	r24, Y+2	; 0x02
    150a:	80 83       	st	Z, r24
    150c:	04 c0       	rjmp	.+8      	; 0x1516 <DIO_VoidSetPortValue+0x74>
			   case DIO_PORTD: PORTD=Copy_u8Value; break;
    150e:	e2 e3       	ldi	r30, 0x32	; 50
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	8a 81       	ldd	r24, Y+2	; 0x02
    1514:	80 83       	st	Z, r24
	    }
}
    1516:	0f 90       	pop	r0
    1518:	0f 90       	pop	r0
    151a:	0f 90       	pop	r0
    151c:	0f 90       	pop	r0
    151e:	cf 91       	pop	r28
    1520:	df 91       	pop	r29
    1522:	08 95       	ret

00001524 <DIO_VoidTogglePortValue>:
void DIO_VoidTogglePortValue(u8 Copy_u8PORT)
{
    1524:	df 93       	push	r29
    1526:	cf 93       	push	r28
    1528:	00 d0       	rcall	.+0      	; 0x152a <DIO_VoidTogglePortValue+0x6>
    152a:	0f 92       	push	r0
    152c:	cd b7       	in	r28, 0x3d	; 61
    152e:	de b7       	in	r29, 0x3e	; 62
    1530:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8PORT)
    1532:	89 81       	ldd	r24, Y+1	; 0x01
    1534:	28 2f       	mov	r18, r24
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	3b 83       	std	Y+3, r19	; 0x03
    153a:	2a 83       	std	Y+2, r18	; 0x02
    153c:	8a 81       	ldd	r24, Y+2	; 0x02
    153e:	9b 81       	ldd	r25, Y+3	; 0x03
    1540:	81 30       	cpi	r24, 0x01	; 1
    1542:	91 05       	cpc	r25, r1
    1544:	a9 f0       	breq	.+42     	; 0x1570 <DIO_VoidTogglePortValue+0x4c>
    1546:	2a 81       	ldd	r18, Y+2	; 0x02
    1548:	3b 81       	ldd	r19, Y+3	; 0x03
    154a:	22 30       	cpi	r18, 0x02	; 2
    154c:	31 05       	cpc	r19, r1
    154e:	2c f4       	brge	.+10     	; 0x155a <DIO_VoidTogglePortValue+0x36>
    1550:	8a 81       	ldd	r24, Y+2	; 0x02
    1552:	9b 81       	ldd	r25, Y+3	; 0x03
    1554:	00 97       	sbiw	r24, 0x00	; 0
    1556:	a1 f0       	breq	.+40     	; 0x1580 <DIO_VoidTogglePortValue+0x5c>
    1558:	2a c0       	rjmp	.+84     	; 0x15ae <DIO_VoidTogglePortValue+0x8a>
    155a:	2a 81       	ldd	r18, Y+2	; 0x02
    155c:	3b 81       	ldd	r19, Y+3	; 0x03
    155e:	22 30       	cpi	r18, 0x02	; 2
    1560:	31 05       	cpc	r19, r1
    1562:	b1 f0       	breq	.+44     	; 0x1590 <DIO_VoidTogglePortValue+0x6c>
    1564:	8a 81       	ldd	r24, Y+2	; 0x02
    1566:	9b 81       	ldd	r25, Y+3	; 0x03
    1568:	83 30       	cpi	r24, 0x03	; 3
    156a:	91 05       	cpc	r25, r1
    156c:	c9 f0       	breq	.+50     	; 0x15a0 <DIO_VoidTogglePortValue+0x7c>
    156e:	1f c0       	rjmp	.+62     	; 0x15ae <DIO_VoidTogglePortValue+0x8a>
			{
				   case DIO_PORTB: PORTB=~PORTB; break;
    1570:	a8 e3       	ldi	r26, 0x38	; 56
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	e8 e3       	ldi	r30, 0x38	; 56
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	80 95       	com	r24
    157c:	8c 93       	st	X, r24
    157e:	17 c0       	rjmp	.+46     	; 0x15ae <DIO_VoidTogglePortValue+0x8a>
				   case DIO_PORTA: PORTA=~PORTA; break;
    1580:	ab e3       	ldi	r26, 0x3B	; 59
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	eb e3       	ldi	r30, 0x3B	; 59
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	80 95       	com	r24
    158c:	8c 93       	st	X, r24
    158e:	0f c0       	rjmp	.+30     	; 0x15ae <DIO_VoidTogglePortValue+0x8a>
				   case DIO_PORTC: PORTC=~PORTC; break;
    1590:	a5 e3       	ldi	r26, 0x35	; 53
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	e5 e3       	ldi	r30, 0x35	; 53
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	80 95       	com	r24
    159c:	8c 93       	st	X, r24
    159e:	07 c0       	rjmp	.+14     	; 0x15ae <DIO_VoidTogglePortValue+0x8a>
				   case DIO_PORTD: PORTD=~PORTD; break;
    15a0:	a2 e3       	ldi	r26, 0x32	; 50
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	e2 e3       	ldi	r30, 0x32	; 50
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	80 95       	com	r24
    15ac:	8c 93       	st	X, r24
		    }
}
    15ae:	0f 90       	pop	r0
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	cf 91       	pop	r28
    15b6:	df 91       	pop	r29
    15b8:	08 95       	ret

000015ba <DIO_VoidGetPortValue>:
u8   DIO_VoidGetPortValue(u8 Copy_u8PORT)
{
    15ba:	df 93       	push	r29
    15bc:	cf 93       	push	r28
    15be:	00 d0       	rcall	.+0      	; 0x15c0 <DIO_VoidGetPortValue+0x6>
    15c0:	00 d0       	rcall	.+0      	; 0x15c2 <DIO_VoidGetPortValue+0x8>
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62
    15c6:	8a 83       	std	Y+2, r24	; 0x02
	u8 PIN_u8Value=0;
    15c8:	19 82       	std	Y+1, r1	; 0x01
		switch (Copy_u8PORT)
    15ca:	8a 81       	ldd	r24, Y+2	; 0x02
    15cc:	28 2f       	mov	r18, r24
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	3c 83       	std	Y+4, r19	; 0x04
    15d2:	2b 83       	std	Y+3, r18	; 0x03
    15d4:	8b 81       	ldd	r24, Y+3	; 0x03
    15d6:	9c 81       	ldd	r25, Y+4	; 0x04
    15d8:	81 30       	cpi	r24, 0x01	; 1
    15da:	91 05       	cpc	r25, r1
    15dc:	a9 f0       	breq	.+42     	; 0x1608 <DIO_VoidGetPortValue+0x4e>
    15de:	2b 81       	ldd	r18, Y+3	; 0x03
    15e0:	3c 81       	ldd	r19, Y+4	; 0x04
    15e2:	22 30       	cpi	r18, 0x02	; 2
    15e4:	31 05       	cpc	r19, r1
    15e6:	2c f4       	brge	.+10     	; 0x15f2 <DIO_VoidGetPortValue+0x38>
    15e8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ea:	9c 81       	ldd	r25, Y+4	; 0x04
    15ec:	00 97       	sbiw	r24, 0x00	; 0
    15ee:	89 f0       	breq	.+34     	; 0x1612 <DIO_VoidGetPortValue+0x58>
    15f0:	1e c0       	rjmp	.+60     	; 0x162e <DIO_VoidGetPortValue+0x74>
    15f2:	2b 81       	ldd	r18, Y+3	; 0x03
    15f4:	3c 81       	ldd	r19, Y+4	; 0x04
    15f6:	22 30       	cpi	r18, 0x02	; 2
    15f8:	31 05       	cpc	r19, r1
    15fa:	81 f0       	breq	.+32     	; 0x161c <DIO_VoidGetPortValue+0x62>
    15fc:	8b 81       	ldd	r24, Y+3	; 0x03
    15fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1600:	83 30       	cpi	r24, 0x03	; 3
    1602:	91 05       	cpc	r25, r1
    1604:	81 f0       	breq	.+32     	; 0x1626 <DIO_VoidGetPortValue+0x6c>
    1606:	13 c0       	rjmp	.+38     	; 0x162e <DIO_VoidGetPortValue+0x74>
		{
		   case DIO_PORTB: PIN_u8Value=PINB; break;
    1608:	e6 e3       	ldi	r30, 0x36	; 54
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	89 83       	std	Y+1, r24	; 0x01
    1610:	0e c0       	rjmp	.+28     	; 0x162e <DIO_VoidGetPortValue+0x74>
		   case DIO_PORTA: PIN_u8Value=PINA; break;
    1612:	e9 e3       	ldi	r30, 0x39	; 57
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	89 83       	std	Y+1, r24	; 0x01
    161a:	09 c0       	rjmp	.+18     	; 0x162e <DIO_VoidGetPortValue+0x74>
		   case DIO_PORTC: PIN_u8Value=PINC; break;
    161c:	e3 e3       	ldi	r30, 0x33	; 51
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	89 83       	std	Y+1, r24	; 0x01
    1624:	04 c0       	rjmp	.+8      	; 0x162e <DIO_VoidGetPortValue+0x74>
		   case DIO_PORTD: PIN_u8Value=PIND; break;
    1626:	e0 e3       	ldi	r30, 0x30	; 48
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	89 83       	std	Y+1, r24	; 0x01
	    }
		return PIN_u8Value;
    162e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1630:	0f 90       	pop	r0
    1632:	0f 90       	pop	r0
    1634:	0f 90       	pop	r0
    1636:	0f 90       	pop	r0
    1638:	cf 91       	pop	r28
    163a:	df 91       	pop	r29
    163c:	08 95       	ret

0000163e <BUZZ_voidInit>:

#include "../DIO/DIO_interface.h"
#include "BUZZ_interface.h"

void BUZZ_voidInit(BUZZ_Type BUZZ_Config)
{
    163e:	df 93       	push	r29
    1640:	cf 93       	push	r28
    1642:	00 d0       	rcall	.+0      	; 0x1644 <BUZZ_voidInit+0x6>
    1644:	0f 92       	push	r0
    1646:	cd b7       	in	r28, 0x3d	; 61
    1648:	de b7       	in	r29, 0x3e	; 62
    164a:	69 83       	std	Y+1, r22	; 0x01
    164c:	7a 83       	std	Y+2, r23	; 0x02
    164e:	8b 83       	std	Y+3, r24	; 0x03

	DIO_VoidSetPinDirection( BUZZ_Config.Port , BUZZ_Config.Pin , DIO_PIN_OUTPUT);
    1650:	89 81       	ldd	r24, Y+1	; 0x01
    1652:	9a 81       	ldd	r25, Y+2	; 0x02
    1654:	69 2f       	mov	r22, r25
    1656:	41 e0       	ldi	r20, 0x01	; 1
    1658:	0e 94 e7 06 	call	0xdce	; 0xdce <DIO_VoidSetPinDirection>

}
    165c:	0f 90       	pop	r0
    165e:	0f 90       	pop	r0
    1660:	0f 90       	pop	r0
    1662:	cf 91       	pop	r28
    1664:	df 91       	pop	r29
    1666:	08 95       	ret

00001668 <BUZZ_voidOn>:

void BUZZ_voidOn(BUZZ_Type BUZZ_Config)
{
    1668:	df 93       	push	r29
    166a:	cf 93       	push	r28
    166c:	00 d0       	rcall	.+0      	; 0x166e <BUZZ_voidOn+0x6>
    166e:	0f 92       	push	r0
    1670:	cd b7       	in	r28, 0x3d	; 61
    1672:	de b7       	in	r29, 0x3e	; 62
    1674:	69 83       	std	Y+1, r22	; 0x01
    1676:	7a 83       	std	Y+2, r23	; 0x02
    1678:	8b 83       	std	Y+3, r24	; 0x03

	if(BUZZ_Config.Active_State == ACTIVE_HIGH ){
    167a:	8b 81       	ldd	r24, Y+3	; 0x03
    167c:	81 30       	cpi	r24, 0x01	; 1
    167e:	39 f4       	brne	.+14     	; 0x168e <BUZZ_voidOn+0x26>

		DIO_VoidSetPinValue(BUZZ_Config.Port ,BUZZ_Config.Pin ,DIO_PIN_HIGH);
    1680:	89 81       	ldd	r24, Y+1	; 0x01
    1682:	9a 81       	ldd	r25, Y+2	; 0x02
    1684:	69 2f       	mov	r22, r25
    1686:	41 e0       	ldi	r20, 0x01	; 1
    1688:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_VoidSetPinValue>
    168c:	09 c0       	rjmp	.+18     	; 0x16a0 <BUZZ_voidOn+0x38>

	}else if(BUZZ_Config.Active_State == ACTIVE_LOW ){
    168e:	8b 81       	ldd	r24, Y+3	; 0x03
    1690:	88 23       	and	r24, r24
    1692:	31 f4       	brne	.+12     	; 0x16a0 <BUZZ_voidOn+0x38>

		DIO_VoidSetPinValue(BUZZ_Config.Port ,BUZZ_Config.Pin ,DIO_PIN_LOW);
    1694:	89 81       	ldd	r24, Y+1	; 0x01
    1696:	9a 81       	ldd	r25, Y+2	; 0x02
    1698:	69 2f       	mov	r22, r25
    169a:	40 e0       	ldi	r20, 0x00	; 0
    169c:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_VoidSetPinValue>

	}

}
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0
    16a4:	0f 90       	pop	r0
    16a6:	cf 91       	pop	r28
    16a8:	df 91       	pop	r29
    16aa:	08 95       	ret

000016ac <BUZZ_voidOff>:

void BUZZ_voidOff(BUZZ_Type BUZZ_Config)
{
    16ac:	df 93       	push	r29
    16ae:	cf 93       	push	r28
    16b0:	00 d0       	rcall	.+0      	; 0x16b2 <BUZZ_voidOff+0x6>
    16b2:	0f 92       	push	r0
    16b4:	cd b7       	in	r28, 0x3d	; 61
    16b6:	de b7       	in	r29, 0x3e	; 62
    16b8:	69 83       	std	Y+1, r22	; 0x01
    16ba:	7a 83       	std	Y+2, r23	; 0x02
    16bc:	8b 83       	std	Y+3, r24	; 0x03

	if(BUZZ_Config.Active_State == ACTIVE_HIGH ){
    16be:	8b 81       	ldd	r24, Y+3	; 0x03
    16c0:	81 30       	cpi	r24, 0x01	; 1
    16c2:	39 f4       	brne	.+14     	; 0x16d2 <BUZZ_voidOff+0x26>

		DIO_VoidSetPinValue(BUZZ_Config.Port ,BUZZ_Config.Pin ,DIO_PIN_LOW);
    16c4:	89 81       	ldd	r24, Y+1	; 0x01
    16c6:	9a 81       	ldd	r25, Y+2	; 0x02
    16c8:	69 2f       	mov	r22, r25
    16ca:	40 e0       	ldi	r20, 0x00	; 0
    16cc:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_VoidSetPinValue>
    16d0:	09 c0       	rjmp	.+18     	; 0x16e4 <BUZZ_voidOff+0x38>

	}else if(BUZZ_Config.Active_State == ACTIVE_LOW ){
    16d2:	8b 81       	ldd	r24, Y+3	; 0x03
    16d4:	88 23       	and	r24, r24
    16d6:	31 f4       	brne	.+12     	; 0x16e4 <BUZZ_voidOff+0x38>

		DIO_VoidSetPinValue(BUZZ_Config.Port ,BUZZ_Config.Pin ,DIO_PIN_HIGH);
    16d8:	89 81       	ldd	r24, Y+1	; 0x01
    16da:	9a 81       	ldd	r25, Y+2	; 0x02
    16dc:	69 2f       	mov	r22, r25
    16de:	41 e0       	ldi	r20, 0x01	; 1
    16e0:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_VoidSetPinValue>

	}

}
    16e4:	0f 90       	pop	r0
    16e6:	0f 90       	pop	r0
    16e8:	0f 90       	pop	r0
    16ea:	cf 91       	pop	r28
    16ec:	df 91       	pop	r29
    16ee:	08 95       	ret

000016f0 <BUZZ_voidToggle>:

void BUZZ_voidToggle( BUZZ_Type BUZZ_Config)
{
    16f0:	df 93       	push	r29
    16f2:	cf 93       	push	r28
    16f4:	00 d0       	rcall	.+0      	; 0x16f6 <BUZZ_voidToggle+0x6>
    16f6:	0f 92       	push	r0
    16f8:	cd b7       	in	r28, 0x3d	; 61
    16fa:	de b7       	in	r29, 0x3e	; 62
    16fc:	69 83       	std	Y+1, r22	; 0x01
    16fe:	7a 83       	std	Y+2, r23	; 0x02
    1700:	8b 83       	std	Y+3, r24	; 0x03
	DIO_VoidTogglePinValue( BUZZ_Config.Port , BUZZ_Config.Pin );
    1702:	89 81       	ldd	r24, Y+1	; 0x01
    1704:	9a 81       	ldd	r25, Y+2	; 0x02
    1706:	69 2f       	mov	r22, r25
    1708:	0e 94 e7 08 	call	0x11ce	; 0x11ce <DIO_VoidTogglePinValue>
}
    170c:	0f 90       	pop	r0
    170e:	0f 90       	pop	r0
    1710:	0f 90       	pop	r0
    1712:	cf 91       	pop	r28
    1714:	df 91       	pop	r29
    1716:	08 95       	ret

00001718 <main>:
		{LED_PORTA,LED_PIN7,ACTIVE_HIGH},
};
SSD_Type SSD1  = {SSD_COMMON_CATHODE,SSD_PORTC,SSD_PORTC,SSD_PIN0};
BUZZ_Type Buzz1 = {BUZZ_PORTD,BUZZ_PIN0,ACTIVE_HIGH};
int main(void)
{
    1718:	0f 93       	push	r16
    171a:	1f 93       	push	r17
    171c:	df 93       	push	r29
    171e:	cf 93       	push	r28
    1720:	cd b7       	in	r28, 0x3d	; 61
    1722:	de b7       	in	r29, 0x3e	; 62
    1724:	c3 58       	subi	r28, 0x83	; 131
    1726:	d0 40       	sbci	r29, 0x00	; 0
    1728:	0f b6       	in	r0, 0x3f	; 63
    172a:	f8 94       	cli
    172c:	de bf       	out	0x3e, r29	; 62
    172e:	0f be       	out	0x3f, r0	; 63
    1730:	cd bf       	out	0x3d, r28	; 61
	for(u8 i=0;i<8;i++)
    1732:	fe 01       	movw	r30, r28
    1734:	e0 58       	subi	r30, 0x80	; 128
    1736:	ff 4f       	sbci	r31, 0xFF	; 255
    1738:	10 82       	st	Z, r1
    173a:	1c c0       	rjmp	.+56     	; 0x1774 <main+0x5c>
		{
			LED_voidInit(Leds[i]);
    173c:	fe 01       	movw	r30, r28
    173e:	e0 58       	subi	r30, 0x80	; 128
    1740:	ff 4f       	sbci	r31, 0xFF	; 255
    1742:	80 81       	ld	r24, Z
    1744:	28 2f       	mov	r18, r24
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	c9 01       	movw	r24, r18
    174a:	88 0f       	add	r24, r24
    174c:	99 1f       	adc	r25, r25
    174e:	82 0f       	add	r24, r18
    1750:	93 1f       	adc	r25, r19
    1752:	fc 01       	movw	r30, r24
    1754:	e6 58       	subi	r30, 0x86	; 134
    1756:	ff 4f       	sbci	r31, 0xFF	; 255
    1758:	60 81       	ld	r22, Z
    175a:	71 81       	ldd	r23, Z+1	; 0x01
    175c:	82 81       	ldd	r24, Z+2	; 0x02
    175e:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <LED_voidInit>
};
SSD_Type SSD1  = {SSD_COMMON_CATHODE,SSD_PORTC,SSD_PORTC,SSD_PIN0};
BUZZ_Type Buzz1 = {BUZZ_PORTD,BUZZ_PIN0,ACTIVE_HIGH};
int main(void)
{
	for(u8 i=0;i<8;i++)
    1762:	de 01       	movw	r26, r28
    1764:	a0 58       	subi	r26, 0x80	; 128
    1766:	bf 4f       	sbci	r27, 0xFF	; 255
    1768:	fe 01       	movw	r30, r28
    176a:	e0 58       	subi	r30, 0x80	; 128
    176c:	ff 4f       	sbci	r31, 0xFF	; 255
    176e:	80 81       	ld	r24, Z
    1770:	8f 5f       	subi	r24, 0xFF	; 255
    1772:	8c 93       	st	X, r24
    1774:	fe 01       	movw	r30, r28
    1776:	e0 58       	subi	r30, 0x80	; 128
    1778:	ff 4f       	sbci	r31, 0xFF	; 255
    177a:	80 81       	ld	r24, Z
    177c:	88 30       	cpi	r24, 0x08	; 8
    177e:	f0 f2       	brcs	.-68     	; 0x173c <main+0x24>
		{
			LED_voidInit(Leds[i]);
		}
	SSD_voidInitialDataPort  ( SSD1 );
    1780:	80 91 92 00 	lds	r24, 0x0092
    1784:	90 91 93 00 	lds	r25, 0x0093
    1788:	a0 91 94 00 	lds	r26, 0x0094
    178c:	b0 91 95 00 	lds	r27, 0x0095
    1790:	bc 01       	movw	r22, r24
    1792:	cd 01       	movw	r24, r26
    1794:	0e 94 9b 05 	call	0xb36	; 0xb36 <SSD_voidInitialDataPort>
	BUZZ_voidInit(Buzz1);
    1798:	60 91 96 00 	lds	r22, 0x0096
    179c:	70 91 97 00 	lds	r23, 0x0097
    17a0:	80 91 98 00 	lds	r24, 0x0098
    17a4:	0e 94 1f 0b 	call	0x163e	; 0x163e <BUZZ_voidInit>

	SSD_voidEnable( SSD1 );
    17a8:	80 91 92 00 	lds	r24, 0x0092
    17ac:	90 91 93 00 	lds	r25, 0x0093
    17b0:	a0 91 94 00 	lds	r26, 0x0094
    17b4:	b0 91 95 00 	lds	r27, 0x0095
    17b8:	bc 01       	movw	r22, r24
    17ba:	cd 01       	movw	r24, r26
    17bc:	0e 94 1a 06 	call	0xc34	; 0xc34 <SSD_voidEnable>

	u8 count=0;
    17c0:	fe 01       	movw	r30, r28
    17c2:	ef 57       	subi	r30, 0x7F	; 127
    17c4:	ff 4f       	sbci	r31, 0xFF	; 255
    17c6:	10 82       	st	Z, r1

	while(1){

		switch(count)
    17c8:	fe 01       	movw	r30, r28
    17ca:	ef 57       	subi	r30, 0x7F	; 127
    17cc:	ff 4f       	sbci	r31, 0xFF	; 255
    17ce:	80 81       	ld	r24, Z
    17d0:	28 2f       	mov	r18, r24
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	ce 57       	subi	r28, 0x7E	; 126
    17d6:	df 4f       	sbci	r29, 0xFF	; 255
    17d8:	39 83       	std	Y+1, r19	; 0x01
    17da:	28 83       	st	Y, r18
    17dc:	c2 58       	subi	r28, 0x82	; 130
    17de:	d0 40       	sbci	r29, 0x00	; 0
    17e0:	ce 57       	subi	r28, 0x7E	; 126
    17e2:	df 4f       	sbci	r29, 0xFF	; 255
    17e4:	88 81       	ld	r24, Y
    17e6:	99 81       	ldd	r25, Y+1	; 0x01
    17e8:	c2 58       	subi	r28, 0x82	; 130
    17ea:	d0 40       	sbci	r29, 0x00	; 0
    17ec:	84 30       	cpi	r24, 0x04	; 4
    17ee:	91 05       	cpc	r25, r1
    17f0:	09 f4       	brne	.+2      	; 0x17f4 <main+0xdc>
    17f2:	ad c3       	rjmp	.+1882   	; 0x1f4e <main+0x836>
    17f4:	ce 57       	subi	r28, 0x7E	; 126
    17f6:	df 4f       	sbci	r29, 0xFF	; 255
    17f8:	e8 81       	ld	r30, Y
    17fa:	f9 81       	ldd	r31, Y+1	; 0x01
    17fc:	c2 58       	subi	r28, 0x82	; 130
    17fe:	d0 40       	sbci	r29, 0x00	; 0
    1800:	e5 30       	cpi	r30, 0x05	; 5
    1802:	f1 05       	cpc	r31, r1
    1804:	94 f5       	brge	.+100    	; 0x186a <main+0x152>
    1806:	ce 57       	subi	r28, 0x7E	; 126
    1808:	df 4f       	sbci	r29, 0xFF	; 255
    180a:	28 81       	ld	r18, Y
    180c:	39 81       	ldd	r19, Y+1	; 0x01
    180e:	c2 58       	subi	r28, 0x82	; 130
    1810:	d0 40       	sbci	r29, 0x00	; 0
    1812:	21 30       	cpi	r18, 0x01	; 1
    1814:	31 05       	cpc	r19, r1
    1816:	09 f4       	brne	.+2      	; 0x181a <main+0x102>
    1818:	24 c1       	rjmp	.+584    	; 0x1a62 <main+0x34a>
    181a:	ce 57       	subi	r28, 0x7E	; 126
    181c:	df 4f       	sbci	r29, 0xFF	; 255
    181e:	88 81       	ld	r24, Y
    1820:	99 81       	ldd	r25, Y+1	; 0x01
    1822:	c2 58       	subi	r28, 0x82	; 130
    1824:	d0 40       	sbci	r29, 0x00	; 0
    1826:	82 30       	cpi	r24, 0x02	; 2
    1828:	91 05       	cpc	r25, r1
    182a:	54 f4       	brge	.+20     	; 0x1840 <main+0x128>
    182c:	ce 57       	subi	r28, 0x7E	; 126
    182e:	df 4f       	sbci	r29, 0xFF	; 255
    1830:	e8 81       	ld	r30, Y
    1832:	f9 81       	ldd	r31, Y+1	; 0x01
    1834:	c2 58       	subi	r28, 0x82	; 130
    1836:	d0 40       	sbci	r29, 0x00	; 0
    1838:	30 97       	sbiw	r30, 0x00	; 0
    183a:	09 f4       	brne	.+2      	; 0x183e <main+0x126>
    183c:	3f c0       	rjmp	.+126    	; 0x18bc <main+0x1a4>
    183e:	c4 cf       	rjmp	.-120    	; 0x17c8 <main+0xb0>
    1840:	ce 57       	subi	r28, 0x7E	; 126
    1842:	df 4f       	sbci	r29, 0xFF	; 255
    1844:	28 81       	ld	r18, Y
    1846:	39 81       	ldd	r19, Y+1	; 0x01
    1848:	c2 58       	subi	r28, 0x82	; 130
    184a:	d0 40       	sbci	r29, 0x00	; 0
    184c:	22 30       	cpi	r18, 0x02	; 2
    184e:	31 05       	cpc	r19, r1
    1850:	09 f4       	brne	.+2      	; 0x1854 <main+0x13c>
    1852:	d9 c1       	rjmp	.+946    	; 0x1c06 <main+0x4ee>
    1854:	ce 57       	subi	r28, 0x7E	; 126
    1856:	df 4f       	sbci	r29, 0xFF	; 255
    1858:	88 81       	ld	r24, Y
    185a:	99 81       	ldd	r25, Y+1	; 0x01
    185c:	c2 58       	subi	r28, 0x82	; 130
    185e:	d0 40       	sbci	r29, 0x00	; 0
    1860:	83 30       	cpi	r24, 0x03	; 3
    1862:	91 05       	cpc	r25, r1
    1864:	09 f4       	brne	.+2      	; 0x1868 <main+0x150>
    1866:	a1 c2       	rjmp	.+1346   	; 0x1daa <main+0x692>
    1868:	af cf       	rjmp	.-162    	; 0x17c8 <main+0xb0>
    186a:	ce 57       	subi	r28, 0x7E	; 126
    186c:	df 4f       	sbci	r29, 0xFF	; 255
    186e:	e8 81       	ld	r30, Y
    1870:	f9 81       	ldd	r31, Y+1	; 0x01
    1872:	c2 58       	subi	r28, 0x82	; 130
    1874:	d0 40       	sbci	r29, 0x00	; 0
    1876:	e6 30       	cpi	r30, 0x06	; 6
    1878:	f1 05       	cpc	r31, r1
    187a:	09 f4       	brne	.+2      	; 0x187e <main+0x166>
    187c:	9d c4       	rjmp	.+2362   	; 0x21b8 <main+0xaa0>
    187e:	ce 57       	subi	r28, 0x7E	; 126
    1880:	df 4f       	sbci	r29, 0xFF	; 255
    1882:	28 81       	ld	r18, Y
    1884:	39 81       	ldd	r19, Y+1	; 0x01
    1886:	c2 58       	subi	r28, 0x82	; 130
    1888:	d0 40       	sbci	r29, 0x00	; 0
    188a:	26 30       	cpi	r18, 0x06	; 6
    188c:	31 05       	cpc	r19, r1
    188e:	0c f4       	brge	.+2      	; 0x1892 <main+0x17a>
    1890:	02 c4       	rjmp	.+2052   	; 0x2096 <main+0x97e>
    1892:	ce 57       	subi	r28, 0x7E	; 126
    1894:	df 4f       	sbci	r29, 0xFF	; 255
    1896:	88 81       	ld	r24, Y
    1898:	99 81       	ldd	r25, Y+1	; 0x01
    189a:	c2 58       	subi	r28, 0x82	; 130
    189c:	d0 40       	sbci	r29, 0x00	; 0
    189e:	87 30       	cpi	r24, 0x07	; 7
    18a0:	91 05       	cpc	r25, r1
    18a2:	09 f4       	brne	.+2      	; 0x18a6 <main+0x18e>
    18a4:	1a c5       	rjmp	.+2612   	; 0x22da <main+0xbc2>
    18a6:	ce 57       	subi	r28, 0x7E	; 126
    18a8:	df 4f       	sbci	r29, 0xFF	; 255
    18aa:	e8 81       	ld	r30, Y
    18ac:	f9 81       	ldd	r31, Y+1	; 0x01
    18ae:	c2 58       	subi	r28, 0x82	; 130
    18b0:	d0 40       	sbci	r29, 0x00	; 0
    18b2:	e8 30       	cpi	r30, 0x08	; 8
    18b4:	f1 05       	cpc	r31, r1
    18b6:	09 f4       	brne	.+2      	; 0x18ba <main+0x1a2>
    18b8:	a1 c5       	rjmp	.+2882   	; 0x23fc <main+0xce4>
    18ba:	86 cf       	rjmp	.-244    	; 0x17c8 <main+0xb0>
		{
		case 0:
			BUZZ_voidOff(Buzz1);
    18bc:	60 91 96 00 	lds	r22, 0x0096
    18c0:	70 91 97 00 	lds	r23, 0x0097
    18c4:	80 91 98 00 	lds	r24, 0x0098
    18c8:	0e 94 56 0b 	call	0x16ac	; 0x16ac <BUZZ_voidOff>
			SSD_voidSendNumber(SSD1,0);
    18cc:	80 91 92 00 	lds	r24, 0x0092
    18d0:	90 91 93 00 	lds	r25, 0x0093
    18d4:	a0 91 94 00 	lds	r26, 0x0094
    18d8:	b0 91 95 00 	lds	r27, 0x0095
    18dc:	bc 01       	movw	r22, r24
    18de:	cd 01       	movw	r24, r26
    18e0:	40 e0       	ldi	r20, 0x00	; 0
    18e2:	0e 94 b0 05 	call	0xb60	; 0xb60 <SSD_voidSendNumber>
			count++;
    18e6:	de 01       	movw	r26, r28
    18e8:	af 57       	subi	r26, 0x7F	; 127
    18ea:	bf 4f       	sbci	r27, 0xFF	; 255
    18ec:	fe 01       	movw	r30, r28
    18ee:	ef 57       	subi	r30, 0x7F	; 127
    18f0:	ff 4f       	sbci	r31, 0xFF	; 255
    18f2:	80 81       	ld	r24, Z
    18f4:	8f 5f       	subi	r24, 0xFF	; 255
    18f6:	8c 93       	st	X, r24
    18f8:	fe 01       	movw	r30, r28
    18fa:	e5 58       	subi	r30, 0x85	; 133
    18fc:	ff 4f       	sbci	r31, 0xFF	; 255
    18fe:	80 e0       	ldi	r24, 0x00	; 0
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	a8 ec       	ldi	r26, 0xC8	; 200
    1904:	b2 e4       	ldi	r27, 0x42	; 66
    1906:	80 83       	st	Z, r24
    1908:	91 83       	std	Z+1, r25	; 0x01
    190a:	a2 83       	std	Z+2, r26	; 0x02
    190c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    190e:	8e 01       	movw	r16, r28
    1910:	09 58       	subi	r16, 0x89	; 137
    1912:	1f 4f       	sbci	r17, 0xFF	; 255
    1914:	fe 01       	movw	r30, r28
    1916:	e5 58       	subi	r30, 0x85	; 133
    1918:	ff 4f       	sbci	r31, 0xFF	; 255
    191a:	60 81       	ld	r22, Z
    191c:	71 81       	ldd	r23, Z+1	; 0x01
    191e:	82 81       	ldd	r24, Z+2	; 0x02
    1920:	93 81       	ldd	r25, Z+3	; 0x03
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	4a ef       	ldi	r20, 0xFA	; 250
    1928:	54 e4       	ldi	r21, 0x44	; 68
    192a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    192e:	dc 01       	movw	r26, r24
    1930:	cb 01       	movw	r24, r22
    1932:	f8 01       	movw	r30, r16
    1934:	80 83       	st	Z, r24
    1936:	91 83       	std	Z+1, r25	; 0x01
    1938:	a2 83       	std	Z+2, r26	; 0x02
    193a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    193c:	fe 01       	movw	r30, r28
    193e:	e9 58       	subi	r30, 0x89	; 137
    1940:	ff 4f       	sbci	r31, 0xFF	; 255
    1942:	60 81       	ld	r22, Z
    1944:	71 81       	ldd	r23, Z+1	; 0x01
    1946:	82 81       	ldd	r24, Z+2	; 0x02
    1948:	93 81       	ldd	r25, Z+3	; 0x03
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	40 e8       	ldi	r20, 0x80	; 128
    1950:	5f e3       	ldi	r21, 0x3F	; 63
    1952:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1956:	88 23       	and	r24, r24
    1958:	44 f4       	brge	.+16     	; 0x196a <main+0x252>
		__ticks = 1;
    195a:	fe 01       	movw	r30, r28
    195c:	eb 58       	subi	r30, 0x8B	; 139
    195e:	ff 4f       	sbci	r31, 0xFF	; 255
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	91 83       	std	Z+1, r25	; 0x01
    1966:	80 83       	st	Z, r24
    1968:	64 c0       	rjmp	.+200    	; 0x1a32 <main+0x31a>
	else if (__tmp > 65535)
    196a:	fe 01       	movw	r30, r28
    196c:	e9 58       	subi	r30, 0x89	; 137
    196e:	ff 4f       	sbci	r31, 0xFF	; 255
    1970:	60 81       	ld	r22, Z
    1972:	71 81       	ldd	r23, Z+1	; 0x01
    1974:	82 81       	ldd	r24, Z+2	; 0x02
    1976:	93 81       	ldd	r25, Z+3	; 0x03
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	3f ef       	ldi	r19, 0xFF	; 255
    197c:	4f e7       	ldi	r20, 0x7F	; 127
    197e:	57 e4       	ldi	r21, 0x47	; 71
    1980:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1984:	18 16       	cp	r1, r24
    1986:	0c f0       	brlt	.+2      	; 0x198a <main+0x272>
    1988:	43 c0       	rjmp	.+134    	; 0x1a10 <main+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    198a:	fe 01       	movw	r30, r28
    198c:	e5 58       	subi	r30, 0x85	; 133
    198e:	ff 4f       	sbci	r31, 0xFF	; 255
    1990:	60 81       	ld	r22, Z
    1992:	71 81       	ldd	r23, Z+1	; 0x01
    1994:	82 81       	ldd	r24, Z+2	; 0x02
    1996:	93 81       	ldd	r25, Z+3	; 0x03
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	40 e2       	ldi	r20, 0x20	; 32
    199e:	51 e4       	ldi	r21, 0x41	; 65
    19a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19a4:	dc 01       	movw	r26, r24
    19a6:	cb 01       	movw	r24, r22
    19a8:	8e 01       	movw	r16, r28
    19aa:	0b 58       	subi	r16, 0x8B	; 139
    19ac:	1f 4f       	sbci	r17, 0xFF	; 255
    19ae:	bc 01       	movw	r22, r24
    19b0:	cd 01       	movw	r24, r26
    19b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19b6:	dc 01       	movw	r26, r24
    19b8:	cb 01       	movw	r24, r22
    19ba:	f8 01       	movw	r30, r16
    19bc:	91 83       	std	Z+1, r25	; 0x01
    19be:	80 83       	st	Z, r24
    19c0:	1f c0       	rjmp	.+62     	; 0x1a00 <main+0x2e8>
    19c2:	fe 01       	movw	r30, r28
    19c4:	ed 58       	subi	r30, 0x8D	; 141
    19c6:	ff 4f       	sbci	r31, 0xFF	; 255
    19c8:	88 ec       	ldi	r24, 0xC8	; 200
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	91 83       	std	Z+1, r25	; 0x01
    19ce:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19d0:	fe 01       	movw	r30, r28
    19d2:	ed 58       	subi	r30, 0x8D	; 141
    19d4:	ff 4f       	sbci	r31, 0xFF	; 255
    19d6:	80 81       	ld	r24, Z
    19d8:	91 81       	ldd	r25, Z+1	; 0x01
    19da:	01 97       	sbiw	r24, 0x01	; 1
    19dc:	f1 f7       	brne	.-4      	; 0x19da <main+0x2c2>
    19de:	fe 01       	movw	r30, r28
    19e0:	ed 58       	subi	r30, 0x8D	; 141
    19e2:	ff 4f       	sbci	r31, 0xFF	; 255
    19e4:	91 83       	std	Z+1, r25	; 0x01
    19e6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e8:	de 01       	movw	r26, r28
    19ea:	ab 58       	subi	r26, 0x8B	; 139
    19ec:	bf 4f       	sbci	r27, 0xFF	; 255
    19ee:	fe 01       	movw	r30, r28
    19f0:	eb 58       	subi	r30, 0x8B	; 139
    19f2:	ff 4f       	sbci	r31, 0xFF	; 255
    19f4:	80 81       	ld	r24, Z
    19f6:	91 81       	ldd	r25, Z+1	; 0x01
    19f8:	01 97       	sbiw	r24, 0x01	; 1
    19fa:	11 96       	adiw	r26, 0x01	; 1
    19fc:	9c 93       	st	X, r25
    19fe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a00:	fe 01       	movw	r30, r28
    1a02:	eb 58       	subi	r30, 0x8B	; 139
    1a04:	ff 4f       	sbci	r31, 0xFF	; 255
    1a06:	80 81       	ld	r24, Z
    1a08:	91 81       	ldd	r25, Z+1	; 0x01
    1a0a:	00 97       	sbiw	r24, 0x00	; 0
    1a0c:	d1 f6       	brne	.-76     	; 0x19c2 <main+0x2aa>
    1a0e:	dc ce       	rjmp	.-584    	; 0x17c8 <main+0xb0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a10:	8e 01       	movw	r16, r28
    1a12:	0b 58       	subi	r16, 0x8B	; 139
    1a14:	1f 4f       	sbci	r17, 0xFF	; 255
    1a16:	fe 01       	movw	r30, r28
    1a18:	e9 58       	subi	r30, 0x89	; 137
    1a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1c:	60 81       	ld	r22, Z
    1a1e:	71 81       	ldd	r23, Z+1	; 0x01
    1a20:	82 81       	ldd	r24, Z+2	; 0x02
    1a22:	93 81       	ldd	r25, Z+3	; 0x03
    1a24:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a28:	dc 01       	movw	r26, r24
    1a2a:	cb 01       	movw	r24, r22
    1a2c:	f8 01       	movw	r30, r16
    1a2e:	91 83       	std	Z+1, r25	; 0x01
    1a30:	80 83       	st	Z, r24
    1a32:	de 01       	movw	r26, r28
    1a34:	af 58       	subi	r26, 0x8F	; 143
    1a36:	bf 4f       	sbci	r27, 0xFF	; 255
    1a38:	fe 01       	movw	r30, r28
    1a3a:	eb 58       	subi	r30, 0x8B	; 139
    1a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3e:	80 81       	ld	r24, Z
    1a40:	91 81       	ldd	r25, Z+1	; 0x01
    1a42:	11 96       	adiw	r26, 0x01	; 1
    1a44:	9c 93       	st	X, r25
    1a46:	8e 93       	st	-X, r24
    1a48:	fe 01       	movw	r30, r28
    1a4a:	ef 58       	subi	r30, 0x8F	; 143
    1a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4e:	80 81       	ld	r24, Z
    1a50:	91 81       	ldd	r25, Z+1	; 0x01
    1a52:	01 97       	sbiw	r24, 0x01	; 1
    1a54:	f1 f7       	brne	.-4      	; 0x1a52 <main+0x33a>
    1a56:	fe 01       	movw	r30, r28
    1a58:	ef 58       	subi	r30, 0x8F	; 143
    1a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5c:	91 83       	std	Z+1, r25	; 0x01
    1a5e:	80 83       	st	Z, r24
    1a60:	b3 ce       	rjmp	.-666    	; 0x17c8 <main+0xb0>
			_delay_ms(100);
			break;

		case 1:
			SSD_voidSendNumber(SSD1,1);
    1a62:	80 91 92 00 	lds	r24, 0x0092
    1a66:	90 91 93 00 	lds	r25, 0x0093
    1a6a:	a0 91 94 00 	lds	r26, 0x0094
    1a6e:	b0 91 95 00 	lds	r27, 0x0095
    1a72:	bc 01       	movw	r22, r24
    1a74:	cd 01       	movw	r24, r26
    1a76:	41 e0       	ldi	r20, 0x01	; 1
    1a78:	0e 94 b0 05 	call	0xb60	; 0xb60 <SSD_voidSendNumber>
			LED_voidOn(Leds[0]);
    1a7c:	60 91 7a 00 	lds	r22, 0x007A
    1a80:	70 91 7b 00 	lds	r23, 0x007B
    1a84:	80 91 7c 00 	lds	r24, 0x007C
    1a88:	0e 94 8f 06 	call	0xd1e	; 0xd1e <LED_voidOn>
    1a8c:	fe 01       	movw	r30, r28
    1a8e:	e3 59       	subi	r30, 0x93	; 147
    1a90:	ff 4f       	sbci	r31, 0xFF	; 255
    1a92:	80 e0       	ldi	r24, 0x00	; 0
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	a8 ec       	ldi	r26, 0xC8	; 200
    1a98:	b2 e4       	ldi	r27, 0x42	; 66
    1a9a:	80 83       	st	Z, r24
    1a9c:	91 83       	std	Z+1, r25	; 0x01
    1a9e:	a2 83       	std	Z+2, r26	; 0x02
    1aa0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa2:	8e 01       	movw	r16, r28
    1aa4:	07 59       	subi	r16, 0x97	; 151
    1aa6:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa8:	fe 01       	movw	r30, r28
    1aaa:	e3 59       	subi	r30, 0x93	; 147
    1aac:	ff 4f       	sbci	r31, 0xFF	; 255
    1aae:	60 81       	ld	r22, Z
    1ab0:	71 81       	ldd	r23, Z+1	; 0x01
    1ab2:	82 81       	ldd	r24, Z+2	; 0x02
    1ab4:	93 81       	ldd	r25, Z+3	; 0x03
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	4a ef       	ldi	r20, 0xFA	; 250
    1abc:	54 e4       	ldi	r21, 0x44	; 68
    1abe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	f8 01       	movw	r30, r16
    1ac8:	80 83       	st	Z, r24
    1aca:	91 83       	std	Z+1, r25	; 0x01
    1acc:	a2 83       	std	Z+2, r26	; 0x02
    1ace:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ad0:	fe 01       	movw	r30, r28
    1ad2:	e7 59       	subi	r30, 0x97	; 151
    1ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad6:	60 81       	ld	r22, Z
    1ad8:	71 81       	ldd	r23, Z+1	; 0x01
    1ada:	82 81       	ldd	r24, Z+2	; 0x02
    1adc:	93 81       	ldd	r25, Z+3	; 0x03
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	40 e8       	ldi	r20, 0x80	; 128
    1ae4:	5f e3       	ldi	r21, 0x3F	; 63
    1ae6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1aea:	88 23       	and	r24, r24
    1aec:	44 f4       	brge	.+16     	; 0x1afe <main+0x3e6>
		__ticks = 1;
    1aee:	fe 01       	movw	r30, r28
    1af0:	e9 59       	subi	r30, 0x99	; 153
    1af2:	ff 4f       	sbci	r31, 0xFF	; 255
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	91 83       	std	Z+1, r25	; 0x01
    1afa:	80 83       	st	Z, r24
    1afc:	64 c0       	rjmp	.+200    	; 0x1bc6 <main+0x4ae>
	else if (__tmp > 65535)
    1afe:	fe 01       	movw	r30, r28
    1b00:	e7 59       	subi	r30, 0x97	; 151
    1b02:	ff 4f       	sbci	r31, 0xFF	; 255
    1b04:	60 81       	ld	r22, Z
    1b06:	71 81       	ldd	r23, Z+1	; 0x01
    1b08:	82 81       	ldd	r24, Z+2	; 0x02
    1b0a:	93 81       	ldd	r25, Z+3	; 0x03
    1b0c:	20 e0       	ldi	r18, 0x00	; 0
    1b0e:	3f ef       	ldi	r19, 0xFF	; 255
    1b10:	4f e7       	ldi	r20, 0x7F	; 127
    1b12:	57 e4       	ldi	r21, 0x47	; 71
    1b14:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b18:	18 16       	cp	r1, r24
    1b1a:	0c f0       	brlt	.+2      	; 0x1b1e <main+0x406>
    1b1c:	43 c0       	rjmp	.+134    	; 0x1ba4 <main+0x48c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b1e:	fe 01       	movw	r30, r28
    1b20:	e3 59       	subi	r30, 0x93	; 147
    1b22:	ff 4f       	sbci	r31, 0xFF	; 255
    1b24:	60 81       	ld	r22, Z
    1b26:	71 81       	ldd	r23, Z+1	; 0x01
    1b28:	82 81       	ldd	r24, Z+2	; 0x02
    1b2a:	93 81       	ldd	r25, Z+3	; 0x03
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	40 e2       	ldi	r20, 0x20	; 32
    1b32:	51 e4       	ldi	r21, 0x41	; 65
    1b34:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b38:	dc 01       	movw	r26, r24
    1b3a:	cb 01       	movw	r24, r22
    1b3c:	8e 01       	movw	r16, r28
    1b3e:	09 59       	subi	r16, 0x99	; 153
    1b40:	1f 4f       	sbci	r17, 0xFF	; 255
    1b42:	bc 01       	movw	r22, r24
    1b44:	cd 01       	movw	r24, r26
    1b46:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	f8 01       	movw	r30, r16
    1b50:	91 83       	std	Z+1, r25	; 0x01
    1b52:	80 83       	st	Z, r24
    1b54:	1f c0       	rjmp	.+62     	; 0x1b94 <main+0x47c>
    1b56:	fe 01       	movw	r30, r28
    1b58:	eb 59       	subi	r30, 0x9B	; 155
    1b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5c:	88 ec       	ldi	r24, 0xC8	; 200
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	91 83       	std	Z+1, r25	; 0x01
    1b62:	80 83       	st	Z, r24
    1b64:	fe 01       	movw	r30, r28
    1b66:	eb 59       	subi	r30, 0x9B	; 155
    1b68:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6a:	80 81       	ld	r24, Z
    1b6c:	91 81       	ldd	r25, Z+1	; 0x01
    1b6e:	01 97       	sbiw	r24, 0x01	; 1
    1b70:	f1 f7       	brne	.-4      	; 0x1b6e <main+0x456>
    1b72:	fe 01       	movw	r30, r28
    1b74:	eb 59       	subi	r30, 0x9B	; 155
    1b76:	ff 4f       	sbci	r31, 0xFF	; 255
    1b78:	91 83       	std	Z+1, r25	; 0x01
    1b7a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b7c:	de 01       	movw	r26, r28
    1b7e:	a9 59       	subi	r26, 0x99	; 153
    1b80:	bf 4f       	sbci	r27, 0xFF	; 255
    1b82:	fe 01       	movw	r30, r28
    1b84:	e9 59       	subi	r30, 0x99	; 153
    1b86:	ff 4f       	sbci	r31, 0xFF	; 255
    1b88:	80 81       	ld	r24, Z
    1b8a:	91 81       	ldd	r25, Z+1	; 0x01
    1b8c:	01 97       	sbiw	r24, 0x01	; 1
    1b8e:	11 96       	adiw	r26, 0x01	; 1
    1b90:	9c 93       	st	X, r25
    1b92:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b94:	fe 01       	movw	r30, r28
    1b96:	e9 59       	subi	r30, 0x99	; 153
    1b98:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9a:	80 81       	ld	r24, Z
    1b9c:	91 81       	ldd	r25, Z+1	; 0x01
    1b9e:	00 97       	sbiw	r24, 0x00	; 0
    1ba0:	d1 f6       	brne	.-76     	; 0x1b56 <main+0x43e>
    1ba2:	27 c0       	rjmp	.+78     	; 0x1bf2 <main+0x4da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba4:	8e 01       	movw	r16, r28
    1ba6:	09 59       	subi	r16, 0x99	; 153
    1ba8:	1f 4f       	sbci	r17, 0xFF	; 255
    1baa:	fe 01       	movw	r30, r28
    1bac:	e7 59       	subi	r30, 0x97	; 151
    1bae:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb0:	60 81       	ld	r22, Z
    1bb2:	71 81       	ldd	r23, Z+1	; 0x01
    1bb4:	82 81       	ldd	r24, Z+2	; 0x02
    1bb6:	93 81       	ldd	r25, Z+3	; 0x03
    1bb8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bbc:	dc 01       	movw	r26, r24
    1bbe:	cb 01       	movw	r24, r22
    1bc0:	f8 01       	movw	r30, r16
    1bc2:	91 83       	std	Z+1, r25	; 0x01
    1bc4:	80 83       	st	Z, r24
    1bc6:	de 01       	movw	r26, r28
    1bc8:	ad 59       	subi	r26, 0x9D	; 157
    1bca:	bf 4f       	sbci	r27, 0xFF	; 255
    1bcc:	fe 01       	movw	r30, r28
    1bce:	e9 59       	subi	r30, 0x99	; 153
    1bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd2:	80 81       	ld	r24, Z
    1bd4:	91 81       	ldd	r25, Z+1	; 0x01
    1bd6:	8d 93       	st	X+, r24
    1bd8:	9c 93       	st	X, r25
    1bda:	fe 01       	movw	r30, r28
    1bdc:	ed 59       	subi	r30, 0x9D	; 157
    1bde:	ff 4f       	sbci	r31, 0xFF	; 255
    1be0:	80 81       	ld	r24, Z
    1be2:	91 81       	ldd	r25, Z+1	; 0x01
    1be4:	01 97       	sbiw	r24, 0x01	; 1
    1be6:	f1 f7       	brne	.-4      	; 0x1be4 <main+0x4cc>
    1be8:	fe 01       	movw	r30, r28
    1bea:	ed 59       	subi	r30, 0x9D	; 157
    1bec:	ff 4f       	sbci	r31, 0xFF	; 255
    1bee:	91 83       	std	Z+1, r25	; 0x01
    1bf0:	80 83       	st	Z, r24
			_delay_ms(100);
			count++;
    1bf2:	de 01       	movw	r26, r28
    1bf4:	af 57       	subi	r26, 0x7F	; 127
    1bf6:	bf 4f       	sbci	r27, 0xFF	; 255
    1bf8:	fe 01       	movw	r30, r28
    1bfa:	ef 57       	subi	r30, 0x7F	; 127
    1bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfe:	80 81       	ld	r24, Z
    1c00:	8f 5f       	subi	r24, 0xFF	; 255
    1c02:	8c 93       	st	X, r24
    1c04:	e1 cd       	rjmp	.-1086   	; 0x17c8 <main+0xb0>
			break;

		case 2:
			SSD_voidSendNumber(SSD1,2);
    1c06:	80 91 92 00 	lds	r24, 0x0092
    1c0a:	90 91 93 00 	lds	r25, 0x0093
    1c0e:	a0 91 94 00 	lds	r26, 0x0094
    1c12:	b0 91 95 00 	lds	r27, 0x0095
    1c16:	bc 01       	movw	r22, r24
    1c18:	cd 01       	movw	r24, r26
    1c1a:	42 e0       	ldi	r20, 0x02	; 2
    1c1c:	0e 94 b0 05 	call	0xb60	; 0xb60 <SSD_voidSendNumber>
			LED_voidOn(Leds[1]);
    1c20:	60 91 7d 00 	lds	r22, 0x007D
    1c24:	70 91 7e 00 	lds	r23, 0x007E
    1c28:	80 91 7f 00 	lds	r24, 0x007F
    1c2c:	0e 94 8f 06 	call	0xd1e	; 0xd1e <LED_voidOn>
    1c30:	fe 01       	movw	r30, r28
    1c32:	e1 5a       	subi	r30, 0xA1	; 161
    1c34:	ff 4f       	sbci	r31, 0xFF	; 255
    1c36:	80 e0       	ldi	r24, 0x00	; 0
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	a8 ec       	ldi	r26, 0xC8	; 200
    1c3c:	b2 e4       	ldi	r27, 0x42	; 66
    1c3e:	80 83       	st	Z, r24
    1c40:	91 83       	std	Z+1, r25	; 0x01
    1c42:	a2 83       	std	Z+2, r26	; 0x02
    1c44:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c46:	8e 01       	movw	r16, r28
    1c48:	05 5a       	subi	r16, 0xA5	; 165
    1c4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c4c:	fe 01       	movw	r30, r28
    1c4e:	e1 5a       	subi	r30, 0xA1	; 161
    1c50:	ff 4f       	sbci	r31, 0xFF	; 255
    1c52:	60 81       	ld	r22, Z
    1c54:	71 81       	ldd	r23, Z+1	; 0x01
    1c56:	82 81       	ldd	r24, Z+2	; 0x02
    1c58:	93 81       	ldd	r25, Z+3	; 0x03
    1c5a:	20 e0       	ldi	r18, 0x00	; 0
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	4a ef       	ldi	r20, 0xFA	; 250
    1c60:	54 e4       	ldi	r21, 0x44	; 68
    1c62:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	f8 01       	movw	r30, r16
    1c6c:	80 83       	st	Z, r24
    1c6e:	91 83       	std	Z+1, r25	; 0x01
    1c70:	a2 83       	std	Z+2, r26	; 0x02
    1c72:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c74:	fe 01       	movw	r30, r28
    1c76:	e5 5a       	subi	r30, 0xA5	; 165
    1c78:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7a:	60 81       	ld	r22, Z
    1c7c:	71 81       	ldd	r23, Z+1	; 0x01
    1c7e:	82 81       	ldd	r24, Z+2	; 0x02
    1c80:	93 81       	ldd	r25, Z+3	; 0x03
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	40 e8       	ldi	r20, 0x80	; 128
    1c88:	5f e3       	ldi	r21, 0x3F	; 63
    1c8a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c8e:	88 23       	and	r24, r24
    1c90:	44 f4       	brge	.+16     	; 0x1ca2 <main+0x58a>
		__ticks = 1;
    1c92:	fe 01       	movw	r30, r28
    1c94:	e7 5a       	subi	r30, 0xA7	; 167
    1c96:	ff 4f       	sbci	r31, 0xFF	; 255
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	91 83       	std	Z+1, r25	; 0x01
    1c9e:	80 83       	st	Z, r24
    1ca0:	64 c0       	rjmp	.+200    	; 0x1d6a <main+0x652>
	else if (__tmp > 65535)
    1ca2:	fe 01       	movw	r30, r28
    1ca4:	e5 5a       	subi	r30, 0xA5	; 165
    1ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca8:	60 81       	ld	r22, Z
    1caa:	71 81       	ldd	r23, Z+1	; 0x01
    1cac:	82 81       	ldd	r24, Z+2	; 0x02
    1cae:	93 81       	ldd	r25, Z+3	; 0x03
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	3f ef       	ldi	r19, 0xFF	; 255
    1cb4:	4f e7       	ldi	r20, 0x7F	; 127
    1cb6:	57 e4       	ldi	r21, 0x47	; 71
    1cb8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1cbc:	18 16       	cp	r1, r24
    1cbe:	0c f0       	brlt	.+2      	; 0x1cc2 <main+0x5aa>
    1cc0:	43 c0       	rjmp	.+134    	; 0x1d48 <main+0x630>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cc2:	fe 01       	movw	r30, r28
    1cc4:	e1 5a       	subi	r30, 0xA1	; 161
    1cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc8:	60 81       	ld	r22, Z
    1cca:	71 81       	ldd	r23, Z+1	; 0x01
    1ccc:	82 81       	ldd	r24, Z+2	; 0x02
    1cce:	93 81       	ldd	r25, Z+3	; 0x03
    1cd0:	20 e0       	ldi	r18, 0x00	; 0
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	40 e2       	ldi	r20, 0x20	; 32
    1cd6:	51 e4       	ldi	r21, 0x41	; 65
    1cd8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cdc:	dc 01       	movw	r26, r24
    1cde:	cb 01       	movw	r24, r22
    1ce0:	8e 01       	movw	r16, r28
    1ce2:	07 5a       	subi	r16, 0xA7	; 167
    1ce4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce6:	bc 01       	movw	r22, r24
    1ce8:	cd 01       	movw	r24, r26
    1cea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	f8 01       	movw	r30, r16
    1cf4:	91 83       	std	Z+1, r25	; 0x01
    1cf6:	80 83       	st	Z, r24
    1cf8:	1f c0       	rjmp	.+62     	; 0x1d38 <main+0x620>
    1cfa:	fe 01       	movw	r30, r28
    1cfc:	e9 5a       	subi	r30, 0xA9	; 169
    1cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1d00:	88 ec       	ldi	r24, 0xC8	; 200
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	91 83       	std	Z+1, r25	; 0x01
    1d06:	80 83       	st	Z, r24
    1d08:	fe 01       	movw	r30, r28
    1d0a:	e9 5a       	subi	r30, 0xA9	; 169
    1d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0e:	80 81       	ld	r24, Z
    1d10:	91 81       	ldd	r25, Z+1	; 0x01
    1d12:	01 97       	sbiw	r24, 0x01	; 1
    1d14:	f1 f7       	brne	.-4      	; 0x1d12 <main+0x5fa>
    1d16:	fe 01       	movw	r30, r28
    1d18:	e9 5a       	subi	r30, 0xA9	; 169
    1d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1c:	91 83       	std	Z+1, r25	; 0x01
    1d1e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d20:	de 01       	movw	r26, r28
    1d22:	a7 5a       	subi	r26, 0xA7	; 167
    1d24:	bf 4f       	sbci	r27, 0xFF	; 255
    1d26:	fe 01       	movw	r30, r28
    1d28:	e7 5a       	subi	r30, 0xA7	; 167
    1d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2c:	80 81       	ld	r24, Z
    1d2e:	91 81       	ldd	r25, Z+1	; 0x01
    1d30:	01 97       	sbiw	r24, 0x01	; 1
    1d32:	11 96       	adiw	r26, 0x01	; 1
    1d34:	9c 93       	st	X, r25
    1d36:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d38:	fe 01       	movw	r30, r28
    1d3a:	e7 5a       	subi	r30, 0xA7	; 167
    1d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3e:	80 81       	ld	r24, Z
    1d40:	91 81       	ldd	r25, Z+1	; 0x01
    1d42:	00 97       	sbiw	r24, 0x00	; 0
    1d44:	d1 f6       	brne	.-76     	; 0x1cfa <main+0x5e2>
    1d46:	27 c0       	rjmp	.+78     	; 0x1d96 <main+0x67e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d48:	8e 01       	movw	r16, r28
    1d4a:	07 5a       	subi	r16, 0xA7	; 167
    1d4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d4e:	fe 01       	movw	r30, r28
    1d50:	e5 5a       	subi	r30, 0xA5	; 165
    1d52:	ff 4f       	sbci	r31, 0xFF	; 255
    1d54:	60 81       	ld	r22, Z
    1d56:	71 81       	ldd	r23, Z+1	; 0x01
    1d58:	82 81       	ldd	r24, Z+2	; 0x02
    1d5a:	93 81       	ldd	r25, Z+3	; 0x03
    1d5c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d60:	dc 01       	movw	r26, r24
    1d62:	cb 01       	movw	r24, r22
    1d64:	f8 01       	movw	r30, r16
    1d66:	91 83       	std	Z+1, r25	; 0x01
    1d68:	80 83       	st	Z, r24
    1d6a:	de 01       	movw	r26, r28
    1d6c:	ab 5a       	subi	r26, 0xAB	; 171
    1d6e:	bf 4f       	sbci	r27, 0xFF	; 255
    1d70:	fe 01       	movw	r30, r28
    1d72:	e7 5a       	subi	r30, 0xA7	; 167
    1d74:	ff 4f       	sbci	r31, 0xFF	; 255
    1d76:	80 81       	ld	r24, Z
    1d78:	91 81       	ldd	r25, Z+1	; 0x01
    1d7a:	8d 93       	st	X+, r24
    1d7c:	9c 93       	st	X, r25
    1d7e:	fe 01       	movw	r30, r28
    1d80:	eb 5a       	subi	r30, 0xAB	; 171
    1d82:	ff 4f       	sbci	r31, 0xFF	; 255
    1d84:	80 81       	ld	r24, Z
    1d86:	91 81       	ldd	r25, Z+1	; 0x01
    1d88:	01 97       	sbiw	r24, 0x01	; 1
    1d8a:	f1 f7       	brne	.-4      	; 0x1d88 <main+0x670>
    1d8c:	fe 01       	movw	r30, r28
    1d8e:	eb 5a       	subi	r30, 0xAB	; 171
    1d90:	ff 4f       	sbci	r31, 0xFF	; 255
    1d92:	91 83       	std	Z+1, r25	; 0x01
    1d94:	80 83       	st	Z, r24
			_delay_ms(100);
			count++;
    1d96:	de 01       	movw	r26, r28
    1d98:	af 57       	subi	r26, 0x7F	; 127
    1d9a:	bf 4f       	sbci	r27, 0xFF	; 255
    1d9c:	fe 01       	movw	r30, r28
    1d9e:	ef 57       	subi	r30, 0x7F	; 127
    1da0:	ff 4f       	sbci	r31, 0xFF	; 255
    1da2:	80 81       	ld	r24, Z
    1da4:	8f 5f       	subi	r24, 0xFF	; 255
    1da6:	8c 93       	st	X, r24
    1da8:	0f cd       	rjmp	.-1506   	; 0x17c8 <main+0xb0>
			break;
		case 3:
			SSD_voidSendNumber(SSD1,3);
    1daa:	80 91 92 00 	lds	r24, 0x0092
    1dae:	90 91 93 00 	lds	r25, 0x0093
    1db2:	a0 91 94 00 	lds	r26, 0x0094
    1db6:	b0 91 95 00 	lds	r27, 0x0095
    1dba:	bc 01       	movw	r22, r24
    1dbc:	cd 01       	movw	r24, r26
    1dbe:	43 e0       	ldi	r20, 0x03	; 3
    1dc0:	0e 94 b0 05 	call	0xb60	; 0xb60 <SSD_voidSendNumber>
			LED_voidOn(Leds[2]);
    1dc4:	60 91 80 00 	lds	r22, 0x0080
    1dc8:	70 91 81 00 	lds	r23, 0x0081
    1dcc:	80 91 82 00 	lds	r24, 0x0082
    1dd0:	0e 94 8f 06 	call	0xd1e	; 0xd1e <LED_voidOn>
    1dd4:	fe 01       	movw	r30, r28
    1dd6:	ef 5a       	subi	r30, 0xAF	; 175
    1dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dda:	80 e0       	ldi	r24, 0x00	; 0
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	a8 ec       	ldi	r26, 0xC8	; 200
    1de0:	b2 e4       	ldi	r27, 0x42	; 66
    1de2:	80 83       	st	Z, r24
    1de4:	91 83       	std	Z+1, r25	; 0x01
    1de6:	a2 83       	std	Z+2, r26	; 0x02
    1de8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dea:	8e 01       	movw	r16, r28
    1dec:	03 5b       	subi	r16, 0xB3	; 179
    1dee:	1f 4f       	sbci	r17, 0xFF	; 255
    1df0:	fe 01       	movw	r30, r28
    1df2:	ef 5a       	subi	r30, 0xAF	; 175
    1df4:	ff 4f       	sbci	r31, 0xFF	; 255
    1df6:	60 81       	ld	r22, Z
    1df8:	71 81       	ldd	r23, Z+1	; 0x01
    1dfa:	82 81       	ldd	r24, Z+2	; 0x02
    1dfc:	93 81       	ldd	r25, Z+3	; 0x03
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	4a ef       	ldi	r20, 0xFA	; 250
    1e04:	54 e4       	ldi	r21, 0x44	; 68
    1e06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	f8 01       	movw	r30, r16
    1e10:	80 83       	st	Z, r24
    1e12:	91 83       	std	Z+1, r25	; 0x01
    1e14:	a2 83       	std	Z+2, r26	; 0x02
    1e16:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e18:	fe 01       	movw	r30, r28
    1e1a:	e3 5b       	subi	r30, 0xB3	; 179
    1e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1e:	60 81       	ld	r22, Z
    1e20:	71 81       	ldd	r23, Z+1	; 0x01
    1e22:	82 81       	ldd	r24, Z+2	; 0x02
    1e24:	93 81       	ldd	r25, Z+3	; 0x03
    1e26:	20 e0       	ldi	r18, 0x00	; 0
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	40 e8       	ldi	r20, 0x80	; 128
    1e2c:	5f e3       	ldi	r21, 0x3F	; 63
    1e2e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e32:	88 23       	and	r24, r24
    1e34:	44 f4       	brge	.+16     	; 0x1e46 <main+0x72e>
		__ticks = 1;
    1e36:	fe 01       	movw	r30, r28
    1e38:	e5 5b       	subi	r30, 0xB5	; 181
    1e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	91 83       	std	Z+1, r25	; 0x01
    1e42:	80 83       	st	Z, r24
    1e44:	64 c0       	rjmp	.+200    	; 0x1f0e <main+0x7f6>
	else if (__tmp > 65535)
    1e46:	fe 01       	movw	r30, r28
    1e48:	e3 5b       	subi	r30, 0xB3	; 179
    1e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4c:	60 81       	ld	r22, Z
    1e4e:	71 81       	ldd	r23, Z+1	; 0x01
    1e50:	82 81       	ldd	r24, Z+2	; 0x02
    1e52:	93 81       	ldd	r25, Z+3	; 0x03
    1e54:	20 e0       	ldi	r18, 0x00	; 0
    1e56:	3f ef       	ldi	r19, 0xFF	; 255
    1e58:	4f e7       	ldi	r20, 0x7F	; 127
    1e5a:	57 e4       	ldi	r21, 0x47	; 71
    1e5c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e60:	18 16       	cp	r1, r24
    1e62:	0c f0       	brlt	.+2      	; 0x1e66 <main+0x74e>
    1e64:	43 c0       	rjmp	.+134    	; 0x1eec <main+0x7d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e66:	fe 01       	movw	r30, r28
    1e68:	ef 5a       	subi	r30, 0xAF	; 175
    1e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6c:	60 81       	ld	r22, Z
    1e6e:	71 81       	ldd	r23, Z+1	; 0x01
    1e70:	82 81       	ldd	r24, Z+2	; 0x02
    1e72:	93 81       	ldd	r25, Z+3	; 0x03
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	40 e2       	ldi	r20, 0x20	; 32
    1e7a:	51 e4       	ldi	r21, 0x41	; 65
    1e7c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e80:	dc 01       	movw	r26, r24
    1e82:	cb 01       	movw	r24, r22
    1e84:	8e 01       	movw	r16, r28
    1e86:	05 5b       	subi	r16, 0xB5	; 181
    1e88:	1f 4f       	sbci	r17, 0xFF	; 255
    1e8a:	bc 01       	movw	r22, r24
    1e8c:	cd 01       	movw	r24, r26
    1e8e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e92:	dc 01       	movw	r26, r24
    1e94:	cb 01       	movw	r24, r22
    1e96:	f8 01       	movw	r30, r16
    1e98:	91 83       	std	Z+1, r25	; 0x01
    1e9a:	80 83       	st	Z, r24
    1e9c:	1f c0       	rjmp	.+62     	; 0x1edc <main+0x7c4>
    1e9e:	fe 01       	movw	r30, r28
    1ea0:	e7 5b       	subi	r30, 0xB7	; 183
    1ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea4:	88 ec       	ldi	r24, 0xC8	; 200
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	91 83       	std	Z+1, r25	; 0x01
    1eaa:	80 83       	st	Z, r24
    1eac:	fe 01       	movw	r30, r28
    1eae:	e7 5b       	subi	r30, 0xB7	; 183
    1eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb2:	80 81       	ld	r24, Z
    1eb4:	91 81       	ldd	r25, Z+1	; 0x01
    1eb6:	01 97       	sbiw	r24, 0x01	; 1
    1eb8:	f1 f7       	brne	.-4      	; 0x1eb6 <main+0x79e>
    1eba:	fe 01       	movw	r30, r28
    1ebc:	e7 5b       	subi	r30, 0xB7	; 183
    1ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec0:	91 83       	std	Z+1, r25	; 0x01
    1ec2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec4:	de 01       	movw	r26, r28
    1ec6:	a5 5b       	subi	r26, 0xB5	; 181
    1ec8:	bf 4f       	sbci	r27, 0xFF	; 255
    1eca:	fe 01       	movw	r30, r28
    1ecc:	e5 5b       	subi	r30, 0xB5	; 181
    1ece:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed0:	80 81       	ld	r24, Z
    1ed2:	91 81       	ldd	r25, Z+1	; 0x01
    1ed4:	01 97       	sbiw	r24, 0x01	; 1
    1ed6:	11 96       	adiw	r26, 0x01	; 1
    1ed8:	9c 93       	st	X, r25
    1eda:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1edc:	fe 01       	movw	r30, r28
    1ede:	e5 5b       	subi	r30, 0xB5	; 181
    1ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee2:	80 81       	ld	r24, Z
    1ee4:	91 81       	ldd	r25, Z+1	; 0x01
    1ee6:	00 97       	sbiw	r24, 0x00	; 0
    1ee8:	d1 f6       	brne	.-76     	; 0x1e9e <main+0x786>
    1eea:	27 c0       	rjmp	.+78     	; 0x1f3a <main+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eec:	8e 01       	movw	r16, r28
    1eee:	05 5b       	subi	r16, 0xB5	; 181
    1ef0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ef2:	fe 01       	movw	r30, r28
    1ef4:	e3 5b       	subi	r30, 0xB3	; 179
    1ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef8:	60 81       	ld	r22, Z
    1efa:	71 81       	ldd	r23, Z+1	; 0x01
    1efc:	82 81       	ldd	r24, Z+2	; 0x02
    1efe:	93 81       	ldd	r25, Z+3	; 0x03
    1f00:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	f8 01       	movw	r30, r16
    1f0a:	91 83       	std	Z+1, r25	; 0x01
    1f0c:	80 83       	st	Z, r24
    1f0e:	de 01       	movw	r26, r28
    1f10:	a9 5b       	subi	r26, 0xB9	; 185
    1f12:	bf 4f       	sbci	r27, 0xFF	; 255
    1f14:	fe 01       	movw	r30, r28
    1f16:	e5 5b       	subi	r30, 0xB5	; 181
    1f18:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1a:	80 81       	ld	r24, Z
    1f1c:	91 81       	ldd	r25, Z+1	; 0x01
    1f1e:	8d 93       	st	X+, r24
    1f20:	9c 93       	st	X, r25
    1f22:	fe 01       	movw	r30, r28
    1f24:	e9 5b       	subi	r30, 0xB9	; 185
    1f26:	ff 4f       	sbci	r31, 0xFF	; 255
    1f28:	80 81       	ld	r24, Z
    1f2a:	91 81       	ldd	r25, Z+1	; 0x01
    1f2c:	01 97       	sbiw	r24, 0x01	; 1
    1f2e:	f1 f7       	brne	.-4      	; 0x1f2c <main+0x814>
    1f30:	fe 01       	movw	r30, r28
    1f32:	e9 5b       	subi	r30, 0xB9	; 185
    1f34:	ff 4f       	sbci	r31, 0xFF	; 255
    1f36:	91 83       	std	Z+1, r25	; 0x01
    1f38:	80 83       	st	Z, r24
			_delay_ms(100);
			count++;
    1f3a:	de 01       	movw	r26, r28
    1f3c:	af 57       	subi	r26, 0x7F	; 127
    1f3e:	bf 4f       	sbci	r27, 0xFF	; 255
    1f40:	fe 01       	movw	r30, r28
    1f42:	ef 57       	subi	r30, 0x7F	; 127
    1f44:	ff 4f       	sbci	r31, 0xFF	; 255
    1f46:	80 81       	ld	r24, Z
    1f48:	8f 5f       	subi	r24, 0xFF	; 255
    1f4a:	8c 93       	st	X, r24
    1f4c:	3d cc       	rjmp	.-1926   	; 0x17c8 <main+0xb0>
			break;
		case 4:
			SSD_voidSendNumber(SSD1,4);
    1f4e:	80 91 92 00 	lds	r24, 0x0092
    1f52:	90 91 93 00 	lds	r25, 0x0093
    1f56:	a0 91 94 00 	lds	r26, 0x0094
    1f5a:	b0 91 95 00 	lds	r27, 0x0095
    1f5e:	bc 01       	movw	r22, r24
    1f60:	cd 01       	movw	r24, r26
    1f62:	44 e0       	ldi	r20, 0x04	; 4
    1f64:	0e 94 b0 05 	call	0xb60	; 0xb60 <SSD_voidSendNumber>
			LED_voidOn(Leds[3]);
    1f68:	60 91 83 00 	lds	r22, 0x0083
    1f6c:	70 91 84 00 	lds	r23, 0x0084
    1f70:	80 91 85 00 	lds	r24, 0x0085
    1f74:	0e 94 8f 06 	call	0xd1e	; 0xd1e <LED_voidOn>
    1f78:	fe 01       	movw	r30, r28
    1f7a:	ed 5b       	subi	r30, 0xBD	; 189
    1f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7e:	80 e0       	ldi	r24, 0x00	; 0
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	a8 ec       	ldi	r26, 0xC8	; 200
    1f84:	b2 e4       	ldi	r27, 0x42	; 66
    1f86:	80 83       	st	Z, r24
    1f88:	91 83       	std	Z+1, r25	; 0x01
    1f8a:	a2 83       	std	Z+2, r26	; 0x02
    1f8c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f8e:	8e 01       	movw	r16, r28
    1f90:	01 5c       	subi	r16, 0xC1	; 193
    1f92:	1f 4f       	sbci	r17, 0xFF	; 255
    1f94:	fe 01       	movw	r30, r28
    1f96:	ed 5b       	subi	r30, 0xBD	; 189
    1f98:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9a:	60 81       	ld	r22, Z
    1f9c:	71 81       	ldd	r23, Z+1	; 0x01
    1f9e:	82 81       	ldd	r24, Z+2	; 0x02
    1fa0:	93 81       	ldd	r25, Z+3	; 0x03
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	4a ef       	ldi	r20, 0xFA	; 250
    1fa8:	54 e4       	ldi	r21, 0x44	; 68
    1faa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fae:	dc 01       	movw	r26, r24
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	f8 01       	movw	r30, r16
    1fb4:	80 83       	st	Z, r24
    1fb6:	91 83       	std	Z+1, r25	; 0x01
    1fb8:	a2 83       	std	Z+2, r26	; 0x02
    1fba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fbc:	fe 01       	movw	r30, r28
    1fbe:	ff 96       	adiw	r30, 0x3f	; 63
    1fc0:	60 81       	ld	r22, Z
    1fc2:	71 81       	ldd	r23, Z+1	; 0x01
    1fc4:	82 81       	ldd	r24, Z+2	; 0x02
    1fc6:	93 81       	ldd	r25, Z+3	; 0x03
    1fc8:	20 e0       	ldi	r18, 0x00	; 0
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	40 e8       	ldi	r20, 0x80	; 128
    1fce:	5f e3       	ldi	r21, 0x3F	; 63
    1fd0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1fd4:	88 23       	and	r24, r24
    1fd6:	2c f4       	brge	.+10     	; 0x1fe2 <main+0x8ca>
		__ticks = 1;
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	9e af       	std	Y+62, r25	; 0x3e
    1fde:	8d af       	std	Y+61, r24	; 0x3d
    1fe0:	46 c0       	rjmp	.+140    	; 0x206e <main+0x956>
	else if (__tmp > 65535)
    1fe2:	fe 01       	movw	r30, r28
    1fe4:	ff 96       	adiw	r30, 0x3f	; 63
    1fe6:	60 81       	ld	r22, Z
    1fe8:	71 81       	ldd	r23, Z+1	; 0x01
    1fea:	82 81       	ldd	r24, Z+2	; 0x02
    1fec:	93 81       	ldd	r25, Z+3	; 0x03
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	3f ef       	ldi	r19, 0xFF	; 255
    1ff2:	4f e7       	ldi	r20, 0x7F	; 127
    1ff4:	57 e4       	ldi	r21, 0x47	; 71
    1ff6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ffa:	18 16       	cp	r1, r24
    1ffc:	64 f5       	brge	.+88     	; 0x2056 <main+0x93e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ffe:	fe 01       	movw	r30, r28
    2000:	ed 5b       	subi	r30, 0xBD	; 189
    2002:	ff 4f       	sbci	r31, 0xFF	; 255
    2004:	60 81       	ld	r22, Z
    2006:	71 81       	ldd	r23, Z+1	; 0x01
    2008:	82 81       	ldd	r24, Z+2	; 0x02
    200a:	93 81       	ldd	r25, Z+3	; 0x03
    200c:	20 e0       	ldi	r18, 0x00	; 0
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	40 e2       	ldi	r20, 0x20	; 32
    2012:	51 e4       	ldi	r21, 0x41	; 65
    2014:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2018:	dc 01       	movw	r26, r24
    201a:	cb 01       	movw	r24, r22
    201c:	bc 01       	movw	r22, r24
    201e:	cd 01       	movw	r24, r26
    2020:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2024:	dc 01       	movw	r26, r24
    2026:	cb 01       	movw	r24, r22
    2028:	9e af       	std	Y+62, r25	; 0x3e
    202a:	8d af       	std	Y+61, r24	; 0x3d
    202c:	0f c0       	rjmp	.+30     	; 0x204c <main+0x934>
    202e:	88 ec       	ldi	r24, 0xC8	; 200
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	9c af       	std	Y+60, r25	; 0x3c
    2034:	8b af       	std	Y+59, r24	; 0x3b
    2036:	8b ad       	ldd	r24, Y+59	; 0x3b
    2038:	9c ad       	ldd	r25, Y+60	; 0x3c
    203a:	01 97       	sbiw	r24, 0x01	; 1
    203c:	f1 f7       	brne	.-4      	; 0x203a <main+0x922>
    203e:	9c af       	std	Y+60, r25	; 0x3c
    2040:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2042:	8d ad       	ldd	r24, Y+61	; 0x3d
    2044:	9e ad       	ldd	r25, Y+62	; 0x3e
    2046:	01 97       	sbiw	r24, 0x01	; 1
    2048:	9e af       	std	Y+62, r25	; 0x3e
    204a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    204c:	8d ad       	ldd	r24, Y+61	; 0x3d
    204e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2050:	00 97       	sbiw	r24, 0x00	; 0
    2052:	69 f7       	brne	.-38     	; 0x202e <main+0x916>
    2054:	16 c0       	rjmp	.+44     	; 0x2082 <main+0x96a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2056:	fe 01       	movw	r30, r28
    2058:	ff 96       	adiw	r30, 0x3f	; 63
    205a:	60 81       	ld	r22, Z
    205c:	71 81       	ldd	r23, Z+1	; 0x01
    205e:	82 81       	ldd	r24, Z+2	; 0x02
    2060:	93 81       	ldd	r25, Z+3	; 0x03
    2062:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	9e af       	std	Y+62, r25	; 0x3e
    206c:	8d af       	std	Y+61, r24	; 0x3d
    206e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2070:	9e ad       	ldd	r25, Y+62	; 0x3e
    2072:	9a af       	std	Y+58, r25	; 0x3a
    2074:	89 af       	std	Y+57, r24	; 0x39
    2076:	89 ad       	ldd	r24, Y+57	; 0x39
    2078:	9a ad       	ldd	r25, Y+58	; 0x3a
    207a:	01 97       	sbiw	r24, 0x01	; 1
    207c:	f1 f7       	brne	.-4      	; 0x207a <main+0x962>
    207e:	9a af       	std	Y+58, r25	; 0x3a
    2080:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(100);
			count++;
    2082:	de 01       	movw	r26, r28
    2084:	af 57       	subi	r26, 0x7F	; 127
    2086:	bf 4f       	sbci	r27, 0xFF	; 255
    2088:	fe 01       	movw	r30, r28
    208a:	ef 57       	subi	r30, 0x7F	; 127
    208c:	ff 4f       	sbci	r31, 0xFF	; 255
    208e:	80 81       	ld	r24, Z
    2090:	8f 5f       	subi	r24, 0xFF	; 255
    2092:	8c 93       	st	X, r24
    2094:	99 cb       	rjmp	.-2254   	; 0x17c8 <main+0xb0>
			break;
		case 5:
			SSD_voidSendNumber(SSD1,5);
    2096:	80 91 92 00 	lds	r24, 0x0092
    209a:	90 91 93 00 	lds	r25, 0x0093
    209e:	a0 91 94 00 	lds	r26, 0x0094
    20a2:	b0 91 95 00 	lds	r27, 0x0095
    20a6:	bc 01       	movw	r22, r24
    20a8:	cd 01       	movw	r24, r26
    20aa:	45 e0       	ldi	r20, 0x05	; 5
    20ac:	0e 94 b0 05 	call	0xb60	; 0xb60 <SSD_voidSendNumber>
			LED_voidOn(Leds[4]);
    20b0:	60 91 86 00 	lds	r22, 0x0086
    20b4:	70 91 87 00 	lds	r23, 0x0087
    20b8:	80 91 88 00 	lds	r24, 0x0088
    20bc:	0e 94 8f 06 	call	0xd1e	; 0xd1e <LED_voidOn>
			count++;
    20c0:	de 01       	movw	r26, r28
    20c2:	af 57       	subi	r26, 0x7F	; 127
    20c4:	bf 4f       	sbci	r27, 0xFF	; 255
    20c6:	fe 01       	movw	r30, r28
    20c8:	ef 57       	subi	r30, 0x7F	; 127
    20ca:	ff 4f       	sbci	r31, 0xFF	; 255
    20cc:	80 81       	ld	r24, Z
    20ce:	8f 5f       	subi	r24, 0xFF	; 255
    20d0:	8c 93       	st	X, r24
    20d2:	80 e0       	ldi	r24, 0x00	; 0
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	a8 ec       	ldi	r26, 0xC8	; 200
    20d8:	b2 e4       	ldi	r27, 0x42	; 66
    20da:	8d ab       	std	Y+53, r24	; 0x35
    20dc:	9e ab       	std	Y+54, r25	; 0x36
    20de:	af ab       	std	Y+55, r26	; 0x37
    20e0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20e2:	6d a9       	ldd	r22, Y+53	; 0x35
    20e4:	7e a9       	ldd	r23, Y+54	; 0x36
    20e6:	8f a9       	ldd	r24, Y+55	; 0x37
    20e8:	98 ad       	ldd	r25, Y+56	; 0x38
    20ea:	20 e0       	ldi	r18, 0x00	; 0
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	4a ef       	ldi	r20, 0xFA	; 250
    20f0:	54 e4       	ldi	r21, 0x44	; 68
    20f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	89 ab       	std	Y+49, r24	; 0x31
    20fc:	9a ab       	std	Y+50, r25	; 0x32
    20fe:	ab ab       	std	Y+51, r26	; 0x33
    2100:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2102:	69 a9       	ldd	r22, Y+49	; 0x31
    2104:	7a a9       	ldd	r23, Y+50	; 0x32
    2106:	8b a9       	ldd	r24, Y+51	; 0x33
    2108:	9c a9       	ldd	r25, Y+52	; 0x34
    210a:	20 e0       	ldi	r18, 0x00	; 0
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	40 e8       	ldi	r20, 0x80	; 128
    2110:	5f e3       	ldi	r21, 0x3F	; 63
    2112:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2116:	88 23       	and	r24, r24
    2118:	2c f4       	brge	.+10     	; 0x2124 <main+0xa0c>
		__ticks = 1;
    211a:	81 e0       	ldi	r24, 0x01	; 1
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	98 ab       	std	Y+48, r25	; 0x30
    2120:	8f a7       	std	Y+47, r24	; 0x2f
    2122:	3f c0       	rjmp	.+126    	; 0x21a2 <main+0xa8a>
	else if (__tmp > 65535)
    2124:	69 a9       	ldd	r22, Y+49	; 0x31
    2126:	7a a9       	ldd	r23, Y+50	; 0x32
    2128:	8b a9       	ldd	r24, Y+51	; 0x33
    212a:	9c a9       	ldd	r25, Y+52	; 0x34
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	3f ef       	ldi	r19, 0xFF	; 255
    2130:	4f e7       	ldi	r20, 0x7F	; 127
    2132:	57 e4       	ldi	r21, 0x47	; 71
    2134:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2138:	18 16       	cp	r1, r24
    213a:	4c f5       	brge	.+82     	; 0x218e <main+0xa76>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    213c:	6d a9       	ldd	r22, Y+53	; 0x35
    213e:	7e a9       	ldd	r23, Y+54	; 0x36
    2140:	8f a9       	ldd	r24, Y+55	; 0x37
    2142:	98 ad       	ldd	r25, Y+56	; 0x38
    2144:	20 e0       	ldi	r18, 0x00	; 0
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	40 e2       	ldi	r20, 0x20	; 32
    214a:	51 e4       	ldi	r21, 0x41	; 65
    214c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2150:	dc 01       	movw	r26, r24
    2152:	cb 01       	movw	r24, r22
    2154:	bc 01       	movw	r22, r24
    2156:	cd 01       	movw	r24, r26
    2158:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    215c:	dc 01       	movw	r26, r24
    215e:	cb 01       	movw	r24, r22
    2160:	98 ab       	std	Y+48, r25	; 0x30
    2162:	8f a7       	std	Y+47, r24	; 0x2f
    2164:	0f c0       	rjmp	.+30     	; 0x2184 <main+0xa6c>
    2166:	88 ec       	ldi	r24, 0xC8	; 200
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	9e a7       	std	Y+46, r25	; 0x2e
    216c:	8d a7       	std	Y+45, r24	; 0x2d
    216e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2170:	9e a5       	ldd	r25, Y+46	; 0x2e
    2172:	01 97       	sbiw	r24, 0x01	; 1
    2174:	f1 f7       	brne	.-4      	; 0x2172 <main+0xa5a>
    2176:	9e a7       	std	Y+46, r25	; 0x2e
    2178:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    217a:	8f a5       	ldd	r24, Y+47	; 0x2f
    217c:	98 a9       	ldd	r25, Y+48	; 0x30
    217e:	01 97       	sbiw	r24, 0x01	; 1
    2180:	98 ab       	std	Y+48, r25	; 0x30
    2182:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2184:	8f a5       	ldd	r24, Y+47	; 0x2f
    2186:	98 a9       	ldd	r25, Y+48	; 0x30
    2188:	00 97       	sbiw	r24, 0x00	; 0
    218a:	69 f7       	brne	.-38     	; 0x2166 <main+0xa4e>
    218c:	1d cb       	rjmp	.-2502   	; 0x17c8 <main+0xb0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    218e:	69 a9       	ldd	r22, Y+49	; 0x31
    2190:	7a a9       	ldd	r23, Y+50	; 0x32
    2192:	8b a9       	ldd	r24, Y+51	; 0x33
    2194:	9c a9       	ldd	r25, Y+52	; 0x34
    2196:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    219a:	dc 01       	movw	r26, r24
    219c:	cb 01       	movw	r24, r22
    219e:	98 ab       	std	Y+48, r25	; 0x30
    21a0:	8f a7       	std	Y+47, r24	; 0x2f
    21a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    21a4:	98 a9       	ldd	r25, Y+48	; 0x30
    21a6:	9c a7       	std	Y+44, r25	; 0x2c
    21a8:	8b a7       	std	Y+43, r24	; 0x2b
    21aa:	8b a5       	ldd	r24, Y+43	; 0x2b
    21ac:	9c a5       	ldd	r25, Y+44	; 0x2c
    21ae:	01 97       	sbiw	r24, 0x01	; 1
    21b0:	f1 f7       	brne	.-4      	; 0x21ae <main+0xa96>
    21b2:	9c a7       	std	Y+44, r25	; 0x2c
    21b4:	8b a7       	std	Y+43, r24	; 0x2b
    21b6:	08 cb       	rjmp	.-2544   	; 0x17c8 <main+0xb0>
			_delay_ms(100);
			break;

		case 6:
			SSD_voidSendNumber(SSD1,6);
    21b8:	80 91 92 00 	lds	r24, 0x0092
    21bc:	90 91 93 00 	lds	r25, 0x0093
    21c0:	a0 91 94 00 	lds	r26, 0x0094
    21c4:	b0 91 95 00 	lds	r27, 0x0095
    21c8:	bc 01       	movw	r22, r24
    21ca:	cd 01       	movw	r24, r26
    21cc:	46 e0       	ldi	r20, 0x06	; 6
    21ce:	0e 94 b0 05 	call	0xb60	; 0xb60 <SSD_voidSendNumber>
			LED_voidOn(Leds[5]);
    21d2:	60 91 89 00 	lds	r22, 0x0089
    21d6:	70 91 8a 00 	lds	r23, 0x008A
    21da:	80 91 8b 00 	lds	r24, 0x008B
    21de:	0e 94 8f 06 	call	0xd1e	; 0xd1e <LED_voidOn>
    21e2:	80 e0       	ldi	r24, 0x00	; 0
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	a8 ec       	ldi	r26, 0xC8	; 200
    21e8:	b2 e4       	ldi	r27, 0x42	; 66
    21ea:	8f a3       	std	Y+39, r24	; 0x27
    21ec:	98 a7       	std	Y+40, r25	; 0x28
    21ee:	a9 a7       	std	Y+41, r26	; 0x29
    21f0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21f2:	6f a1       	ldd	r22, Y+39	; 0x27
    21f4:	78 a5       	ldd	r23, Y+40	; 0x28
    21f6:	89 a5       	ldd	r24, Y+41	; 0x29
    21f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    21fa:	20 e0       	ldi	r18, 0x00	; 0
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	4a ef       	ldi	r20, 0xFA	; 250
    2200:	54 e4       	ldi	r21, 0x44	; 68
    2202:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2206:	dc 01       	movw	r26, r24
    2208:	cb 01       	movw	r24, r22
    220a:	8b a3       	std	Y+35, r24	; 0x23
    220c:	9c a3       	std	Y+36, r25	; 0x24
    220e:	ad a3       	std	Y+37, r26	; 0x25
    2210:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2212:	6b a1       	ldd	r22, Y+35	; 0x23
    2214:	7c a1       	ldd	r23, Y+36	; 0x24
    2216:	8d a1       	ldd	r24, Y+37	; 0x25
    2218:	9e a1       	ldd	r25, Y+38	; 0x26
    221a:	20 e0       	ldi	r18, 0x00	; 0
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	40 e8       	ldi	r20, 0x80	; 128
    2220:	5f e3       	ldi	r21, 0x3F	; 63
    2222:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2226:	88 23       	and	r24, r24
    2228:	2c f4       	brge	.+10     	; 0x2234 <main+0xb1c>
		__ticks = 1;
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	9a a3       	std	Y+34, r25	; 0x22
    2230:	89 a3       	std	Y+33, r24	; 0x21
    2232:	3f c0       	rjmp	.+126    	; 0x22b2 <main+0xb9a>
	else if (__tmp > 65535)
    2234:	6b a1       	ldd	r22, Y+35	; 0x23
    2236:	7c a1       	ldd	r23, Y+36	; 0x24
    2238:	8d a1       	ldd	r24, Y+37	; 0x25
    223a:	9e a1       	ldd	r25, Y+38	; 0x26
    223c:	20 e0       	ldi	r18, 0x00	; 0
    223e:	3f ef       	ldi	r19, 0xFF	; 255
    2240:	4f e7       	ldi	r20, 0x7F	; 127
    2242:	57 e4       	ldi	r21, 0x47	; 71
    2244:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2248:	18 16       	cp	r1, r24
    224a:	4c f5       	brge	.+82     	; 0x229e <main+0xb86>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    224c:	6f a1       	ldd	r22, Y+39	; 0x27
    224e:	78 a5       	ldd	r23, Y+40	; 0x28
    2250:	89 a5       	ldd	r24, Y+41	; 0x29
    2252:	9a a5       	ldd	r25, Y+42	; 0x2a
    2254:	20 e0       	ldi	r18, 0x00	; 0
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	40 e2       	ldi	r20, 0x20	; 32
    225a:	51 e4       	ldi	r21, 0x41	; 65
    225c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2260:	dc 01       	movw	r26, r24
    2262:	cb 01       	movw	r24, r22
    2264:	bc 01       	movw	r22, r24
    2266:	cd 01       	movw	r24, r26
    2268:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    226c:	dc 01       	movw	r26, r24
    226e:	cb 01       	movw	r24, r22
    2270:	9a a3       	std	Y+34, r25	; 0x22
    2272:	89 a3       	std	Y+33, r24	; 0x21
    2274:	0f c0       	rjmp	.+30     	; 0x2294 <main+0xb7c>
    2276:	88 ec       	ldi	r24, 0xC8	; 200
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	98 a3       	std	Y+32, r25	; 0x20
    227c:	8f 8f       	std	Y+31, r24	; 0x1f
    227e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2280:	98 a1       	ldd	r25, Y+32	; 0x20
    2282:	01 97       	sbiw	r24, 0x01	; 1
    2284:	f1 f7       	brne	.-4      	; 0x2282 <main+0xb6a>
    2286:	98 a3       	std	Y+32, r25	; 0x20
    2288:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    228a:	89 a1       	ldd	r24, Y+33	; 0x21
    228c:	9a a1       	ldd	r25, Y+34	; 0x22
    228e:	01 97       	sbiw	r24, 0x01	; 1
    2290:	9a a3       	std	Y+34, r25	; 0x22
    2292:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2294:	89 a1       	ldd	r24, Y+33	; 0x21
    2296:	9a a1       	ldd	r25, Y+34	; 0x22
    2298:	00 97       	sbiw	r24, 0x00	; 0
    229a:	69 f7       	brne	.-38     	; 0x2276 <main+0xb5e>
    229c:	14 c0       	rjmp	.+40     	; 0x22c6 <main+0xbae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    229e:	6b a1       	ldd	r22, Y+35	; 0x23
    22a0:	7c a1       	ldd	r23, Y+36	; 0x24
    22a2:	8d a1       	ldd	r24, Y+37	; 0x25
    22a4:	9e a1       	ldd	r25, Y+38	; 0x26
    22a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22aa:	dc 01       	movw	r26, r24
    22ac:	cb 01       	movw	r24, r22
    22ae:	9a a3       	std	Y+34, r25	; 0x22
    22b0:	89 a3       	std	Y+33, r24	; 0x21
    22b2:	89 a1       	ldd	r24, Y+33	; 0x21
    22b4:	9a a1       	ldd	r25, Y+34	; 0x22
    22b6:	9e 8f       	std	Y+30, r25	; 0x1e
    22b8:	8d 8f       	std	Y+29, r24	; 0x1d
    22ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22bc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22be:	01 97       	sbiw	r24, 0x01	; 1
    22c0:	f1 f7       	brne	.-4      	; 0x22be <main+0xba6>
    22c2:	9e 8f       	std	Y+30, r25	; 0x1e
    22c4:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(100);
			count++;
    22c6:	de 01       	movw	r26, r28
    22c8:	af 57       	subi	r26, 0x7F	; 127
    22ca:	bf 4f       	sbci	r27, 0xFF	; 255
    22cc:	fe 01       	movw	r30, r28
    22ce:	ef 57       	subi	r30, 0x7F	; 127
    22d0:	ff 4f       	sbci	r31, 0xFF	; 255
    22d2:	80 81       	ld	r24, Z
    22d4:	8f 5f       	subi	r24, 0xFF	; 255
    22d6:	8c 93       	st	X, r24
    22d8:	77 ca       	rjmp	.-2834   	; 0x17c8 <main+0xb0>
			break;

		case 7:
			SSD_voidSendNumber(SSD1,7);
    22da:	80 91 92 00 	lds	r24, 0x0092
    22de:	90 91 93 00 	lds	r25, 0x0093
    22e2:	a0 91 94 00 	lds	r26, 0x0094
    22e6:	b0 91 95 00 	lds	r27, 0x0095
    22ea:	bc 01       	movw	r22, r24
    22ec:	cd 01       	movw	r24, r26
    22ee:	47 e0       	ldi	r20, 0x07	; 7
    22f0:	0e 94 b0 05 	call	0xb60	; 0xb60 <SSD_voidSendNumber>
			LED_voidOn(Leds[6]);
    22f4:	60 91 8c 00 	lds	r22, 0x008C
    22f8:	70 91 8d 00 	lds	r23, 0x008D
    22fc:	80 91 8e 00 	lds	r24, 0x008E
    2300:	0e 94 8f 06 	call	0xd1e	; 0xd1e <LED_voidOn>
    2304:	80 e0       	ldi	r24, 0x00	; 0
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	a8 ec       	ldi	r26, 0xC8	; 200
    230a:	b2 e4       	ldi	r27, 0x42	; 66
    230c:	89 8f       	std	Y+25, r24	; 0x19
    230e:	9a 8f       	std	Y+26, r25	; 0x1a
    2310:	ab 8f       	std	Y+27, r26	; 0x1b
    2312:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2314:	69 8d       	ldd	r22, Y+25	; 0x19
    2316:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2318:	8b 8d       	ldd	r24, Y+27	; 0x1b
    231a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	4a ef       	ldi	r20, 0xFA	; 250
    2322:	54 e4       	ldi	r21, 0x44	; 68
    2324:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2328:	dc 01       	movw	r26, r24
    232a:	cb 01       	movw	r24, r22
    232c:	8d 8b       	std	Y+21, r24	; 0x15
    232e:	9e 8b       	std	Y+22, r25	; 0x16
    2330:	af 8b       	std	Y+23, r26	; 0x17
    2332:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2334:	6d 89       	ldd	r22, Y+21	; 0x15
    2336:	7e 89       	ldd	r23, Y+22	; 0x16
    2338:	8f 89       	ldd	r24, Y+23	; 0x17
    233a:	98 8d       	ldd	r25, Y+24	; 0x18
    233c:	20 e0       	ldi	r18, 0x00	; 0
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	40 e8       	ldi	r20, 0x80	; 128
    2342:	5f e3       	ldi	r21, 0x3F	; 63
    2344:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2348:	88 23       	and	r24, r24
    234a:	2c f4       	brge	.+10     	; 0x2356 <main+0xc3e>
		__ticks = 1;
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	9c 8b       	std	Y+20, r25	; 0x14
    2352:	8b 8b       	std	Y+19, r24	; 0x13
    2354:	3f c0       	rjmp	.+126    	; 0x23d4 <main+0xcbc>
	else if (__tmp > 65535)
    2356:	6d 89       	ldd	r22, Y+21	; 0x15
    2358:	7e 89       	ldd	r23, Y+22	; 0x16
    235a:	8f 89       	ldd	r24, Y+23	; 0x17
    235c:	98 8d       	ldd	r25, Y+24	; 0x18
    235e:	20 e0       	ldi	r18, 0x00	; 0
    2360:	3f ef       	ldi	r19, 0xFF	; 255
    2362:	4f e7       	ldi	r20, 0x7F	; 127
    2364:	57 e4       	ldi	r21, 0x47	; 71
    2366:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    236a:	18 16       	cp	r1, r24
    236c:	4c f5       	brge	.+82     	; 0x23c0 <main+0xca8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    236e:	69 8d       	ldd	r22, Y+25	; 0x19
    2370:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2372:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2374:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2376:	20 e0       	ldi	r18, 0x00	; 0
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	40 e2       	ldi	r20, 0x20	; 32
    237c:	51 e4       	ldi	r21, 0x41	; 65
    237e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2382:	dc 01       	movw	r26, r24
    2384:	cb 01       	movw	r24, r22
    2386:	bc 01       	movw	r22, r24
    2388:	cd 01       	movw	r24, r26
    238a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    238e:	dc 01       	movw	r26, r24
    2390:	cb 01       	movw	r24, r22
    2392:	9c 8b       	std	Y+20, r25	; 0x14
    2394:	8b 8b       	std	Y+19, r24	; 0x13
    2396:	0f c0       	rjmp	.+30     	; 0x23b6 <main+0xc9e>
    2398:	88 ec       	ldi	r24, 0xC8	; 200
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	9a 8b       	std	Y+18, r25	; 0x12
    239e:	89 8b       	std	Y+17, r24	; 0x11
    23a0:	89 89       	ldd	r24, Y+17	; 0x11
    23a2:	9a 89       	ldd	r25, Y+18	; 0x12
    23a4:	01 97       	sbiw	r24, 0x01	; 1
    23a6:	f1 f7       	brne	.-4      	; 0x23a4 <main+0xc8c>
    23a8:	9a 8b       	std	Y+18, r25	; 0x12
    23aa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ac:	8b 89       	ldd	r24, Y+19	; 0x13
    23ae:	9c 89       	ldd	r25, Y+20	; 0x14
    23b0:	01 97       	sbiw	r24, 0x01	; 1
    23b2:	9c 8b       	std	Y+20, r25	; 0x14
    23b4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b6:	8b 89       	ldd	r24, Y+19	; 0x13
    23b8:	9c 89       	ldd	r25, Y+20	; 0x14
    23ba:	00 97       	sbiw	r24, 0x00	; 0
    23bc:	69 f7       	brne	.-38     	; 0x2398 <main+0xc80>
    23be:	14 c0       	rjmp	.+40     	; 0x23e8 <main+0xcd0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c0:	6d 89       	ldd	r22, Y+21	; 0x15
    23c2:	7e 89       	ldd	r23, Y+22	; 0x16
    23c4:	8f 89       	ldd	r24, Y+23	; 0x17
    23c6:	98 8d       	ldd	r25, Y+24	; 0x18
    23c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23cc:	dc 01       	movw	r26, r24
    23ce:	cb 01       	movw	r24, r22
    23d0:	9c 8b       	std	Y+20, r25	; 0x14
    23d2:	8b 8b       	std	Y+19, r24	; 0x13
    23d4:	8b 89       	ldd	r24, Y+19	; 0x13
    23d6:	9c 89       	ldd	r25, Y+20	; 0x14
    23d8:	98 8b       	std	Y+16, r25	; 0x10
    23da:	8f 87       	std	Y+15, r24	; 0x0f
    23dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    23de:	98 89       	ldd	r25, Y+16	; 0x10
    23e0:	01 97       	sbiw	r24, 0x01	; 1
    23e2:	f1 f7       	brne	.-4      	; 0x23e0 <main+0xcc8>
    23e4:	98 8b       	std	Y+16, r25	; 0x10
    23e6:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(100);
			count++;
    23e8:	de 01       	movw	r26, r28
    23ea:	af 57       	subi	r26, 0x7F	; 127
    23ec:	bf 4f       	sbci	r27, 0xFF	; 255
    23ee:	fe 01       	movw	r30, r28
    23f0:	ef 57       	subi	r30, 0x7F	; 127
    23f2:	ff 4f       	sbci	r31, 0xFF	; 255
    23f4:	80 81       	ld	r24, Z
    23f6:	8f 5f       	subi	r24, 0xFF	; 255
    23f8:	8c 93       	st	X, r24
    23fa:	e6 c9       	rjmp	.-3124   	; 0x17c8 <main+0xb0>
			break;

		case 8:
			SSD_voidSendNumber(SSD1,8);
    23fc:	80 91 92 00 	lds	r24, 0x0092
    2400:	90 91 93 00 	lds	r25, 0x0093
    2404:	a0 91 94 00 	lds	r26, 0x0094
    2408:	b0 91 95 00 	lds	r27, 0x0095
    240c:	bc 01       	movw	r22, r24
    240e:	cd 01       	movw	r24, r26
    2410:	48 e0       	ldi	r20, 0x08	; 8
    2412:	0e 94 b0 05 	call	0xb60	; 0xb60 <SSD_voidSendNumber>
			LED_voidOn(Leds[7]);
    2416:	60 91 8f 00 	lds	r22, 0x008F
    241a:	70 91 90 00 	lds	r23, 0x0090
    241e:	80 91 91 00 	lds	r24, 0x0091
    2422:	0e 94 8f 06 	call	0xd1e	; 0xd1e <LED_voidOn>
			BUZZ_voidOn(Buzz1);
    2426:	60 91 96 00 	lds	r22, 0x0096
    242a:	70 91 97 00 	lds	r23, 0x0097
    242e:	80 91 98 00 	lds	r24, 0x0098
    2432:	0e 94 34 0b 	call	0x1668	; 0x1668 <BUZZ_voidOn>
    2436:	80 e0       	ldi	r24, 0x00	; 0
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	a8 ec       	ldi	r26, 0xC8	; 200
    243c:	b2 e4       	ldi	r27, 0x42	; 66
    243e:	8b 87       	std	Y+11, r24	; 0x0b
    2440:	9c 87       	std	Y+12, r25	; 0x0c
    2442:	ad 87       	std	Y+13, r26	; 0x0d
    2444:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2446:	6b 85       	ldd	r22, Y+11	; 0x0b
    2448:	7c 85       	ldd	r23, Y+12	; 0x0c
    244a:	8d 85       	ldd	r24, Y+13	; 0x0d
    244c:	9e 85       	ldd	r25, Y+14	; 0x0e
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	4a ef       	ldi	r20, 0xFA	; 250
    2454:	54 e4       	ldi	r21, 0x44	; 68
    2456:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    245a:	dc 01       	movw	r26, r24
    245c:	cb 01       	movw	r24, r22
    245e:	8f 83       	std	Y+7, r24	; 0x07
    2460:	98 87       	std	Y+8, r25	; 0x08
    2462:	a9 87       	std	Y+9, r26	; 0x09
    2464:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2466:	6f 81       	ldd	r22, Y+7	; 0x07
    2468:	78 85       	ldd	r23, Y+8	; 0x08
    246a:	89 85       	ldd	r24, Y+9	; 0x09
    246c:	9a 85       	ldd	r25, Y+10	; 0x0a
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	40 e8       	ldi	r20, 0x80	; 128
    2474:	5f e3       	ldi	r21, 0x3F	; 63
    2476:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    247a:	88 23       	and	r24, r24
    247c:	2c f4       	brge	.+10     	; 0x2488 <main+0xd70>
		__ticks = 1;
    247e:	81 e0       	ldi	r24, 0x01	; 1
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	9e 83       	std	Y+6, r25	; 0x06
    2484:	8d 83       	std	Y+5, r24	; 0x05
    2486:	3f c0       	rjmp	.+126    	; 0x2506 <main+0xdee>
	else if (__tmp > 65535)
    2488:	6f 81       	ldd	r22, Y+7	; 0x07
    248a:	78 85       	ldd	r23, Y+8	; 0x08
    248c:	89 85       	ldd	r24, Y+9	; 0x09
    248e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	3f ef       	ldi	r19, 0xFF	; 255
    2494:	4f e7       	ldi	r20, 0x7F	; 127
    2496:	57 e4       	ldi	r21, 0x47	; 71
    2498:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    249c:	18 16       	cp	r1, r24
    249e:	4c f5       	brge	.+82     	; 0x24f2 <main+0xdda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    24a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    24a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    24a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	40 e2       	ldi	r20, 0x20	; 32
    24ae:	51 e4       	ldi	r21, 0x41	; 65
    24b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	bc 01       	movw	r22, r24
    24ba:	cd 01       	movw	r24, r26
    24bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24c0:	dc 01       	movw	r26, r24
    24c2:	cb 01       	movw	r24, r22
    24c4:	9e 83       	std	Y+6, r25	; 0x06
    24c6:	8d 83       	std	Y+5, r24	; 0x05
    24c8:	0f c0       	rjmp	.+30     	; 0x24e8 <main+0xdd0>
    24ca:	88 ec       	ldi	r24, 0xC8	; 200
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	9c 83       	std	Y+4, r25	; 0x04
    24d0:	8b 83       	std	Y+3, r24	; 0x03
    24d2:	8b 81       	ldd	r24, Y+3	; 0x03
    24d4:	9c 81       	ldd	r25, Y+4	; 0x04
    24d6:	01 97       	sbiw	r24, 0x01	; 1
    24d8:	f1 f7       	brne	.-4      	; 0x24d6 <main+0xdbe>
    24da:	9c 83       	std	Y+4, r25	; 0x04
    24dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24de:	8d 81       	ldd	r24, Y+5	; 0x05
    24e0:	9e 81       	ldd	r25, Y+6	; 0x06
    24e2:	01 97       	sbiw	r24, 0x01	; 1
    24e4:	9e 83       	std	Y+6, r25	; 0x06
    24e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e8:	8d 81       	ldd	r24, Y+5	; 0x05
    24ea:	9e 81       	ldd	r25, Y+6	; 0x06
    24ec:	00 97       	sbiw	r24, 0x00	; 0
    24ee:	69 f7       	brne	.-38     	; 0x24ca <main+0xdb2>
    24f0:	14 c0       	rjmp	.+40     	; 0x251a <main+0xe02>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24f2:	6f 81       	ldd	r22, Y+7	; 0x07
    24f4:	78 85       	ldd	r23, Y+8	; 0x08
    24f6:	89 85       	ldd	r24, Y+9	; 0x09
    24f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	9e 83       	std	Y+6, r25	; 0x06
    2504:	8d 83       	std	Y+5, r24	; 0x05
    2506:	8d 81       	ldd	r24, Y+5	; 0x05
    2508:	9e 81       	ldd	r25, Y+6	; 0x06
    250a:	9a 83       	std	Y+2, r25	; 0x02
    250c:	89 83       	std	Y+1, r24	; 0x01
    250e:	89 81       	ldd	r24, Y+1	; 0x01
    2510:	9a 81       	ldd	r25, Y+2	; 0x02
    2512:	01 97       	sbiw	r24, 0x01	; 1
    2514:	f1 f7       	brne	.-4      	; 0x2512 <main+0xdfa>
    2516:	9a 83       	std	Y+2, r25	; 0x02
    2518:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(100);
			count=0;
    251a:	fe 01       	movw	r30, r28
    251c:	ef 57       	subi	r30, 0x7F	; 127
    251e:	ff 4f       	sbci	r31, 0xFF	; 255
    2520:	10 82       	st	Z, r1
			for(u8 i=0;i<8;i++)
    2522:	fe 01       	movw	r30, r28
    2524:	e1 58       	subi	r30, 0x81	; 129
    2526:	ff 4f       	sbci	r31, 0xFF	; 255
    2528:	10 82       	st	Z, r1
    252a:	1c c0       	rjmp	.+56     	; 0x2564 <main+0xe4c>
			{
				LED_voidOff(Leds[i]);
    252c:	fe 01       	movw	r30, r28
    252e:	e1 58       	subi	r30, 0x81	; 129
    2530:	ff 4f       	sbci	r31, 0xFF	; 255
    2532:	80 81       	ld	r24, Z
    2534:	28 2f       	mov	r18, r24
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	c9 01       	movw	r24, r18
    253a:	88 0f       	add	r24, r24
    253c:	99 1f       	adc	r25, r25
    253e:	82 0f       	add	r24, r18
    2540:	93 1f       	adc	r25, r19
    2542:	fc 01       	movw	r30, r24
    2544:	e6 58       	subi	r30, 0x86	; 134
    2546:	ff 4f       	sbci	r31, 0xFF	; 255
    2548:	60 81       	ld	r22, Z
    254a:	71 81       	ldd	r23, Z+1	; 0x01
    254c:	82 81       	ldd	r24, Z+2	; 0x02
    254e:	0e 94 b1 06 	call	0xd62	; 0xd62 <LED_voidOff>
			SSD_voidSendNumber(SSD1,8);
			LED_voidOn(Leds[7]);
			BUZZ_voidOn(Buzz1);
			_delay_ms(100);
			count=0;
			for(u8 i=0;i<8;i++)
    2552:	de 01       	movw	r26, r28
    2554:	a1 58       	subi	r26, 0x81	; 129
    2556:	bf 4f       	sbci	r27, 0xFF	; 255
    2558:	fe 01       	movw	r30, r28
    255a:	e1 58       	subi	r30, 0x81	; 129
    255c:	ff 4f       	sbci	r31, 0xFF	; 255
    255e:	80 81       	ld	r24, Z
    2560:	8f 5f       	subi	r24, 0xFF	; 255
    2562:	8c 93       	st	X, r24
    2564:	fe 01       	movw	r30, r28
    2566:	e1 58       	subi	r30, 0x81	; 129
    2568:	ff 4f       	sbci	r31, 0xFF	; 255
    256a:	80 81       	ld	r24, Z
    256c:	88 30       	cpi	r24, 0x08	; 8
    256e:	f0 f2       	brcs	.-68     	; 0x252c <main+0xe14>
    2570:	2b c9       	rjmp	.-3498   	; 0x17c8 <main+0xb0>

00002572 <__prologue_saves__>:
    2572:	2f 92       	push	r2
    2574:	3f 92       	push	r3
    2576:	4f 92       	push	r4
    2578:	5f 92       	push	r5
    257a:	6f 92       	push	r6
    257c:	7f 92       	push	r7
    257e:	8f 92       	push	r8
    2580:	9f 92       	push	r9
    2582:	af 92       	push	r10
    2584:	bf 92       	push	r11
    2586:	cf 92       	push	r12
    2588:	df 92       	push	r13
    258a:	ef 92       	push	r14
    258c:	ff 92       	push	r15
    258e:	0f 93       	push	r16
    2590:	1f 93       	push	r17
    2592:	cf 93       	push	r28
    2594:	df 93       	push	r29
    2596:	cd b7       	in	r28, 0x3d	; 61
    2598:	de b7       	in	r29, 0x3e	; 62
    259a:	ca 1b       	sub	r28, r26
    259c:	db 0b       	sbc	r29, r27
    259e:	0f b6       	in	r0, 0x3f	; 63
    25a0:	f8 94       	cli
    25a2:	de bf       	out	0x3e, r29	; 62
    25a4:	0f be       	out	0x3f, r0	; 63
    25a6:	cd bf       	out	0x3d, r28	; 61
    25a8:	09 94       	ijmp

000025aa <__epilogue_restores__>:
    25aa:	2a 88       	ldd	r2, Y+18	; 0x12
    25ac:	39 88       	ldd	r3, Y+17	; 0x11
    25ae:	48 88       	ldd	r4, Y+16	; 0x10
    25b0:	5f 84       	ldd	r5, Y+15	; 0x0f
    25b2:	6e 84       	ldd	r6, Y+14	; 0x0e
    25b4:	7d 84       	ldd	r7, Y+13	; 0x0d
    25b6:	8c 84       	ldd	r8, Y+12	; 0x0c
    25b8:	9b 84       	ldd	r9, Y+11	; 0x0b
    25ba:	aa 84       	ldd	r10, Y+10	; 0x0a
    25bc:	b9 84       	ldd	r11, Y+9	; 0x09
    25be:	c8 84       	ldd	r12, Y+8	; 0x08
    25c0:	df 80       	ldd	r13, Y+7	; 0x07
    25c2:	ee 80       	ldd	r14, Y+6	; 0x06
    25c4:	fd 80       	ldd	r15, Y+5	; 0x05
    25c6:	0c 81       	ldd	r16, Y+4	; 0x04
    25c8:	1b 81       	ldd	r17, Y+3	; 0x03
    25ca:	aa 81       	ldd	r26, Y+2	; 0x02
    25cc:	b9 81       	ldd	r27, Y+1	; 0x01
    25ce:	ce 0f       	add	r28, r30
    25d0:	d1 1d       	adc	r29, r1
    25d2:	0f b6       	in	r0, 0x3f	; 63
    25d4:	f8 94       	cli
    25d6:	de bf       	out	0x3e, r29	; 62
    25d8:	0f be       	out	0x3f, r0	; 63
    25da:	cd bf       	out	0x3d, r28	; 61
    25dc:	ed 01       	movw	r28, r26
    25de:	08 95       	ret

000025e0 <_exit>:
    25e0:	f8 94       	cli

000025e2 <__stop_program>:
    25e2:	ff cf       	rjmp	.-2      	; 0x25e2 <__stop_program>
